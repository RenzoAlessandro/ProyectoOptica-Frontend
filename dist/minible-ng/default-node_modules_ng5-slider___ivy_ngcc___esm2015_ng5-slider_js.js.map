{"version":3,"file":"default-node_modules_ng5-slider___ivy_ngcc___esm2015_ng5-slider_js.js","mappings":";;;;;;;;;AAAa;;AAEb,8CAA6C;AAC7C;AACA,CAAC,EAAC;AACF;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kBAAe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5BgB;AAC+K;AAC7H;AACzB;AACL;AACJ;;AAE/C;AACA;AACA,cAAc,YAAY;AAC1B;AACA,WAAW,QAAQ;AACqB;AACE;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kFAAkF;AAClF,IAAI,uDAAgB;AACpB,EAAE;AACF,kBAAkB,2DAAoB;AACtC,oBAAoB,2DAAoB;AACxC,IAAI,wDAAiB;AACrB;AACA,4DAA4D;AAC5D,IAAI,uDAAgB;AACpB,EAAE;AACF,kBAAkB,2DAAoB;AACtC,IAAI,wDAAiB,4BAA4B,4DAAqB;AACtE;AACA,6BAA6B,SAAS;AACtC,qDAAqD;AACrD,IAAI,4DAAqB;AACzB,IAAI,uDAAgB;AACpB,IAAI,wDAAiB;AACrB,IAAI,wDAAiB;AACrB,IAAI,0DAAmB;AACvB,EAAE;AACF;AACA,oBAAoB,2DAAoB;AACxC,IAAI,wDAAiB,YAAY,6DAAsB;AACvD,IAAI,uDAAgB;AACpB,IAAI,wDAAiB;AACrB,IAAI,uDAAgB;AACpB,IAAI,wDAAiB;AACrB,IAAI,uDAAgB;AACpB,IAAI,wDAAiB;AACrB;AACA;AACA,sEAAsE;AACtE,IAAI,wDAAiB;AACrB;AACA,qCAAqC,SAAS;AAC9C,oEAAoE;AACpE,IAAI,qEAA8B;AAClC,IAAI,wDAAiB;AACrB,IAAI,mEAA4B;AAChC,EAAE;AACF,mBAAmB,2DAAoB;AACvC,IAAI,uDAAgB;AACpB,IAAI,wDAAiB,iEAAiE,6DAAsB;AAC5G;AACA,oEAAoE;AACpE,IAAI,qEAA8B;AAClC,IAAI,4DAAqB;AACzB,IAAI,oDAAa;AACjB,IAAI,0DAAmB;AACvB,IAAI,mEAA4B;AAChC,EAAE;AACF,mBAAmB,2DAAoB;AACvC,IAAI,uDAAgB;AACpB,IAAI,yDAAkB;AACtB,IAAI,uDAAgB;AACpB,IAAI,gEAAyB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,YAAY;AAC1B;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE;AACpcAAc,YAAY;AAC1B;AACA;AACA;;AAEA;AACA;AACA,cAAc,YAAY;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,GAAG;AAC5B;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,yBAAyB,GAAG;AAC5B;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,yBAAyB,GAAG;AAC5B;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,GAAG;AAC5B,uBAAuB,GAAG;AAC1B,4BAA4B,GAAG,cAAc,2BAA2B;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,YAAY;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,wBAAwB,GAAG;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,2BAA2B,GAAG;AAC9B;AACA;;AAEA;AACA;AACA,cAAc,YAAY;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,YAAY;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,YAAY;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,IAAI;AACnB,gBAAgB;AAChB;AACA;AACA;AACA,YAAY,wEAA8B;AAC1C;AACA;AACA;AACA,yBAAyB,GAAG;AAC5B;AACA,8BAA8B,yCAAO;AACrC,yBAAyB,GAAG;AAC5B;AACA;AACA,sEAAsE,+BAA+B;AACrG;AACA,6EAA6E,+BAA+B;AAC5G;AACA;AACA;AACA,cAAc,4DAAY,gCAAgC,+BAA+B;AACzF,cAAc,mDAAG,UAAU;AAC3B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,IAAI;AACnB,gBAAgB;AAChB;AACA;AACA,yBAAyB,GAAG;AAC5B;AACA,8BAA8B,yCAAO;AACrC,yBAAyB,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA,cAAc,4DAAY,gCAAgC,+BAA+B;AACzF,cAAc,mDAAG,UAAU;AAC3B;AACA,oCAAoC,kBAAkB;AACtD;AACA;AACA;;AAEA;AACA;AACA,cAAc,YAAY;AAC1B;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,IAAI;AACnB,gBAAgB;AAChB;AACA;AACA,yBAAyB,GAAG;AAC5B;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,IAAI;AACnB,gBAAgB;AAChB;AACA;AACA,yBAAyB,GAAG;AAC5B;AACA;AACA;AACA,eAAe,IAAI;AACnB,gBAAgB;AAChB;AACA;AACA,uBAAuB,GAAG;AAC1B,uBAAuB,GAAG;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,GAAG;AACjC;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,2EAA2E,yCAAyC,+DAAwB,CAAC,qDAAiB,GAAG,+DAAwB,CAAC,oDAAgB,GAAG,+DAAwB,CAAC,4DAAwB;AAC9P,4CAA4C,+DAAwB,GAAG,6JAA6J;AACpO,QAAQ,yDAAkB;AAC1B,SAAS;AACT;AACA;AACA,MAAM,MAAM,qDAAU,GAAG;AACzB,MAAM,MAAM,oDAAS,GAAG;AACxB,MAAM,MAAM,4DAAiB,GAAG;AAChC;AACA;AACA,kBAAkB,MAAM,sDAAW,4BAA4B;AAC/D,qBAAqB,MAAM,sDAAW,+BAA+B;AACrE,eAAe,MAAM,sDAAW,yBAAyB;AACzD,iBAAiB,MAAM,sDAAW,2BAA2B;AAC7D,iBAAiB,MAAM,sDAAW,2BAA2B;AAC7D,gBAAgB,MAAM,sDAAW,0BAA0B;AAC3D;AACA,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,oDAAS;AACvB;AACA;AACA,aAAa;AACb,KAAK,iBAAiB,UAAU,MAAM,qDAAiB,EAAE,IAAI,MAAM,oDAAgB,EAAE,IAAI,MAAM,4DAAwB,EAAE,IAAI,IAAI;AACjI,kBAAkB,sDAAW;AAC7B;AACA,SAAS;AACT,kBAAkB,sDAAW;AAC7B;AACA,SAAS;AACT,kBAAkB,sDAAW;AAC7B;AACA,SAAS;AACT,kBAAkB,sDAAW;AAC7B;AACA,SAAS;AACT,kBAAkB,sDAAW;AAC7B;AACA,SAAS;AACT,kBAAkB,sDAAW;AAC7B;AACA,SAAS,GAAG,IAAI;;AAEhB;AACA;AACA,cAAc,YAAY;AAC1B;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,yEAAyE,wCAAwC,+DAAwB,CAAC,qDAAiB,GAAG,+DAAwB,CAAC,oDAAgB,GAAG,+DAAwB,CAAC,4DAAwB;AAC3P,2CAA2C,+DAAwB,GAAG,0JAA0J;AAChO,QAAQ,yDAAkB;AAC1B,QAAQ,yDAAkB;AAC1B,OAAO,aAAa,wEAAiC,GAAG;AACxD;AACA;AACA,MAAM,MAAM,qDAAU,GAAG;AACzB,MAAM,MAAM,oDAAS,GAAG;AACxB,MAAM,MAAM,4DAAiB,GAAG;AAChC;AACA;AACA,iBAAiB,MAAM,sDAAW,sCAAsC;AACxE,eAAe,MAAM,sDAAW,wBAAwB;AACxD,mBAAmB,MAAM,sDAAW,4BAA4B;AAChE,0BAA0B,MAAM,sDAAW,oCAAoC;AAC/E,oBAAoB,MAAM,sDAAW,8BAA8B;AACnE,yBAAyB,MAAM,sDAAW,mCAAmC;AAC7E,uBAAuB,MAAM,sDAAW,iCAAiC;AACzE,wBAAwB,MAAM,sDAAW,kCAAkC;AAC3E,uBAAuB,MAAM,sDAAW,iCAAiC;AACzE,uBAAuB,MAAM,sDAAW,iCAAiC;AACzE;AACA,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,oDAAS;AACvB;AACA;AACA,aAAa;AACb,KAAK,iBAAiB,UAAU,MAAM,qDAAiB,EAAE,IAAI,MAAM,oDAAgB,EAAE,IAAI,MAAM,4DAAwB,EAAE,IAAI,IAAI;AACjI,kBAAkB,sDAAW;AAC7B;AACA,SAAS;AACT,kBAAkB,sDAAW;AAC7B;AACA,SAAS;AACT,kBAAkB,sDAAW;AAC7B;AACA,SAAS;AACT,kBAAkB,sDAAW;AAC7B;AACA,SAAS;AACT,kBAAkB,sDAAW;AAC7B;AACA,SAAS;AACT,kBAAkB,sDAAW;AAC7B;AACA,SAAS;AACT,kBAAkB,sDAAW;AAC7B;AACA,SAAS;AACT,kBAAkB,sDAAW;AAC7B;AACA,SAAS;AACT,kBAAkB,sDAAW;AAC7B;AACA,SAAS;AACT,kBAAkB,sDAAW;AAC7B;AACA,SAAS,GAAG,IAAI;;AAEhB;AACA;AACA,cAAc,YAAY;AAC1B;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,uBAAuB,GAAG;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,uCAAuC,+DAAwB,CAAC,qDAAiB,GAAG,+DAAwB,CAAC,oDAAgB,GAAG,+DAAwB,CAAC,4DAAwB;AACxP,0CAA0C,+DAAwB,GAAG,gFAAgF,wEAAiC,GAAG;AACzL;AACA;AACA,MAAM,MAAM,qDAAU,GAAG;AACzB,MAAM,MAAM,oDAAS,GAAG;AACxB,MAAM,MAAM,4DAAiB,GAAG;AAChC;AACA,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,oDAAS;AACvB;AACA;AACA,aAAa;AACb,KAAK,iBAAiB,UAAU,MAAM,qDAAiB,EAAE,IAAI,MAAM,oDAAgB,EAAE,IAAI,MAAM,4DAAwB,EAAE,IAAI,UAAU;;AAEvI;AACA;AACA,cAAc,YAAY;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,IAAI;AACnB,eAAe,IAAI;AACnB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,IAAI;AACnB,eAAe,IAAI;AACnB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,6DAAiB;AAC9B;AACA,iBAAiB,yDAAU;AAC3B;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,uDAAY;AAC3C;AACA;AACA;AACA,mCAAmC,uDAAY;AAC/C;AACA;AACA;AACA;AACA,mCAAmC,uDAAY;AAC/C;AACA,8BAA8B,uDAAY;AAC1C;AACA,iCAAiC,uDAAY;AAC7C;AACA,2CAA2C,yCAAO;AAClD;AACA,4CAA4C,yCAAO;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,IAAI;AACnB,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB,oEAAoB;AACtC;AACA;AACA,QAAQ,sDAAM;AACd,cAAc,4DAAY,wBAAwB,+BAA+B;AACjF,cAAc,mDAAG,UAAU;AAC3B;AACA;AACA;AACA;AACA,eAAe,IAAI;AACnB,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB,oEAAoB;AACtC,cAAc,4DAAY,wBAAwB,+BAA+B;AACjF,cAAc,mDAAG,UAAU;AAC3B;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,GAAG;AAC5B;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,GAAG;AAC5B;AACA,yBAAyB,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,gBAAgB;AAC/C;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,GAAG;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,GAAG;AAC5B;AACA;AACA;AACA,yBAAyB,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,yBAAyB,GAAG;AAC5B,yBAAyB,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,GAAG;AAChC;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,6BAA6B,GAAG;AAChC;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,yBAAyB,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,qBAAqB;AACpD;AACA;AACA;AACA;AACA,+BAA+B,4DAA4D;AAC3F;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,8BAA8B,GAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,8BAA8B,GAAG;AACjC;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,GAAG;AACnB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,yBAAyB,GAAG;AAC5B;AACA;AACA,yBAAyB,GAAG;AAC5B;AACA;AACA;AACA,yBAAyB,GAAG;AAC5B,2BAA2B,GAAG;AAC9B;AACA;AACA;AACA,6BAA6B,GAAG;AAChC,6BAA6B,GAAG;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,GAAG;AACpC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gCAAgC,GAAG,UAAU,qBAAqB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,GAAG;AAC5B,yBAAyB,GAAG;AAC5B,4BAA4B,GAAG,mCAAmC,gCAAgC;AAClG;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,iCAAiC,GAAG;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,6BAA6B,GAAG;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,6BAA6B,GAAG;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,GAAG;AAC5B;AACA;AACA,yBAAyB,GAAG;AAC5B,yBAAyB,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,GAAG;AAC1B,uBAAuB,GAAG;AAC1B,yBAAyB,GAAG;AAC5B,yBAAyB,GAAG;AAC5B,yBAAyB,GAAG;AAC5B,yBAAyB,GAAG;AAC5B,yBAAyB,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,GAAG;AAChC,6BAA6B,GAAG;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,GAAG;AAC5B,yBAAyB,GAAG;AAC5B,yBAAyB,GAAG;AAC5B,yBAAyB,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,GAAG;AAC5B,yBAAyB,GAAG;AAC5B,yBAAyB,GAAG;AAC5B,yBAAyB,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,uBAAuB,GAAG;AAC1B,uBAAuB,GAAG;AAC1B,yBAAyB,GAAG;AAC5B;AACA;AACA,yBAAyB,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,GAAG;AACpC,iCAAiC,GAAG;AACpC,iCAAiC,GAAG;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,GAAG;AAChC;AACA;AACA;AACA;AACA;AACA,6BAA6B,GAAG;AAChC;AACA;AACA,6BAA6B,GAAG;AAChC,6BAA6B,GAAG;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,uBAAuB,GAAG;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,GAAG;AAChC,6BAA6B,GAAG;AAChC,6BAA6B,GAAG;AAChC;AACA;AACA;AACA,6BAA6B,GAAG;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,IAAI;AACnB,gBAAgB;AAChB;AACA;AACA,yBAAyB,GAAG;AAC5B,uBAAuB,GAAG;AAC1B;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,uBAAuB,GAAG;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,GAAG;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,uBAAuB,GAAG;AAC1B;AACA;AACA;AACA,uBAAuB,GAAG;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,GAAG;AAC5B;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,IAAI;AACnB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,uBAAuB,GAAG;AAC1B,yBAAyB,GAAG;AAC5B;AACA,gCAAgC,GAAG,UAAU,oBAAoB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,IAAI;AACnB,gBAAgB;AAChB;AACA;AACA,yBAAyB,GAAG;AAC5B,yBAAyB,GAAG;AAC5B;AACA,uBAAuB,GAAG;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,yBAAyB,GAAG;AAC5B,yBAAyB,GAAG;AAC5B,yBAAyB,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,8BAA8B,GAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,IAAI;AACnB,eAAe,IAAI;AACnB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,IAAI;AACnB,eAAe,IAAI;AACnB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,yDAAyD,wEAA8B;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,GAAG;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,GAAG;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kGAAkG,GAAG;AACrG;AACA;AACA,2CAA2C,GAAG;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,IAAI;AACnB,gBAAgB;AAChB;AACA;AACA,uBAAuB,GAAG;AAC1B;AACA,6BAA6B,GAAG,gCAAgC,GAAG;AACnE,gCAAgC,GAAG,UAAU,2BAA2B;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,GAAG;AAC5B;AACA;AACA,uBAAuB,GAAG;AAC1B,yBAAyB,GAAG;AAC5B;AACA;AACA,yBAAyB,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,GAAG,gCAAgC,GAAG;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,GAAG;AAC5B,uBAAuB,GAAG;AAC1B,uBAAuB,GAAG;AAC1B,uBAAuB,GAAG;AAC1B,uBAAuB,GAAG;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,GAAG;AAC5B,yBAAyB,GAAG;AAC5B;AACA;AACA,yBAAyB,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,GAAG;AAC5B,yBAAyB,GAAG;AAC5B,yBAAyB,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,GAAG;AAC5B,yBAAyB,GAAG;AAC5B;AACA;AACA;AACA;AACA,6BAA6B,GAAG;AAChC,2BAA2B,GAAG;AAC9B,2BAA2B,GAAG;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,GAAG;AAC5B,uBAAuB,GAAG;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,GAAG;AAC5B,uBAAuB,GAAG;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,IAAI;AACnB,gBAAgB;AAChB;AACA;AACA,yBAAyB,GAAG;AAC5B,uBAAuB,GAAG,yBAAyB,GAAG;AACtD,+BAA+B,GAAG;AAClC,uCAAuC,GAAG;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,GAAG;AAC5B,yBAAyB,GAAG;AAC5B,uBAAuB,GAAG;AAC1B,uBAAuB,GAAG;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,GAAG;AAC5B;AACA;AACA,yBAAyB,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,GAAG;AAC5B;AACA;AACA,yBAAyB,GAAG;AAC5B;AACA;AACA,yBAAyB,GA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B,QAAQ,yDAAY,IAAI,yBAAyB,6BAA6B,IAAI;;AAE/W;AACA;AACA,cAAc,YAAY;AAC1B;;AAEA;AACA;AACA,cAAc,YAAY;AAC1B;AACA;AACA;AACA;;AAEwN;;;;;;;;;;;;;ACpiH3M;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,gBAAgB,mBAAO,CAAC,sBAAW;AACnC,qBAAqB,mBAAO,CAAC,0BAAgB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,oBAAoB;;;;;;;;;;;;ACnDP;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,gBAAgB,mBAAO,CAAC,sBAAW;AACnC,gCAAgC,mBAAO,CAAC,0CAAgC;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,uBAAuB;;;;;;;;;;;;AC/CV;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,mBAAmB,mBAAO,CAAC,yBAAc;AACzC;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,uBAAuB;;;;;;;;;;;;AClCV;AACb,mBAAmB,mBAAO,CAAC,yBAAc;AACzC;AACA,mDAAmD,kBAAkB;AACrE;AACA,SAAS,kBAAkB,GAAG,oBAAoB,GAAG,gBAAgB;AACrE;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA,eAAe,0BAA0B;AACzC,eAAe,0BAA0B;AACzC,eAAe,kBAAkB;AACjC,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,mCAAmC;AAClD;AACA,eAAe,0BAA0B;AACzC,eAAe,kBAAkB;AACjC,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB,iBAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB,gBAAgB,iBAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,oBAAoB;;;;;;;;;;;;AC7HP;;AACb,IAAIA,MAAM,GAAGC,mBAAO,CAAC,wBAAD,CAApB;;AACA,IAAIC,cAAc,GAAGD,mBAAO,CAAC,gCAAD,CAA5B;;AACA,IAAIE,YAAY,GAAGF,mBAAO,CAAC,gCAAD,CAA1B;;AACA,IAAIG,MAAM,GAAGH,mBAAO,CAAC,wBAAD,CAApB;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAII,UAAU,GAAI,YAAY;AAC1B;AACJ;AACA;AACA;AACA;AACA;AACA;AACI,WAASA,UAAT,CAAoBC,SAApB,EAA+B;AAC3B,SAAKC,SAAL,GAAiB,KAAjB;;AACA,QAAID,SAAJ,EAAe;AACX,WAAKE,UAAL,GAAkBF,SAAlB;AACH;AACJ;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACID,EAAAA,UAAU,CAACI,SAAX,CAAqBC,IAArB,GAA4B,UAAUC,QAAV,EAAoB;AAC5C,QAAIC,UAAU,GAAG,IAAIP,UAAJ,EAAjB;AACAO,IAAAA,UAAU,CAACC,MAAX,GAAoB,IAApB;AACAD,IAAAA,UAAU,CAACD,QAAX,GAAsBA,QAAtqBH,SAArB,GAAiC,UAAUQ,cAAV,EAA0BC,KAA1B,EAAiCC,QAAjC,EAA2C;AACxE,QAAIL,QAAQ,GAAG,KAAKA,QAApB;AACA,QAAIM,IAAI,GAAGf,cAAc,CAACgB,YAAf,CAA4BJ,cAA5B,EAA4CC,KAA5C,EAAmDC,QAAnD,CAAX;;AACA,QAAIL,QAAJ,EAAc;AACVA,MAAAA,QAAQ,CAACQ,IAAT,CAAcF,IAAd,EAAoB,KAAKJ,MAAzB;AACH,KAFD,MAGK;AACDI,MAAAA,IAAI,CAACG,GAAL,CAAS,KAAKP,MAAL,IAAe,CAACI,IAAI,CAACI,kBAArB,GAA0C,KAAKb,UAAL,CAAgBS,IAAhB,CAA1C,GAAkE,KAAKK,aAAL,CAAmBL,IAAnB,CAA3E;AACH;;AACD,QAAIA,IAAI,CAACI,kBAAT,EAA6B;AACzBJ,MAAAA,IAAI,CAACI,kBAAL,GAA0B,KAA1B;;AACA,UAAIJ,IAAI,CAACM,eAAT,EAA0B;AACtB,cAAMN,IAAI,CAACO,cAAX;AACH;AACJ;;AACD,WAAOP,IAAP;AACH,GAhBD;;AAiBAZ,EAAAA,UAAU,CAACI,SAAX,CAAqBa,aAArB,GAAqC,UAAUL,IAAV,EAAgB;AACjD,QAAI;AACA,aAAO,KAAKT,UAAL,CAAgBS,IAAhB,CAAP;AACH,KAFD,CAGA,OAAOQ,GAAP,EAAY;AACRR,MAAAA,IAAI,CAACM,eAAL,GAAuB,IAAvB;AACAN,MAAAA,IAAI,CAACO,cAAL,GAAsBC,GAAtB;AACAR,MAAAA,IAAI,CAACF,KAAL,CAAWU,GAAX;AACH;AACJ,GATD;AAUA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIpB,EAAAA,UAAU,CAACI,SAAX,CAAqBiB,OAArB,GAA+B,UAAUC,IAAV,EAAgBC,WAAhB,EAA6B;AACxD,QAAIC,KAAK,GAAG,IAAZ;;AACA,QAAI,CAACD,WAAL,EAAkB;AACd,UAAI5B,MAAM,CAAC8B,IAAP,CAAYC,EAAZ,IAAkB/B,MAAM,CAAC8B,IAAP,CAAYC,EAAZ,CAAeC,MAAjC,IAA2ChC,MAAM,CAAC8B,IAAP,CAAYC,EAAZ,CAAeC,MAAf,CAAsBC,OAArE,EAA8E;AAC1EL,QAAAA,WAAW,GAAG5B,MAAM,CAAC8B,IAAP,CAAYC,EAAZ,CAAeC,MAAf,CAAsBC,OAApC;AACH,OAFD,MAGK,IAAIjC,MAAM,CAAC8B,IAAP,CAAYG,OAAhB,EAAyB;AAC1BL,QAAAA,WAAW,GAAG5B,MAAM,CAAC8B,IAAP,CAAYG,OAA1B;AACH;AACJ;;AACD,QAAI,CAACL,WAAL,EAAkB;AACd,YAAM,IAAIM,KAAJ,CAAU,uBAAV,CAAN;AACH;;AACD,WAAO,IAAIN,WAAJ,CAAgB,UAAUO,OAAV,EAAmBC,MAAnB,EAA2B;AAC9C;AACA;AACA,UAAIC,YAAJ;AACAA,MAAAA,YAAY,GAAGR,KAAK,CAACvB,SAAN,CAAgB,UAAUgC,KAAV,EAAiB;AAC5C,YAAID,YAAJ,EAAkB;AACd;AACA;AACA;AACA;AACA,cAAI;AACAV,YAAAA,IAAI,CAACW,KAAD,CAAJ;AACH,WAFD,CAGA,OAAOb,GAAP,EAAY;AACRW,YAAAA,MAAM,CAACX,GAAD,CAAN;AACAY,YAAAA,YAAY,CAACE,WAAb;AACH;AACJ,SAZD,MAaK;AACD;AACA;AACA;AACA;AACA;AACA;AACAZ,UAAAA,IAAI,CAACW,KAAD,CAAJ;AACH;AACJ,OAvBc,EAuBZF,MAvBY,EAuBJD,OAvBI,CAAf;AAwBH,KA5BM,CAAP;AA6BH,GA1CD;AA2CA;;;AAAqC9B,EAAAA,UAAU,CAACI,SAAX,CAAqBD,UAArB,GAAkC,UAAUgC,UAAV,EAAsB;AACzF,WAAO,KAAK3B,MAAL,CAAYP,SAAZ,CAAsBkC,UAAtB,CAAP;AACH,GAFoC;AAGrC;AACJ;AACA;AACA;AACA;;;AACInC,EAAAA,UAAU,CAACI,SAAX,CAAqBN,YAAY,CAACS,UAAlC,IAAgD,YAAY;AACxD,WAAO,IAAP;AACH,GAFD;AAGA;;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIP,EAAAA,UAAU,CAACI,SAAX,CAAqBgC,IAArB,GAA4B,YAAY;AACpC,QAAIC,UAAU,GAAG,EAAjB;;AACA,SAAK,IAAIC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGC,SAAS,CAACC,MAAhC,EAAwCF,EAAE,EAA1C,EAA8C;AAC1CD,MAAAA,UAAU,CAACC,EAAE,GAAG,CAAN,CAAV,GAAqBC,SAAS,CAACD,EAAD,CAA9B;AACH;;AACD,QAAID,UAAU,CAACG,MAAX,KAAsB,CAA1B,EAA6B;AACzB,aAAO,IAAP;AACH;;AACD,WAAOzC,MAAM,CAAC0C,aAAP,CAAqBJ,UAArB,EAAiC,IAAjC,CAAP;AACH,GATD;AAUA;;;AACArC,EAAAA,UAAU,CAACI,SAAX,CAAqBsC,SAArB,GAAiC,UAAUnB,WAAV,EAAuB;AACpD,QAAIC,KAAK,GAAG,IAAZ;;AACA,QAAI,CAACD,WAAL,EAAkB;AACd,UAAI5B,MAAM,CAAC8B,IAAP,CAAYC,EAAZ,IAAkB/B,MAAM,CAAC8B,IAAP,CAAYC,EAAZ,CAAeC,MAAjC,IAA2ChC,MAAM,CAAC8B,IAAP,CAAYC,EAAZ,CAAeC,MAAf,CAAsBC,OAArE,EAA8E;AAC1EL,QAAAA,WAAW,GAAG5B,MAAM,CAAC8B,IAAP,CAAYC,EAAZ,CAAeC,MAAf,CAAsBC,OAApC;AACH,OAFD,MAGK,IAAIjC,MAAM,CAAC8B,IAAP,CAAYG,OAAhB,EAAyB;AAC1BL,QAAAA,WAAW,GAAG5B,MAAM,CAAC8B,IAAP,CAAYG,OAA1B;AACH;AACJ;;AACD,QAAI,CAACL,WAAL,EAAkB;AACd,YAAM,IAAIM,KAAJ,CAAU,uBAAV,CAAN;AACH;;AACD,WAAO,IAAIN,WAAJ,CAAgB,UAAUO,OAAV,EAAmBC,MAAnB,EAA2B;AAC9C,UAAIE,KAAJ;;AACAT,MAAAA,KAAK,CAACvB,SAAN,CAAgB,UAAU0C,CAAV,EAAa;AAAE,eAAOV,KAAK,GAAGU,CAAf;AAAmB,OAAlD,EAAoD,UAAUvB,GAAV,EAAe;AAAE,eAAOW,MAAM,CAACX,GAAD,CAAb;AAAqB,OAA1F,EAA4F,YAAY;AAAE,eAAOU,OAAO,CAACG,KAAD,CAAd;AAAwB,OAAlI;AACH,KAHM,CAAP;AAIH,GAjBD,CAnQ0B,CAqR1B;AACA;;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIjC,EAAAA,UAAU,CAAC4C,MAAX,GAAoB,UAAU3C,SAAV,EAAqB;AACrC,WAAO,IAAID,UAAJ,CAAeC,SAAf,CAAP;AACH,GAFD;;AAGA,SAAOD,UAAP;AACH,CAnSiB,EAAlB;;AAoSA6C,kBAAA,GAAqB7C,UAArB;;;;;;;;;;;AC/Sa;AACb,aAAa;AACb;AACA,8BAA8B;AAC9B,4BAA4B,YAAY;AACxC;AACA;;;;;;;;;;;;ACNa;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,mBAAmB,mBAAO,CAAC,yBAAc;AACzC;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,uBAAuB;;;;;;;;;;;;AC5BV;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,gBAAgB,mBAAO,CAAC,sBAAW;AACnC,cAAc,mBAAO,CAAC,8BAAmB;AACzC,qBAAqB,mBAAO,CAAC,0BAAgB;AAC7C,kBAAkB,mBAAO,CAAC,kCAAuB;AACjD,gCAAgC,mBAAO,CAAC,0CAAgC;AACxE,4BAA4B,mBAAO,CAAC,kCAAuB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,+BAA+B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;ACpGY;AACb;AACA;AACA;AACA;;AACA,IAAI8C,SAAS,GAAGlD,mBAAO,CAAC,sBAAD,CAAvB;;AACAiD,eAAA,GAAkBC,SAAS,CAACC,OAA5B;AACAF,wBAAA,GAA2BC,SAAS,CAACE,gBAArC;AACA;;AACA,IAAIC,YAAY,GAAGrD,mBAAO,CAAC,yBAAD,CAA1B;;AACAiD,kBAAA,GAAqBI,YAAY,CAACjD,UAAlC,EACA;;AACA;;AACAJ,mBAAO,CAAC,0CAAD,CAAP;;AACAA,mBAAO,CAAC,8CAAD,CAAP;;AACAA,mBAAO,CAAC,2CAAD,CAAP;;AACAA,mBAAO,CAAC,oCAAD,CAAP;;AACAA,mBAAO,CAAC,kCAAD,CAAP;;AACAA,mBAAO,CAAC,mCAAD,CAAP;;AACAA,mBAAO,CAAC,sCAAD,CAAP;;AACAA,mBAAO,CAAC,kCAAD,CAAP;;AACAA,mBAAO,CAAC,uCAAD,CAAP;;AACAA,mBAAO,CAAC,8CAAD,CAAP;;AACAA,mBAAO,CAAC,yCAAD,CAAP;;AACAA,mBAAO,CAAC,sCAAD,CAAP;;AACAA,mBAAO,CAAC,gCAAD,CAAP;;AACAA,mBAAO,CAAC,sCAAD,CAAP;;AACAA,mBAAO,CAAC,kCAAD,CAAP;;AACAA,mBAAO,CAAC,kCAAD,CAAP;;AACAA,mBAAO,CAAC,mCAAD,CAAP;;AACAA,mBAAO,CAAC,gCAAD,CAAP;;AACAA,mBAAO,CAAC,+CAAD,CAAP;;AACAA,mBAAO,CAAC,mCAAD,CAAP;;AACAA,mBAAO,CAAC,mCAAD,CAAP;;AACAA,mBAAO,CAAC,mCAAD,CAAP;;AACAA,mBAAO,CAAC,mCAAD,CAAP;;AACAA,mBAAO,CAAC,mCAAD,CAAP;;AACAA,mBAAO,CAAC,iCAAD,CAAP,EACA;;;AACAA,mBAAO,CAAC,sCAAD,CAAP;;AACAA,mBAAO,CAAC,2CAAD,CAAP,EACA;;;AACAA,mBAAO,CAAC,kCAAD,CAAP;;AACAA,mBAAO,CAAC,uCAAD,CAAP;;AACAA,mBAAO,CAAC,sCAAD,CAAP;;AACAA,mBAAO,CAAC,wCAAD,CAAP;;AACAA,mBAAO,CAAC,sCAAD,CAAP;;AACAA,mBAAO,CAAC,iCAAD,CAAP;;AACAA,mBAAO,CAAC,sCAAD,CAAP;;AACAA,mBAAO,CAAC,yCAAD,CAAP;;AACAA,mBAAO,CAAC,kCAAD,CAAP;;AACAA,mBAAO,CAAC,qCAAD,CAAP;;AACAA,mBAAO,CAAC,qCAAD,CAAP;;AACAA,mBAAO,CAAC,uCAAD,CAAP;;AACAA,mBAAO,CAAC,iCAAD,CAAP;;AACAA,mBAAO,CAAC,yCAAD,CAAP;;AACAA,mBAAO,CAAC,oCAAD,CAAP;;AACAA,mBAAO,CAAC,wCAAD,CAAP;;AACAA,mBAAO,CAAC,0CAAD,CAAP;;AACAA,mBAAO,CAAC,iCAAD,CAAP;;AACAA,mBAAO,CAAC,qCAAD,CAAP;;AACAA,mBAAO,CAAC,mCAAD,CAAP;;AACAA,mBAAO,CAAC,gDAAD,CAAP;;AACAA,mBAAO,CAAC,mDAAD,CAAP;;AACAA,mBAAO,CAAC,8BAAD,CAAP;;AACAA,mBAAO,CAAC,mCAAD,CAAP;;AACAA,mBAAO,CAAC,sCAAD,CAAP;;AACAA,mBAAO,CAAC,kCAAD,CAAP;;AACAA,mBAAO,CAAC,oCAAD,CAAP;;AACAA,mBAAO,CAAC,kCAAD,CAAP;;AACAA,mBAAO,CAAC,kCAAD,CAAP;;AACAA,mBAAO,CAAC,gCAAD,CAAP;;AACAA,mBAAO,CAAC,qCAAD,CAAP;;AACAA,mBAAO,CAAC,iCAAD,CAAP;;AACAA,mBAAO,CAAC,mCAAD,CAAP;;AACAA,mBAAO,CAAC,0CAAD,CAAP;;AACAA,mBAAO,CAAC,mCAAD,CAAP;;AACAA,mBAAO,CAAC,+BAAD,CAAP;;AACAA,mBAAO,CAAC,qCAAD,CAAP;;AACAA,mBAAO,CAAC,gCAAD,CAAP;;AACAA,mBAAO,CAAC,+BAAD,CAAP;;AACAA,mBAAO,CAAC,iCAAD,CAAP;;AACAA,mBAAO,CAAC,+BAAD,CAAP;;AACAA,mBAAO,CAAC,iCAAD,CAAP;;AACAA,mBAAO,CAAC,uCAAD,CAAP;;AACAA,mBAAO,CAAC,+BAAD,CAAP;;AACAA,mBAAO,CAAC,iCAAD,CAAP;;AACAA,mBAAO,CAAC,oCAAD,CAAP;;AACAA,mBAAO,CAAC,oCAAD,CAAP;;AACAA,mBAAO,CAAC,sCAAD,CAAP;;AACAA,mBAAO,CAAC,oCAAD,CAAP;;AACAA,mBAAO,CAAC,+BAAD,CAAP;;AACAA,mBAAO,CAAC,qCAAD,CAAP;;AACAA,mBAAO,CAAC,qCAAD,CAAP;;AACAA,mBAAO,CAAC,6CAAD,CAAP;;AACAA,mBAAO,CAAC,oCAAD,CAAP;;AACAA,mBAAO,CAAC,qCAAD,CAAP;;AACAA,mBAAO,CAAC,iCAAD,CAAP;;AACAA,mBAAO,CAAC,mCAAD,CAAP;;AACAA,mBAAO,CAAC,2CAAD,CAAP;;AACAA,mBAAO,CAAC,yCAAD,CAAP;;AACAA,mBAAO,CAAC,uCAAD,CAAP;;AACAA,mBAAO,CAAC,gCAAD,CAAP;;AACAA,mBAAO,CAAC,kCAAD,CAAP;;AACAA,mBAAO,CAAC,kCAAD,CAAP;;AACAA,mBAAO,CAAC,sCAAD,CAAP;;AACAA,mBAAO,CAAC,iCAAD,CAAP;;AACAA,mBAAO,CAAC,qCAAD,CAAP;;AACAA,mBAAO,CAAC,kCAAD,CAAP;;AACAA,mBAAO,CAAC,sCAAD,CAAP;;AACAA,mBAAO,CAAC,gCAAD,CAAP;;AACAA,mBAAO,CAAC,yCAAD,CAAP;;AACAA,mBAAO,CAAC,iCAAD,CAAP;;AACAA,mBAAO,CAAC,sCAAD,CAAP;;AACAA,mBAAO,CAAC,kCAAD,CAAP;;AACAA,mBAAO,CAAC,gCAAD,CAAP;;AACAA,mBAAO,CAAC,oCAAD,CAAP;;AACAA,mBAAO,CAAC,qCAAD,CAAP;;AACAA,mBAAO,CAAC,qCAAD,CAAP;;AACAA,mBAAO,CAAC,qCAAD,CAAP;;AACAA,mBAAO,CAAC,uCAAD,CAAP;;AACAA,mBAAO,CAAC,kCAAD,CAAP;;AACAA,mBAAO,CAAC,qCAAD,CAAP;;AACAA,mBAAO,CAAC,sCAAD,CAAP;;AACAA,mBAAO,CAAC,gCAAD,CAAP;;AACAA,mBAAO,CAAC,oCAAD,CAAP;;AACAA,mBAAO,CAAC,qCAAD,CAAP;;AACAA,mBAAO,CAAC,qCAAD,CAAP;;AACAA,mBAAO,CAAC,oCAAD,CAAP;;AACAA,mBAAO,CAAC,wCAAD,CAAP;;AACAA,mBAAO,CAAC,wCAAD,CAAP;;AACAA,mBAAO,CAAC,mCAAD,CAAP;;AACAA,mBAAO,CAAC,sCAAD,CAAP;;AACAA,mBAAO,CAAC,qCAAD,CAAP;;AACAA,mBAAO,CAAC,mCAAD,CAAP;;AACAA,mBAAO,CAAC,qCAAD,CAAP;;AACAA,mBAAO,CAAC,kCAAD,CAAP;;AACAA,mBAAO,CAAC,uCAAD,CAAP;;AACAA,mBAAO,CAAC,qCAAD,CAAP;;AACAA,mBAAO,CAAC,wCAAD,CAAP;;AACAA,mBAAO,CAAC,oCAAD,CAAP;;AACAA,mBAAO,CAAC,0CAAD,CAAP;;AACAA,mBAAO,CAAC,+BAAD,CAAP;;AACAA,mBAAO,CAAC,kCAAD,CAAP;AACA;;;AACA,IAAIsD,cAAc,GAAGtD,mBAAO,CAAC,0BAAD,CAA5B;;AACAiD,oBAAA,GAAuBK,cAAc,CAACC,YAAtC;;AACA,IAAIC,YAAY,GAAGxD,mBAAO,CAAC,yBAAD,CAA1B;;AACAiD,kBAAA,GAAqBO,YAAY,CAACC,UAAlC;;AACA,IAAIC,cAAc,GAAG1D,mBAAO,CAAC,2BAAD,CAA5B;;AACAiD,oBAAA,GAAuBS,cAAc,CAACC,YAAtC;;AACA,IAAIC,eAAe,GAAG5D,mBAAO,CAAC,4BAAD,CAA7B;;AACAiD,qBAAA,GAAwBW,eAAe,CAACC,aAAxC;;AACA,IAAIC,iBAAiB,GAAG9D,mBAAO,CAAC,8BAAD,CAA/B;;AACAiD,uBAAA,GAA0Ba,iBAAiB,CAACC,eAA5C;;AACA,IAAIC,uBAAuB,GAAGhE,mBAAO,CAAC,+CAAD,CAArC;;AACAiD,6BAAA,GAAgCe,uBAAuB,CAACC,qBAAxD;;AACA,IAAIC,cAAc,GAAGlE,mBAAO,CAAC,2BAAD,CAA5B;;AACAiD,oBAAA,GAAuBiB,cAAc,CAACC,YAAtC;;AACA,IAAIC,YAAY,GAAGpE,mBAAO,CAAC,8BAAD,CAA1B;;AACAiD,kBAAA,GAAqBmB,YAAY,CAACC,UAAlC;;AACA,IAAIC,yBAAyB,GAAGtE,mBAAO,CAAC,2CAAD,CAAvC;;AACAiD,+BAAA,GAAkCqB,yBAAyB,CAACC,uBAA5D;;AACA,IAAIC,yBAAyB,GAAGxE,mBAAO,CAAC,0CAAD,CAAvC;;AACAiD,+BAAA,GAAkCuB,yBAAyB,CAACC,uBAA5D;;AACA,IAAIC,cAAc,GAAG1E,mBAAO,CAAC,gCAAD,CAA5B;;AACAiD,oBAAA,GAAuByB,cAAc,CAACC,YAAtC;;AACA,IAAIC,qBAAqB,GAAG5E,mBAAO,CAAC,uCAAD,CAAnC;;AACAiD,2BAAA,GAA8B2B,qBAAqB,CAACC,mBAApD;;AACA,IAAIC,cAAc,GAAG9E,mBAAO,CAAC,mCAAD,CAA5B;;AACAiD,oBAAA,GAAuB6B,cAAc,CAACC,YAAtC;;AACA,IAAIC,WAAW,GAAGhF,mBAAO,CAAC,kCAAD,CAAzB;;AACAiD,iBAAA,GAAoB+B,WAAW,CAACC,SAAhC;;AACA,IAAIC,eAAe,GAAGlF,mBAAO,CAAC,oCAAD,CAA7B;;AACAiD,qBAAA,GAAwBiC,eAAe,CAACC,aAAxC;;AACA,IAAIC,sBAAsB,GAAGpF,mBAAO,CAAC,6CAAD,CAApC;;AACAiD,4BAAA,GAA+BmC,sBAAsB,CAACC,oBAAtD;;AACA,IAAIC,gBAAgB,GAAGtF,mBAAO,CAAC,2CAAD,CAA9B;;AACAiD,oBAAA,GAAuBqC,gBAAgB,CAACC,YAAxC;AACAtC,iBAAA,GAAoBqC,gBAAgB,CAACE,SAArC;AACAvC,wBAAA,GAA2BqC,gBAAgB,CAACG,gBAA5C;;AACA,IAAItF,MAAM,GAAGH,mBAAO,CAAC,wBAAD,CAApB;;AACAiD,YAAA,GAAe9C,MAAM,CAACqC,IAAtB;;AACA,IAAIkD,MAAM,GAAG1F,mBAAO,CAAC,6BAAD,CAApB;;AACA,IAAI2F,OAAO,GAAG3F,mBAAO,CAAC,6BAAD,CAArB;;AACA,IAAI4F,OAAO,GAAG5F,mBAAO,CAAC,8BAAD,CAArB;;AACA,IAAI6F,gBAAgB,GAAG7F,mBAAO,CAAC,uCAAD,CAA9B;;AACA,IAAI8F,cAAc,GAAG9F,mBAAO,CAAC,kCAAD,CAA5B;;AACA,IAAI+F,UAAU,GAAG/F,mBAAO,CAAC,8BAAD,CAAxB;;AACA,IAAIE,YAAY,GAAGF,mBAAO,CAAC,gCAAD,CAA1B;;AACA,IAAIgG,UAAU,GAAGhG,mBAAO,CAAC,wBAAD,CAAxB;;AACAiD,iBAAA,GAAoB+C,UAApB;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIE,SAAS,GAAG;AACZC,EAAAA,IAAI,EAAET,MAAM,CAACS,IADD;AAEZC,EAAAA,KAAK,EAAER,OAAO,CAACQ,KAFH;AAGZC,EAAAA,cAAc,EAAER,gBAAgB,CAACQ,cAHrB;AAIZC,EAAAA,KAAK,EAAEX,OAAO,CAACW;AAJH,CAAhB;AAMArD,iBAAA,GAAoBiD,SAApB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIK,MAAM,GAAG;AACTC,EAAAA,YAAY,EAAEV,cAAc,CAACU,YADpB;AAET7F,EAAAA,UAAU,EAAET,YAAY,CAACS,UAFhB;AAGT8F,EAAAA,QAAQ,EAAEV,UAAU,CAACU;AAHZ,CAAb;AAKAxD,cAAA,GAAiBsD,MAAjB;;;;;;;;;;;ACvOa;AACb;AACA;AACA;AACA;AACA;AACA,kDAAkD,aAAa;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oCAAoC;AACnD;AACA,eAAe,QAAQ;AACvB;AACA,eAAe,GAAG;AAClB;AACA,gBAAgB,cAAc;AAC9B;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA,wDAAwD;AACxD;AACA,CAAC;AACD,iBAAiB;;;;;;;;;;;;AC/CJ;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,mBAAmB,mBAAO,CAAC,yBAAc;AACzC,mBAAmB,mBAAO,CAAC,yBAAc;AACzC,qBAAqB,mBAAO,CAAC,0BAAgB;AAC7C,gCAAgC,mBAAO,CAAC,0CAAgC;AACxE,4BAA4B,mBAAO,CAAC,kCAAuB;AAC3D,qBAAqB,mBAAO,CAAC,kCAAuB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,SAAS;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,wBAAwB;;;;;;;;;;;;ACtKX;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,qBAAqB,mBAAO,CAAC,0BAAgB;AAC7C;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,2BAA2B;;;;;;;;;;;;ACtCd;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,mBAAmB,mBAAO,CAAC,8BAAmB;AAC9C,qBAAqB,mBAAO,CAAC,0BAAgB;AAC7C,iBAAiB,mBAAO,CAAC,uBAAY;AACrC,qBAAqB,mBAAO,CAAC,kCAAuB;AACpD;AACA,mBAAmB,gBAAgB;AACnC,IAAI,oBAAoB,kBAAkB,gBAAgB;AAC1D,+BAA+B,iBAAiB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,mCAAmC;AAClD;AACA,eAAe,yBAAyB;AACxC;AACA,eAAe,kBAAkB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE;AACtE;AACA;AACA;AACA,eAAe,uBAAuB;AACtC,eAAe,yBAAyB;AACxC;AACA,eAAe,kBAAkB;AACjC;AACA,gBAAgB,eAAe;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,gBAAgB;AAC5B;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,gBAAgB;AAC5B,yCAAyC,YAAY;AACrD;AACA,eAAe,KAAK;AACpB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,gBAAgB;AAC5B;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,kBAAkB;AAClB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;;;;;;;;;;;;AC7Qa;AACb,gBAAgB,mBAAO,CAAC,2BAAgB;AACxC,iBAAiB,mBAAO,CAAC,4BAAiB;AAC1C,mBAAmB,mBAAO,CAAC,8BAAmB;AAC9C,iBAAiB,mBAAO,CAAC,4BAAiB;AAC1C,oBAAoB,mBAAO,CAAC,+BAAoB;AAChD,4BAA4B,mBAAO,CAAC,uCAA4B;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kBAAkB;AACjC;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B;AACA,gBAAgB,cAAc;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,cAAc;AAC7B,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD,oBAAoB;AACpB;AACA,gDAAgD,oGAAoG;AACpJ;;;;;;;;;;;;AC/La;AACb,mBAAmB,mBAAO,CAAC,6BAAkB;AAC7C,qBAAqB,mBAAO,CAAC,0CAA+B;AAC5D;;;;;;;;;;;;ACHa;AACb,mBAAmB,mBAAO,CAAC,6BAAkB;AAC7C,yBAAyB,mBAAO,CAAC,8CAAmC;AACpE;;;;;;;;;;;;ACHa;AACb,mBAAmB,mBAAO,CAAC,6BAAkB;AAC7C,sBAAsB,mBAAO,CAAC,2CAAgC;AAC9D;;;;;;;;;;;;ACHa;AACb,mBAAmB,mBAAO,CAAC,6BAAkB;AAC7C,eAAe,mBAAO,CAAC,oCAAyB;AAChD;;;;;;;;;;;;ACHa;AACb,mBAAmB,mBAAO,CAAC,6BAAkB;AAC7C,cAAc,mBAAO,CAAC,mCAAwB;AAC9C;;;;;;;;;;;;ACHa;AACb,mBAAmB,mBAAO,CAAC,gCAAqB;AAChD,aAAa,mBAAO,CAAC,yCAA8B;AA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B,CAA/B;;AA8OA6C,+BAAA,GAAkCmE,uBAAlC;;AACA,SAAS0B,YAAT,CAAsBC,GAAtB,EAA2B;AACvB,MAAI1G,KAAK,GAAG0G,GAAG,CAAC1G,KAAhB;AAAA,MAAuBwF,OAAO,GAAGkB,GAAG,CAAClB,OAArC;AACAA,EAAAA,OAAO,CAACnG,IAAR,CAAaW,KAAb;AACAwF,EAAAA,OAAO,CAAC9G,QAAR;AACH;;AACD,SAAS8H,aAAT,CAAuBE,GAAvB,EAA4B;AACxB,MAAIvH,GAAG,GAAGuH,GAAG,CAACvH,GAAd;AAAA,MAAmBqG,OAAO,GAAGkB,GAAG,CAAClB,OAAjC;AACAA,EAAAA,OAAO,CAAC/G,KAAR,CAAcU,GAAd;AACH;;;;;;;;;;;ACtQY;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C,iBAAiB,mBAAO,CAAC,6BAAkB;AAC3C,oBAAoB,mBAAO,CAAC,gCAAqB;AACjD,qBAAqB,mBAAO,CAAC,4BAAiB;AAC9C;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,mBAAmB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,oBAAoB;AACtE;AACA;AACA;AACA;AACA;AACA,oBAAoB,iBAAiB;AACrC;AACA,sDAAsD,mBAAmB;AACzE;AACA;AACA,cAAc,mBAAmB;AACjC;AACA;AACA;AACA;AACA;AACA,sDAAsD,iBAAiB;AACvE,QAAQ,wBAAwB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,oBAAoB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,yBAAyB;AACzB,yBAAyB;AACzB,QAAQ;AACR;AACA;AACA;AACA,6BAA6B;AAC7B,QAAQ;AACR;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,yBAAyB;AACzB,yBAAyB;AACzB,QAAQ;AACR;AACA;AACA;AACA,6BAA6B;AAC7B,QAAQ;AACR;AACA;AACA;AACA;AACA,yBAAyB;AACzB,QAAQ;AACR;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,aAAa;AACb,aAAa;AACb,aAAa;AACb;AACA,eAAe,UAAU;AACzB,eAAe,UAAU;AACzB;AACA,eAAe,WAAW;AAC1B;AACA,gBAAgB,oCAAoC;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA,6BAA6B,uBAAuB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,uBAAuB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,6DAA6D;AAClH;AACA;AACA;AACA,CAAC;AACD,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,uBAAuB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,4BAA4B;AAC5F;AACA;AACA;AACA;AACA,oEAAoE,oDAAoD;AACxH;AACA;AACA,mEAAmE,mCAAmC;AACtG;AACA;AACA;AACA;AACA,+DAA+D,gCAAgC;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,oDAAoD;AAChH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACrQa;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,gBAAgB,mBAAO,CAAC,uBAAY;AACpC,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C,qBAAqB,mBAAO,CAAC,2BAAiB;AAC9C,iBAAiB,mBAAO,CAAC,iCAAuB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,6BAA6B;AAC7B;AACA,uCAAuC;AACvC,gBAAgB,aAAa;AAC7B,iBAAiB,0BAA0B;AAC3C,gBAAgB,6BAA6B;AAC7C,mBAAmB,6BAA6B;AAChD,kBAAkB,oCAAoC;AACtD,mBAAmB,qDAAqD;AACxE,kBAAkB,oCAAoC;AACtD,eAAe,iCAAiC;AAChD,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;ACzKY;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C,0BAA0B,mBAAO,CAAC,sCAA2B;AAC7D,wBAAwB,mBAAO,CAAC,+BAAoB;AACpD;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA,aAAa;AACb;AACA,eAAe,mCAAmC;AAClD;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;ACjGY;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,eAAe;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,aAAa;AACb,aAAa;AACb,aAAa;AACb;AACA,eAAe,WAAW,eAAe,kBAAkB;AAC3D;AACA,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,wBAAwB;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,uBAAuB;;;;;;;;;;;;AC/EV;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,eAAe;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,aAAa;AACb,aAAa;AACb,aAAa;AACb;AACA,eAAe,KAAK;AACpB,eAAe,WAAW,eAAe,kBAAkB;AAC3D;AACA,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,uBAAuB;;;;;;;;;;;;ACjFV;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C,wBAAwB,mBAAO,CAAC,8BAAmB;AACnD,gBAAgB,mBAAO,CAAC,4BAAiB;AACzC,0BAA0B,mBAAO,CAAC,sCAA2B;AAC7D,wBAAwB,mBAAO,CAAC,+BAAoB;AACpD;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uFAAuF;AACvF,WAAW,WAAW;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,aAAa;AACb;AACA,eAAe,0BAA0B;AACzC;AACA,eAAe,UAAU;AACzB;AACA,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,uBAAuB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,0BAA0B;AAC1B;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;ACxMY;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C,iBAAiB,mBAAO,CAAC,6BAAkB;AAC3C,mBAAmB,mBAAO,CAAC,+BAAoB;AAC/C,oBAAoB,mBAAO,CAAC,gCAAqB;AACjD,qBAAqB,mBAAO,CAAC,2BAAiB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,oBAAoB,IAAI;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,aAAa;AACb,aAAa;AACb;AACA,eAAe,iBAAiB;AAChC;AACA,eAAe,QAAQ;AACvB;AACA,eAAe,sBAAsB;AACrC,eAAe,4BAA4B;AAC3C;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,SAAS;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,uBAAuB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,iBAAiB;AAC3B;AACA;AACA;AACA,CAAC;AACD,2BAA2B;;;;;;;;;;;;ACtNd;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,mBAAmB,mBAAO,CAAC,+BAAoB;AAC/C,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C,qBAAqB,mBAAO,CAAC,2BAAiB;AAC9C;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,aAAa;AACb;AACA,eAAe,kCAAkC;AACjD;AACA;AACA,eAAe,iDAAiD;AAChE;AACA;AACA;AACA,eAAe,2BAA2B;AAC1C;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,uBAAuB;AACpD;AACA;AACA;AACA,UAAU,iBAAiB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,kCAAkC;;;;;;;;;;;;AC/GrB;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,gBAAgB,mBAAO,CAAC,4BAAiB;AACzC,oBAAoB,mBAAO,CAAC,gCAAqB;AACjD,kBAAkB,mBAAO,CAAC,8BAAmB;AAC7C,0BAA0B,mBAAO,CAAC,gCAAqB;AACvD,2BAA2B,mBAAO,CAAC,iCAAsB;AACzD,wBAAwB,mBAAO,CAAC,8BAAmB;AACnD,4BAA4B,mBAAO,CAAC,kCAAuB;AAC3D,iBAAiB,mBAAO,CAAC,+BAAoB;AAC7C,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C,kBAAkB,mBAAO,CAAC,mCAAwB;AAClD,mBAAmB,mBAAO,CAAC,iCAAsB;AACjD;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,aAAa;AACb,aAAa;AACb,aAAa;AACb;AACA,eAAe,oBAAoB;AACnC;AACA;AACA,eAAe,WAAW;AAC1B;AACA,gBAAgB,eAAe;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,sBAAsB;;;;;;;;;;;;ACxHT;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C,oBAAoB,mBAAO,CAAC,gCAAqB;AACjD,sCAAsC;AACtC;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,0BAA0B;;;;;;;;;;;;ACrIb;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C,0BAA0B,mBAAO,CAAC,sCAA2B;AAC7D,wBAAwB,mBAAO,CAAC,+BAAoB;AACpD;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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AmBS,kBAAkB,CAACR,QAAtC,EAAgDS,MAAhD,EAAwD;AACnEE,MAAAA,KAAK,EAAEA,KAD4D;AACrD7G,MAAAA,UAAU,EAAEA,UADyC;AAC7B2G,MAAAA,MAAM,EAAEA;AADqB,KAAxD,CAAf;AAGH,GAPoC;;AAQrC,SAAOD,kBAAP;AACH,CAvEyB,CAuExB5F,YAAY,CAACjD,UAvEW,CAA1B;;AAwEA6C,0BAAA,GAA6BgG,kBAA7B;;;;;;;;;;;ACtFa;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,aAAa,mBAAO,CAAC,yBAAc;AACnC,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C,iBAAiB,mBAAO,CAAC,+BAAoB;AAC7C;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,CAAC;AACD,0BAA0B;AAC1B;AACA;AACA,8BAA8B;AAC9B,8BAA8B;AAC9B;AACA;AACA;AACA;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,8BAA8B;AAC9B,8BAA8B;AAC9B;AACA;AACA;AACA;AACA,iEAAiE;AACjE;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACjKa;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C,aAAa,mBAAO,CAAC,yBAAc;AACnC;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,aAAa;AACb,aAAa;AACb,aAAa;AACb;AACA,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,uBAAuB;;;;;;;;;;;;ACzDV;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA,eAAe,QAAQ;AACvB;AACA,eAAe,WAAW;AAC1B;AACA,iBAAiB,iCAAiC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,8BAA8B,cAAc;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,uBAAuB;;;;;;;;;;;;ACnFV;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,aAAa,mBAAO,CAAC,yBAAc;AACnC,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,aAAa;AACb;AACA,eAAe,gBAAgB;AAC/B,eAAe,WAAW;AAC1B;AACA,gBAAgB,eAAe;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,yDAAyD,YAAY;AACrE,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iEAAiE,2CAA2C;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E,sCAAsC;AACnH;AACA,iBAAiB;AACjB;AACA,8EAA8E,kCAAkC;AAChH;AACA,iBAAiB;AACjB;AACA;AACA,yDAAyD,YAAY;AACrE,iBAAiB;AACjB;AACA;AACA;AACA;AACA,CAAC;AACD,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACvHa;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,aAAa;AACb;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,WAAW,eAAe,kBAAkB;AAC3D;AACA,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,CAAC;AACD,uBAAuB;;;;;;;;;;;;AC9FV;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,wBAAwB;;;;;;;;;;;;ACxDX;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C,aAAa,mBAAO,CAAC,8BAAmB;AACxC,kBAAkB,mBAAO,CAAC,8BAAmB;AAC7C;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;AACD,6BAA6B;;;;;;;;;;;;ACjDhB;;AACb,IAAIvC,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA4B,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AACxD,OAAK,IAAIC,CAAT,IAAcD,CAAd,EAAiB,IAAIA,CAAC,CAACE,cAAF,CAAiBD,CAAjB,CAAJ,EAAyBF,CAAC,CAACE,CAAD,CAAD,GAAOD,CAAC,CAACC,CAAD,CAAR;;AAC1C,WAASE,EAAT,GAAc;AAAE,SAAKC,WAAL,GAAmBL,CAAnB;AAAuB;;AACvCA,EAAAA,CAAC,CAACnG,SAAF,GAAcoG,CAAC,KAAK,IAAN,GAAaK,MAAM,CAACjE,MA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OA,SAAS,CAACc,QAAV,CAAmBgB,eAAe,CAACf,QAAnC,EAA6CgB,OAA7C,EAAsD;AACzDL,MAAAA,KAAK,EAAEA,KADkD;AAC3CF,MAAAA,MAAM,EAAEA,MADmC;AAC3B3G,MAAAA,UAAU,EAAEA;AADe,KAAtD,CAAP;AAGH,GANoC;;AAOrC,SAAOiH,eAAP;AACH,CAxFsB,CAwFrBnG,YAAY,CAACjD,UAxFQ,CAAvB;;AAyFA6C,uBAAA,GAA0BuG,eAA1B;;;;;;;;;;;ACzGa;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C,0BAA0B,mBAAO,CAAC,sCAA2B;AAC7D,wBAAwB,mBAAO,CAAC,+BAAoB;AACpD;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;AC3DY;AACb,gCAAgC,mBAAO,CAAC,qCAA2B;AACnE,oBAAoB;;;;;;;;;;;;ACFP;AACb,oCAAoC,mBAAO,CAAC,0CAA+B;AAC3E,wBAAwB;;;;;;;;;;;;ACFX;AACb,oBAAoB,mBAAO,CAAC,gCAAqB;AACjD,gBAAgB,mBAAO,CAAC,4BAAiB;AACzC,wBAAwB,mBAAO,CAAC,8BAAmB;AACnD,sBAAsB,mBAAO,CAAC,uCAA4B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,iBAAiB;AAC5B,WAAW,iBAAiB;AAC5B;AACA;AACA,WAAW,UAAU;AACrB;AACA,WAAW,WAAW;AACtB;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;;;;;;;;;;;;ACtIR;AACb,oBAAoB,mBAAO,CAAC,gCAAqB;AACjD,WAAW,mBAAO,CAAC,iBAAM;AACzB,aAAa,mBAAO,CAAC,mBAAQ;AAC7B,kBAAkB,mBAAO,CAAC,mCAAwB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,aAAa;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,aAAa;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,iBAAiB;AAC5B,WAAW,iBAAiB;AAC5B;AACA,WAAW,WAAW;AACtB;AACA,YAAY,YAAY;AACxB;AACA;A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,CAAC8B,YAAhD;AAjBR;AAmBH;AACD;AACA;AACA;AACA;AACA;;;AACA,IAAIjJ,gBAAgB,GAAI,UAAU4B,MAAV,EAAkB;AACtCX,EAAAA,SAAS,CAACjB,gBAAD,EAAmB4B,MAAnB,CAAT;;AACA,WAAS5B,gBAAT,CAA0BmH,GAA1B,EAA+BlB,OAA/B,EAAwC;AACpCrE,IAAAA,MAAM,CAACnG,IAAP,CAAY,IAAZ,EAAkB,cAAlB,EAAkC0L,GAAlC,EAAuClB,OAAvC;AACH;;AACD,SAAOjG,gBAAP;AACH,CANuB,CAMtBD,SANsB,CAAxB;;AAOAvC,wBAAA,GAA2BwC,gBAA3B;;;;;;;;;;;ACxaa;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,gBAAgB,mBAAO,CAAC,0BAAe;AACvC,mBAAmB,mBAAO,CAAC,6BAAkB;AAC7C,mBAAmB,mBAAO,CAAC,6BAAkB;AAC7C,qBAAqB,mBAAO,CAAC,8BAAoB;AACjD,aAAa,mBAAO,CAAC,4BAAiB;AACtC,sBAAsB,mBAAO,CAAC,gCAAqB;AACnD,iBAAiB,mBAAO,CAAC,gCAAqB;AAC9C,oBAAoB,mBAAO,CAAC,mCAAwB;AACpD,eAAe,mBAAO,CAAC,8BAAmB;AAC1C;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,aAAa;AAClD;AACA;AACA;AACA,gBAAgB,eAAe;AAC/B;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,aAAa;AAClD;AACA,eAAe,iCAAiC;AAChD,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,mBAAmB,6BAA6B,gBAAgB,6BAA6B;AAC1G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,8EAA8E,mDAAmD;AACjI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,8BAA8B;AACjF;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,wBAAwB;;;;;;;;;;;;ACxPX;AACb,uBAAuB,mBAAO,CAAC,4BAAkB;AACjD,YAAY;;;;;;;;;;;;ACFC;AACb,yBAAyB,mBAAO,CAAC,+BAAoB;AACrD,iBAAiB;;;;;;;;;;;;ACFJ;AACb,wBAAwB,mBAAO,CAAC,8BAAmB;AACnD,aAAa;;;;;;;;;;;;ACFA;AACb,2BAA2B,mBAAO,CAAC,iCAAsB;AACzD,gBAAgB;;;;;;;;;;;;ACFH;AACb,uBAAuB,mBAAO,CAAC,4BAAkB;AACjD,YAAY;;;;;;;;;;;;ACFC;AACb,4BAA4B,mBAAO,CAAC,iCAAuB;AAC3D,iBAAiB;;;;;;;;;;;;ACFJ;AACb,mCAAmC,mBAAO,CAAC,yCAA8B;AACzE,wBAAwB;;;;;;;;;;;;ACFX;AACb,0BAA0B,mBAAO,CAAC,gCAAqB;AACvD,mBAAmB;;;;;;;;;;;;ACFN;AACb,2BAA2B,mBAAO,CAAC,iCAAsB;AACzD,gBAAgB;;;;;;;;;;;;ACFH;AACb,qBAAqB,mBAAO,CAAC,2BAAgB;AAC7C,WAAW;;;;;;;;;;;;ACFE;AACb,2BAA2B,mBAAO,CAAC,iCAAsB;AACzD,gBAAgB;;;;;;;;;;;;ACFH;AACb,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C,wBAAwB,mBAAO,CAAC,8BAAmB;AACnD,oBAAoB,mBAAO,CAAC,gCAAqB;AACjD,iBAAiB,mBAAO,CAAC,kCAAuB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,oBAAoB;AAC/B,WAAW,QAAQ;AACnB;AACA,WAAW,WAAW;AACtB;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;;;;;;;;;;;ACxFA;AACb,wBAAwB,mBAAO,CAAC,8BAAmB;AACnD,aAAa;;;;;;;;;;;;ACFA;AACb,wBAAwB,mBAAO,CAAC,8BAAmB;AACnD,UAAU;;;;;;;;;;;;ACFG;AACb,0BAA0B,mBAAO,CAAC,2CAAgC;AAClE,yBAAyB;;;;;;;;;;;;ACFZ;AACb,wBAAwB,mBAAO,CAAC,8BAAmB;AACnD,aAAa;;;;;;;;;;;;ACFA;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,gBAAgB,mBAAO,CAAC,4BAAiB;AACzC,wBAAwB,mBAAO,CAAC,0CAA+B;AAC/D,wBAAwB,mBAAO,CAAC,+BAAoB;AACpD,0BAA0B,mBAAO,CAAC,sCAA2B;AAC7D;AACA;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,oBAAoB;AACpB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,2BAA2B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,+BAA+B;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,sBAAsB;;;;;;;;;;;;ACvFT;AACb,wBAAwB,mBAAO,CAAC,8BAAmB;AACnD,aAAa;;;;;;;;;;;;ACFA;AACb,wBAAwB,mBAAO,CAAC,8BAAmB;AACnD,cAAc;;;;;;;;;;;;ACFD;AACb,wBAAwB,mBAAO,CAAC,8BAAmB;AACnD,aAAa;;;;;;;;;;;;ACFA;AACb,wBAAwB,mBAAO,CAAC,8BAAmB;AACnD,aAAa;;;;;;;;;;;;ACFA;AACb,YAAY,mBAAO,CAAC,6BAAkB;AACtC,WAAW;;;;;;;;;;;;ACFE;AACb,cAAc,mBAAO,CAAC,+BAAoB;AAC1C;AACA;AACA;AACA;AACA;AACA,qCAAqC,gBAAgB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,2CAA2C;AACtD;AACA;AACA,YAAY,eAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;;;;;;;;;;;AC7CA;;AACb,IAAIE,OAAO,GAAG3F,mBAAO,CAAC,8BAAD,CAArB;;AACA,IAAIkP,WAAW,GAAGlP,mBAAO,CAAC,mCAAD,CAAzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASmP,SAAT,CAAmBC,QAAnB,EAA6B1H,SAA7B,EAAwC;AACpC,MAAIA,SAAS,KAAK,KAAK,CAAvB,EAA0B;AAAEA,IAAAA,SAAS,GAAG/B,OAAO,CAACW,KAApB;AAA4B;;AACxD,SAAO4I,WAAW,CAACC,SAAZ,CAAsBC,QAAtB,EAAgC1H,SAAhC,EAA2C,IAA3C,CAAP;AACH;;AACDzE,iBAAA,GAAoBkM,SAApB;;;;;;;;;;;ACjDa;AACb,eAAe,mBAAO,CAAC,gCAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,iBAAiB;AAC5B;AACA,YAAY,iBAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;;;;;;;;;;;ACrCD;AACb,oBAAoB,mBAAO,CAAC,qCAA0B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA;AACA;AACA,YAAY,iBAAiB;AAC7B;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA,mBAAmB;;;;;;;;;;;;AC/CN;;AACb,IAAIxJ,OAAO,GAAG3F,mBAAO,CAAC,8BAAD,CAArB;;AACA,IAAIsJ,aAAa,GAAGtJ,mBAAO,CAAC,gCAAD,CAA3B;;AACA,IAAIqP,YAAY,GAAGrP,mBAAO,CAAC,mCAAD,CAA1B;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASsP,UAAT,CAAoBC,cAApB,EAAoC;AAChC,MAAI3M,MAAM,GAAGD,SAAS,CAACC,MAAvB;AACA,MAAI8E,SAAS,GAAG/B,OAAO,CAACW,KAAxB;;AACA,MAAIgD,aAAa,CAACK,WAAd,CAA0BhH,SAAS,CAACA,SAAS,CAACC,MAAV,GAAmB,CAApB,CAAnC,CAAJ,EAAgE;AAC5D8E,IAAAA,SAAS,GAAG/E,SAAS,CAACA,SAAS,CAACC,MAAV,GAAmB,CAApB,CAArB;AACAA,IAAAA,MAAM;AACT;;AACD,MAAI4M,sBAAsB,GAAG,IAA7B;;AACA,MAAI5M,MAAM,IAAI,CAAd,EAAiB;AACb4M,IAAAA,sBAAsB,GAAG7M,SAAS,CAAC,CAAD,CAAlC;AACH;;AACD,MAAI8M,aAAa,GAAG/F,MAAM,CAACgG,iBAA3B;;AACA,MAAI9M,MAAM,IAAI,CAAd,EAAiB;AACb6M,IAAAA,aAAa,GAAG9M,SAAS,CAAC,CAAD,CAAzB;AACH;;AACD,SAAO0M,YAAY,CAACC,UAAb,CAAwBC,cAAxB,EAAwCC,sBAAxC,EAAgEC,aAAhE,EAA+E/H,SAA/E,EAA0F,IAA1F,CAAP;AACH;;AACDzE,kBAAA,GAAqBqM,UAArB;;;;;;;;;;;ACjEa;AACb,qBAAqB,mBAAO,CAAC,sCAA2B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,0BAA0B;AACrC;AACA,WAAW,2CAA2C;AACtD;AACA;AACA;AACA,YAAY,iBAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;;;;;;;;;;;;AC3CP;AACb,mBAAmB,mBAAO,CAAC,oCAAyB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,wBAAwB;AACnC;AACA,YAAY,iBAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;;;;;;;;;;;;ACtCL;AACb,mBAAmB,mBAAO,CAAC,oCAAyB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB;AACA;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;;;;;;;;;;;AChED;AACb,mBAAmB,mBAAO,CAAC,oCAAyB;AACpD;AACA;AACA,wDAAwD,oBAAoB;AAC5E;AACA;AACA,IAAI,qBAAqB;AACzB;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT;AACA,WAAW,UAAU;AACrB;AACA;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;;;;;;;;;;;;AC7CL;AACb,sBAAsB,mBAAO,CAAC,uCAA4B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,iBAAiB;AAC5B;AACA,WAAW,UAAU;AACrB;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA;AACA,qBAAqB;;;;;;;;;;;;ACrDR;AACb,eAAe,mBAAO,CAAC,gCAAqB;AAC5C,eAAe,mBAAO,CAAC,iCAAsB;AAC7C,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,iBAAiB;AAC5B;AACA,WAAW,WAAW;AACtB;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA;AACA,cAAc;;;;;;;;;;;;AC7DD;AACb,kBAAkB,mBAAO,CAAC,mCAAwB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;;;;;;;;;;;ACtDJ;AACb,kBAAkB,mBAAO,CAAC,mCAAwB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,gBAAgB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,qDAAqD;AAChE;AACA;AACA,WAAW,qFAAqF;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;;;;;;;;;;;ACjEJ;AACb,oBAAoB,mBAAO,CAAC,qCAA0B;AACtD;AACA;AACA;AACA;AACA;AACA,qCAAqC,gBAAgB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,iBAAiB;AAC5B;AACA,WAAW,qFAAqF;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;;;;;;;;;;;;AC9DN;AACb,cAAc,mBAAO,CAAC,8BAAoB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,+DAA+D;AAC1E;AACA;AACA;AACA;AACA;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;;;;;;;;;;;ACrDA;AACb,iBAAiB,mBAAO,CAAC,kCAAuB;AAChD;AACA;AACA;AACA;AACA,qCAAqC,mBAAmB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,mBAAmB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,2CAA2C;AACtD;AACA;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;;;;;;;;;;;;AC/CH;;AACb,IAAI3J,OAAO,GAAG3F,mBAAO,CAAC,8BAAD,CAArB;;AACA,IAAI2P,cAAc,GAAG3P,mBAAO,CAAC,sCAAD,CAA5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS4P,YAAT,CAAsBnG,OAAtB,EAA+B/B,SAA/B,EAA0C;AACtC,MAAIA,SAAS,KAAK,KAAK,CAAvB,EAA0B;AAAEA,IAAAA,SAAS,GAAG/B,OAAO,CAACW,KAApB;AAA4B;;AACxD,SAAOqJ,cAAc,CAACC,YAAf,CAA4BnG,OAA5B,EAAqC/B,SAArC,EAAgD,IAAhD,CAAP;AACH;;AACDzE,oBAAA,GAAuB2M,YAAvB;;;;;;;;;;;ACrDa;AACb,uBAAuB,mBAAO,CAAC,wCAA6B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT;AACA,WAAW,KAAK;AAChB;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA,sBAAsB;;;;;;;;;;;;ACrCT;;AACb,IAAIjK,OAAO,GAAG3F,mBAAO,CAAC,8BAAD,CAArB;;AACA,IAAI6P,OAAO,GAAG7P,mBAAO,CAAC,+BAAD,CAArB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS8P,KAAT,CAAeA,KAAf,EAAsBpI,SAAtB,EAAiC;AAC7B,MAAIA,SAAS,KAAK,KAAK,CAAvB,EAA0B;AAAEA,IAAAA,SAAS,GAAG/B,OAAO,CAACW,KAApB;AAA4B;;AACxD,SAAOuJ,OAAO,CAACC,KAAR,CAAcA,KAAd,EAAqBpI,SAArB,EAAgC,IAAhC,CAAP;AACH;;AACDzE,aAAA,GAAgB6M,KAAhB;;;;;;;;;;;AC9Ca;AACb,kBAAkB,mBAAO,CAAC,mCAAwB;AAClD;AACA;AACA;AACA;AACA,qCAAqC,YAAY;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT;AACA,WAAW,gCAAgC;AAC3C;AACA;AACA;AACA,WAAW,YAAY;AACvB;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;;;;;;;;;;;AClDJ;AACb,sBAAsB,mBAAO,CAAC,uCAA4B;AAC1D;AACA,8BAA8B,oBAAoB;AAClD;AACA;AACA,mCAAmC,oBAAoB;AACvD,sDAAsD,kBAAkB;AACxE;AACA;AACA;AACA;AACA,IAAI,oBAAoB;AACxB;AACA;AACA;AACA;AACA,0CAA0C,kBAAkB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;;;;;;;;;;;;AC7CR;AACb,iBAAiB,mBAAO,CAAC,kCAAuB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,oBAAoB;AAC7B,SAAS,oBAAoB;AAC7B,SAAS,oBAAoB;AAC7B;AACA;AACA;AACA;AACA,QAAQ;AACR,QAAQ;AACR;AACA,SAAS;AACT,SAAS;AACT;AACA,WAAW,UAAU;AACrB,WAAW,YAAY;AACvB,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;;;;;;;;;;;;AClDH;AACb,6BAA6B,mBAAO,CAAC,8CAAmC;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,oBAAoB;AAC7B,SAAS,oBAAoB;AAC7B,SAAS,oBAAoB;AAC7B,SAAS,oBAAoB;AAC7B;AACA;AACA;AACA;AACA,QAAQ;AACR,QAAQ;AACR,QAAQ;AACR;AACA,SAAS;AACT,SAAS;AACT;AACA,WAAW,UAAU;AACrB,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;;;;;;;;;;;;AC7Cf;AACb,gCAAgC,mBAAO,CAAC,iDAAsC;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,oBAAoB;AAC7B,SAAS,oBAAoB;AAC7B,SAAS,oBAAoB;AAC7B,SAAS,oBAAoB;AAC7B;AACA;AACA;AACA;AACA,QAAQ;AACR,QAAQ;AACR,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,qBAAqB;AAC9B,SAAS,oBAAoB;AAC7B,SAAS,qBAAqB;AAC9B,SAAS,qBAAqB;AAC9B;AACA;AACA;AACA;AACA,QAAQ;AACR,QAAQ;AACR,QAAQ;AACR;AACA,SAAS;AACT,SAAS;AACT;AACA,WAAW,QAAQ;AACnB,WAAW,UAAU;AACrB,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;;;;;;;;;;;;AC/DlB;AACb,YAAY,mBAAO,CAAC,6BAAkB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT;AACA,WAAW,mBAAmB;AAC9B;AACA,WAAW,UAAU;AACrB,WAAW,UAAU;AACrB,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;;;;;;;;;;;;ACjDE;AACb,kBAAkB,mBAAO,CAAC,mCAAwB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,YAAY,yBAAyB;AACrC;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA,WAAW,GAAG;AACd,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;;;;;;;;;;;AC/CJ;AACb,cAAc,mBAAO,CAAC,8BAAoB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA,WAAW,UAAU;AACrB,WAAW,KAAK;AAChB,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;;;;;;;;;;;ACnBA;AACb,gBAAgB,mBAAO,CAAC,iCAAsB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,eAAe;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;;;;;;;;;;;;ACxCF;AACb,mBAAmB,mBAAO,CAAC,mCAAyB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,cAAc;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,qDAAqD;AAChE;AACA;AACA,WAAW,qFAAqF;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;;;;;;;;;;;;ACnDL;AACb,eAAe,mBAAO,CAAC,+BAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA,2CAA2C,eAAe;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT;AACA,WAAW,iDAAiD;AAC5D;AACA;AACA,WAAW,QAAQ;AACnB;AACA,WAAW,WAAW;AACtB;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,gCAAgC;AAChC;AACA;AACA;AACA,cAAc;;;;;;;;;;;;ACtDD;AACb,eAAe,mBAAO,CAAC,gCAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,4CAA4C;AACvD;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;;;;;;;;;;;AC7CD;AACb,iBAAiB,mBAAO,CAAC,kCAAuB;AAChD;AACA;AACA;AACA,WAAW,UAAU;AACrB,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;;;;;;;;;;;;ACbH;AACb,aAAa,mBAAO,CAAC,8BAAmB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,YAAY;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,mEAAmE;AAC9E;AACA,WAAW,KAAK;AAChB;AACA,YAAY,eAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;;;;;;;;;;;ACvCC;AACb,kBAAkB,mBAAO,CAAC,mCAAwB;AAClD;AACA;AACA;AACA;AACA,qCAAqC,WAAW;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,YAAY;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,mEAAmE;AAC9E;AACA,WAAW,KAAK;AAChB;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;;;;;;;;;;;ACvCJ;AACb,cAAc,mBAAO,CAAC,+BAAoB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,YAAY,YAAY;AACxB;AACA;AACA,WAAW,mEAAmE;AAC9E;AACA,WAAW,sCAAsC;AACjD;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd;AACA,YAAY,iBAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;;;;;;;;;;;ACtDA;AACb,gBAAgB,mBAAO,CAAC,iCAAsB;AAC9C,yBAAyB;AACzB;AACA;AACA;AACA;AACA,IAAI,yBAAyB;AAC7B;AACA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C,uBAAuB,mBAAmB;AAC1C,uBAAuB,mBAAmB;AAC1C,uBAAuB,oBAAoB;AAC3C,uBAAuB,mBAAmB;AAC1C,uBAAuB,sBAAsB;AAC7C,uBAAuB,oBAAoB;AAC3C,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,qBAAqB;AAC/B,UAAU,qBAAqB;AAC/B,UAAU,qBAAqB;AAC/B;AACA,UAAU,oBAAoB;AAC9B,UAAU,oBAAoB;AAC9B,UAAU,uBAAuB;AACjC,UAAU,0BAA0B;AACpC;AACA,UAAU,sBAAsB;AAChC;AACA;AACA,uBAAuB,oBAAoB;AAC3C,uBAAuB,mBAAmB;AAC1C,uBAAuB,mBAAmB;AAC1C,uBAAuB,oBAAoB;AAC3C,uBAAuB,mBAAmB;AAC1C,uBAAuB,sBAAsB;AAC7C,uBAAuB,oBAAoB;AAC3C,uBAAuB;AACvB;AACA;AACA;AACA,qBAAqB,+CAA+C;AACpE;AACA;AACA;AACA,QAAQ;AACR,QAAQ;AACR,QAAQ;AACR;AACA,WAAW,uBAAuB;AAClC;AACA,WAAW,uBAAuB;AAClC;AACA,WAAW,4DAA4D;AACvE;AACA;AACA,YAAY,oCAAoC;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;;;;;;;;;;;;AC1EF;AACb,uBAAuB,mBAAO,CAAC,wCAA6B;AAC5D;AACA;AACA;AACA;AACA;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;;;;;;;;;;;;AChBa;AACb,gBAAgB,mBAAO,CAAC,iCAAsB;AAC9C;AACA;AACA;AACA;AACA;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;;;;;;;;;;;;ACdF;AACb,aAAa,mBAAO,CAAC,8BAAmB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,YAAY;AACxB;AACA,WAAW,UAAU;AACrB,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;;;;;;;;;;;ACvBC;AACb;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;;;;;;;;;;;;ACVH;AACb,YAAY,mBAAO,CAAC,6BAAkB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT;AACA,WAAW,sCAAsC;AACjD;AACA;AACA;AACA,WAAW,KAAK;AAChB;AACA,YAAY,eAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;;;;;;;;;;;;ACtCE;AACb,cAAc,mBAAO,CAAC,+BAAoB;AAC1C;AACA;AACA;AACA;AACA,gCAAgC,UAAU;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,WAAW,KAAK;AAChB,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;;;;;;;;;;;AC/BA;AACb,oBAAoB,mBAAO,CAAC,qCAA0B;AACtD;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA,IAAI,oBAAoB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,oBAAoB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,sBAAsB;AACtB,sBAAsB;AACtB;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT;AACA,YAAY,6BAA6B;AACzC,IAAI,oBAAoB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;;;;;;;;;;;;ACjDN;AACb,YAAY,mBAAO,CAAC,6BAAkB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,oBAAoB;AAC9C,0BAA0B,oBAAoB;AAC9C,0BAA0B,qBAAqB;AAC/C;AACA,6DAA6D;AAC7D;AACA;AACA,SAAS;AACT;AACA,WAAW,UAAU;AACrB;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;;;;;;;;;;;;ACpCE;AACb,cAAc,mBAAO,CAAC,+BAAoB;AAC1C,cAAc,mBAAO,CAAC,gCAAqB;AAC3C,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,iBAAiB;AAC5B;AACA,WAAW,QAAQ;AACnB;AACA,WAAW,WAAW;AACtB;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA;AACA,aAAa;;;;;;;;;;;;AC1DA;AACb,iBAAiB,mBAAO,CAAC,kCAAuB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,QAAQ;AACnB;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA,gBAAgB;;;;;;;;;;;;AClDH;AACb,iBAAiB,mBAAO,CAAC,kCAAuB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,eAAe;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,qDAAqD;AAChE;AACA;AACA,WAAW,qFAAqF;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA,gBAAgB;;;;;;;;;;;;ACjEH;AACb,mBAAmB,mBAAO,CAAC,oCAAyB;AACpD;AACA;AACA;AACA;AACA;AACA,qCAAqC,eAAe;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,iBAAiB;AAC5B;AACA,WAAW,qFAAqF;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA,kBAAkB;;;;;;;;;;;;AClDL;AACb,kBAAkB,mBAAO,CAAC,mCAAwB;AAClD;AACA;AACA;AACA;AACA;AACA,qCAAqC,WAAW;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,2CAA2C;AACtD;AACA;AACA,WAAW,QAAQ;AACnB;AACA,YAAY,eAAe;AAC3B;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA,iBAAiB;;;;;;;;;;;;ACrCJ;AACb,YAAY,mBAAO,CAAC,6BAAkB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,oBAAoB;AAC9C,0BAA0B,oBAAoB;AAC9C,0BAA0B,qBAAqB;AAC/C;AACA,6DAA6D;AAC7D;AACA;AACA,SAAS;AACT;AACA,WAAW,UAAU;AACrB;AACA,YAAY,eAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;;;;;;;;;;;;ACpCE;AACb,kBAAkB,mBAAO,CAAC,mCAAwB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E,4BAA4B;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qFAAqF,cAAc;AACnG,IAAI,mBAAmB,GAAG,sBAAsB,MAAM,qBAAqB,cAAc,cAAc;AACvG,IAAI,kBAAkB,GAAG,uBAAuB,IAAI,qBAAqB;AACzE;AACA;AACA,qBAAqB,eAAe,IAAI,qBAAqB;AAC7D,uBAAuB,aAAa,KAAK,mBAAmB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,kBAAkB;AAC7B;AACA;AACA,WAAW,UAAU;AACrB;AACA;AACA;AACA,YAAY,wCAAwC;AACpD,sCAAsC,4BAA4B;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;;;;;;;;;;;ACpGJ;;AACb,IAAIC,WAAW,GAAG/P,mBAAO,CAAC,mCAAD,CAAzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASgQ,SAAT,CAAmBtI,SAAnB,EAA8BoI,KAA9B,EAAqC;AACjC,MAAIA,KAAK,KAAK,KAAK,CAAnB,EAAsB;AAAEA,IAAAA,KAAK,GAAG,CAAR;AAAY;;AACpC,SAAOC,WAAW,CAACC,SAAZ,CAAsBtI,SAAtB,EAAiCoI,KAAjC,EAAwC,IAAxC,CAAP;AACH;;AACD7M,iBAAA,GAAoB+M,SAApB;;;;;;;;;;;ACpDa;AACb,0BAA0B,mBAAO,CAAC,2CAAgC;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,cAAc;AAChF;AACA;AACA;AACA;AACA;AACA,8DAA8D,gBAAgB;AAC9E,0FAA0F,aAAa;AACvG;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT;AACA,WAAW,oBAAoB;AAC/B,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA;AACA,yBAAyB;;;;;;;;;;;;ACvEZ;AACb,iBAAiB,mBAAO,CAAC,kCAAuB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,SAAS;AACT,SAAS;AACT;AACA,YAAY,sBAAsB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;;;;;;;;;;;;ACxCH;AACb,kBAAkB,mBAAO,CAAC,mCAAwB;AAClD;AACA;AACA;AACA;AACA,qCAAqC,aAAa;AAClD,2BAA2B,aAAa;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,cAAc;AAClE,iBAAiB,cAAc;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,WAAW,4CAA4C;AACvD;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB;AACA,YAAY,gCAAgC;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;;;;;;;;;;;AC9CJ;AACb,cAAc,mBAAO,CAAC,+BAAoB;AAC1C;AACA;AACA;AACA,gCAAgC,UAAU;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,WAAW,WAAW;AACtB;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA;AACA,aAAa;;;;;;;;;;;;ACnCA;AACb,gBAAgB,mBAAO,CAAC,iCAAsB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;;;;;;;;;;;;ACnBF;AACb,wBAAwB,mBAAO,CAAC,yCAA8B;AAC9D;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;;;;;;;;;;;;ACXV;AACb,oBAAoB,mBAAO,CAAC,qCAA0B;AACtD;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;;;;;;;;;;;;ACXN;AACb,sBAAsB,mBAAO,CAAC,uCAA4B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;;;;;;;;;;;;ACfR;AACb,aAAa,mBAAO,CAAC,8BAAmB;AACxC;AACA,aAAa,mBAAO,CAAC,6BAAoB;AACzC,kBAAkB;AAClB;AACA;AACA;AACA;AACA,WAAW,gBAAgB;AAC3B,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA;AACA,YAAY;;;;;;;;;;;;ACrBC;AACb,eAAe,mBAAO,CAAC,8BAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,YAAY,sBAAsB,WAAW;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,8CAA8C;AACzD;AACA,WAAW,GAAG;AACd,YAAY,eAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;;;;;;;;;;;AC1DD;AACb,eAAe,mBAAO,CAAC,gCAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA,cAAc;;;;;;;;;;;;AClBD;AACb,mBAAmB,mBAAO,CAAC,oCAAyB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,iDAAiD;AAC5D;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;;;;;;;;;;;;ACnBL;AACb,cAAc,mBAAO,CAAC,+BAAoB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA,aAAa;;;;;;;;;;;;ACtBA;AACb,kBAAkB,mBAAO,CAAC,mCAAwB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,0CAA0C;AACrD;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;;;;;;;;;;;ACnBJ;AACb,eAAe,mBAAO,CAAC,gCAAqB;AAC5C;AACA;AACA;AACA;AACA,qCAAqC,iBAAiB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,iBAAiB;AAC5B;AACA,YAAY,eAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;;;;;;;;;;;ACvCD;;AACb,IAAIrK,OAAO,GAAG3F,mBAAO,CAAC,8BAAD,CAArB;;AACA,IAAIiQ,YAAY,GAAGjQ,mBAAO,CAAC,oCAAD,CAA1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASkQ,UAAT,CAAoBhH,MAApB,EAA4BxB,SAA5B,EAAuC;AACnC,MAAIA,SAAS,KAAK,KAAK,CAAvB,EAA0B;AAAEA,IAAAA,SAAS,GAAG/B,OAAO,CAACW,KAApB;AAA4B;;AACxD,SAAO2J,YAAY,CAACC,UAAb,CAAwBhH,MAAxB,EAAgCxB,SAAhC,EAA2C,IAA3C,CAAP;AACH;;AACDzE,kBAAA,GAAqBiN,UAArB;;;;;;;;;;;AC3Ca;AACb,aAAa,mBAAO,CAAC,8BAAmB;AACxC;AACA;AACA;AACA;AACA;AACA,qCAAqC,aAAa;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,aAAa;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,8CAA8C;AACzD;AACA,WAAW,KAAK;AAChB,YAAY,eAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;;;;;;;;;;;AC9CC;AACb,sBAAsB,mBAAO,CAAC,uCAA4B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,uFAAuF;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,YAAY;AACvB,WAAW,UAAU;AACrB,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;;;;;;;;;;;;ACzDR;AACb,cAAc,mBAAO,CAAC,+BAAoB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,eAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;;;;;;;;;;;ACtBa;AACb,oBAAoB,mBAAO,CAAC,qCAA0B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;;;;;;;;;;;;ACVa;AACb,eAAe,mBAAO,CAAC,gCAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,YAAY;AACxB;AACA,WAAW,UAAU;AACrB,YAAY,eAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;;;;;;;;;;;ACrBD;AACb,aAAa,mBAAO,CAAC,8BAAmB;AACxC;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;;;;;;;;;;;AChBC;AACb,iBAAiB,mBAAO,CAAC,kCAAuB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,YAAY,yBAAyB;AACrC;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,eAAe;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;;;;;;;;;;;;ACrCH;AACb,kBAAkB,mBAAO,CAAC,kCAAwB;AAClD;AACA;AACA;AACA;AACA;AACA,WAAW,YAAY;AACvB;AACA,YAAY,eAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;;;;;;;;;;;ACjBJ;AACb,kBAAkB,mBAAO,CAAC,mCAAwB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,YAAY,eAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;;;;;;;;;;;ACjBJ;AACb,kBAAkB,mBAAO,CAAC,kCAAwB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,WAAW,iBAAiB,kBAAkB;AACzD;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA;AACA,iBAAiB;;;;;;;;;;;;ACxBJ;AACb,oBAAoB,mBAAO,CAAC,qCAA0B;AACtD;AACA;AACA;AACA;AACA;AACA,WAAW,WAAW;AACtB,YAAY,eAAe;AAC3B;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA,mBAAmB;;;;;;;;;;;;ACjBN;AACb,kBAAkB,mBAAO,CAAC,mCAAwB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,eAAe;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,YAAY,eAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;;;;;;;;;;;;AC/CF;AACb,kBAAkB,mBAAO,CAAC,mCAAwB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,aAAa;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,qDAAqD;AAChE;AACA;AACA,WAAW,qFAAqF;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;;;;;;;;;;;ACrDJ;AACb,oBAAoB,mBAAO,CAAC,qCAA0B;AACtD;AACA;AACA;AACA,eAAe,cAAc;AAC7B;AACA,qCAAqC,gBAAgB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,iBAAiB;AAC5B;AACA,WAAW,qFAAqF;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;;;;;;;;;;;;AChDN;AACb,aAAa,mBAAO,CAAC,8BAAmB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,YAAY,yBAAyB;AACrC;AACA;AACA,WAAW,QAAQ;AACnB,YAAY,eAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;;;;;;;;;;;ACtCC;AACb,iBAAiB,mBAAO,CAAC,kCAAuB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,YAAY,yBAAyB;AACrC;AACA;AACA,WAAW,QAAQ;AACnB;AACA,YAAY,eAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;;;;;;;;;;;;ACzCH;AACb,kBAAkB,mBAAO,CAAC,mCAAwB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,YAAY;AACvB;AACA;AACA,YAAY,eAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;;;;;;;;;;;ACtCJ;AACb,kBAAkB,mBAAO,CAAC,kCAAwB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,4CAA4C;AACvD;AACA;AACA,YAAY,eAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;;;;;;;;;;;ACzCJ;AACb,iBAAiB,mBAAO,CAAC,kCAAuB;AAChD;AACA;AACA;AACA;AACA;AACA,qCAAqC,mBAAmB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,2CAA2C;AACtD;AACA;AACA,WAAW,QAAQ;AACnB,SAAS,gCAAgC;AACzC,YAAY,eAAe;AAC3B;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,gBAAgB;;;;;;;;;;;;AC9CH;;AACb,IAAIvK,OAAO,GAAG3F,mBAAO,CAAC,8BAAD,CAArB;;AACA,IAAImQ,UAAU,GAAGnQ,mBAAO,CAAC,kCAAD,CAAxB;;AACA,IAAIoQ,cAAc,GAAGpQ,mBAAO,CAAC,sCAAD,CAA5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASqQ,YAAT,CAAsBjB,QAAtB,EAAgC1H,SAAhC,EAA2C3F,MAA3C,EAAmD;AAC/C,MAAI2F,SAAS,KAAK,KAAK,CAAvB,EAA0B;AAAEA,IAAAA,SAAS,GAAG/B,OAAO,CAACW,KAApB;AAA4B;;AACxD,MAAIvE,MAAM,KAAK,KAAK,CAApB,EAAuB;AAAEA,IAAAA,MAAM,GAAGoO,UAAU,CAACG,qBAApB;AAA4C;;AACrE,SAAOF,cAAc,CAACC,YAAf,CAA4BjB,QAA5B,EAAsC1H,SAAtC,EAAiD3F,MAAjD,EAAyD,IAAzD,CAAP;AACH;;AACDkB,oBAAA,GAAuBoN,YAAvB;;;;;;;;;;;AChDa;;AACb,IAAI1K,OAAO,GAAG3F,mBAAO,CAAC,8BAAD,CAArB;;AACA,IAAI8E,cAAc,GAAG9E,mBAAO,CAAC,sCAAD,CAA5B;;AACAiD,oBAAA,GAAuB6B,cAAc,CAACC,YAAtC;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASwL,YAAT,CAAsB7I,SAAtB,EAAiC;AAC7B,MAAIA,SAAS,KAAK,KAAK,CAAvB,EAA0B;AAAEA,IAAAA,SAAS,GAAG/B,OAAO,CAACW,KAApB;AAA4B;;AACxD,SAAOxB,cAAc,CAACyL,YAAf,CAA4B7I,SAA5B,EAAuC,IAAvC,CAAP;AACH;;AACDzE,oBAAA,GAAuBsN,YAAvB;;;;;;;;;;;ACda;;AACb,IAAI5K,OAAO,GAAG3F,mBAAO,CAAC,8BAAD,CAArB;;AACA,IAAIwQ,SAAS,GAAGxQ,mBAAO,CAAC,iCAAD,CAAvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS8L,OAAT,CAAiB2E,GAAjB,EAAsB/I,SAAtB,EAAiC;AAC7B,MAAIA,SAAS,KAAK,KAAK,CAAvB,EAA0B;AAAEA,IAAAA,SAAS,GAAG/B,OAAO,CAACW,KAApB;AAA4B;;AACxD,SAAOkK,SAAS,CAAC1E,OAAV,CAAkB2E,GAAlB,EAAuB/I,SAAvB,EAAkC,IAAlC,CAAP;AACH;;AACDzE,eAAA,GAAkB6I,OAAlB;;;;;;;;;;;ACxEa;;AACb,IAAInG,OAAO,GAAG3F,mBAAO,CAAC,8BAAD,CAArB;;AACA,IAAI0Q,aAAa,GAAG1Q,mBAAO,CAAC,mCAAD,CAA3B;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS2Q,WAAT,CAAqBF,GAArB,EAA0BG,cAA1B,EAA0ClJ,SAA1C,EAAqD;AACjD,MAAIA,SAAS,KAAK,KAAK,CAAvB,EAA0B;AAAEA,IAAAA,SAAS,GAAG/B,OAAO,CAACW,KAApB;AAA4B;;AACxD,SAAOoK,aAAa,CAACC,WAAd,CAA0BF,GAA1B,EAA+BG,cAA/B,EAA+ClJ,SAA/C,EAA0D,IAA1D,CAAP;AACH;;AACDzE,mBAAA,GAAsB0N,WAAtB;;;;;;;;;;;ACvDa;;AACb,IAAIhL,OAAO,GAAG3F,mBAAO,CAAC,8BAAD,CAArB;;AACA,IAAIgF,WAAW,GAAGhF,mBAAO,CAAC,mCAAD,CAAzB;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS6Q,SAAT,CAAmBnJ,SAAnB,EAA8B;AAC1B,MAAIA,SAAS,KAAK,KAAK,CAAvB,EAA0B;AAAEA,IAAAA,SAAS,GAAG/B,OAAO,CAACW,KAApB;AAA4B;;AACxD,SAAOtB,WAAW,CAAC6L,SAAZ,CAAsBnJ,SAAtB,EAAiC,IAAjC,CAAP;AACH;;AACDzE,iBAAA,GAAoB4N,SAApB;;;;;;;;;;;ACba;AACb,gBAAgB,mBAAO,CAAC,iCAAsB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA,SAAS;AACT;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;;;;;;;;;;;;AC5BF;AACb,eAAe,mBAAO,CAAC,gCAAqB;AAC5C;AACA;AACA;AACA;AACA,qCAAqC,aAAa;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,iBAAiB;AAC5B;AACA,YAAY,2BAA2B;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;;;;;;;;;;;ACzCD;AACb,oBAAoB,mBAAO,CAAC,qCAA0B;AACtD;AACA;AACA;AACA;AACA,qCAAqC,kBAAkB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,QAAQ;AACnB;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA,YAAY,2BAA2B;AACvC;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA,mBAAmB;;;;;;;;;;;;ACtDN;;AACb,IAAIlL,OAAO,GAAG3F,mBAAO,CAAC,8BAAD,CAArB;;AACA,IAAIgJ,WAAW,GAAGhJ,mBAAO,CAAC,8BAAD,CAAzB;;AACA,IAAIsJ,aAAa,GAAGtJ,mBAAO,CAAC,gCAAD,CAA3B;;AACA,IAAI8Q,YAAY,GAAG9Q,mBAAO,CAAC,mCAAD,CAA1B;;AACA,SAAS+Q,UAAT,CAAoBC,cAApB,EAAoC;AAChC,MAAItJ,SAAS,GAAG/B,OAAO,CAACW,KAAxB;AACA,MAAI2K,sBAAsB,GAAG,IAA7B;AACA,MAAIC,aAAa,GAAGxH,MAAM,CAACgG,iBAA3B;;AACA,MAAIpG,aAAa,CAACK,WAAd,CAA0BhH,SAAS,CAAC,CAAD,CAAnC,CAAJ,EAA6C;AACzC+E,IAAAA,SAAS,GAAG/E,SAAS,CAAC,CAAD,CAArB;AACH;;AACD,MAAI2G,aAAa,CAACK,WAAd,CAA0BhH,SAAS,CAAC,CAAD,CAAnC,CAAJ,EAA6C;AACzC+E,IAAAA,SAAS,GAAG/E,SAAS,CAAC,CAAD,CAArB;AACH,GAFD,MAGK,IAAIqG,WAAW,CAACG,SAAZ,CAAsBxG,SAAS,CAAC,CAAD,CAA/B,CAAJ,EAAyC;AAC1CuO,IAAAA,aAAa,GAAGvO,SAAS,CAAC,CAAD,CAAzB;AACH;;AACD,MAAI2G,aAAa,CAACK,WAAd,CAA0BhH,SAAS,CAAC,CAAD,CAAnC,CAAJ,EAA6C;AACzC+E,IAAAA,SAAS,GAAG/E,SAAS,CAAC,CAAD,CAArB;AACH,GAFD,MAGK,IAAIqG,WAAW,CAACG,SAAZ,CAAsBxG,SAAS,CAAC,CAAD,CAA/B,CAAJ,EAAyC;AAC1CsO,IAAAA,sBAAsB,GAAGtO,SAAS,CAAC,CAAD,CAAlC;AACH;;AACD,SAAOmO,YAAY,CAACC,UAAb,CAAwBC,cAAxB,EAAwCC,sBAAxC,EAAgEC,aAAhE,EAA+ExJ,SAA/E,EAA0F,IAA1F,CAAP;AACH;;AACDzE,kBAAA,GAAqB8N,UAArB;;;;;;;;;;;AC1Ba;AACb,qBAAqB,mBAAO,CAAC,sCAA2B;AACxD;AACA;AACA;AACA;AACA;AACA,qCAAqC,mBAAmB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,eAAe;AAC1B;AACA,WAAW,gCAAgC;AAC3C;AACA;AACA;AACA,YAAY,2BAA2B;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;;;;;;;;;;;;AC9CP;AACb,mBAAmB,mBAAO,CAAC,oCAAyB;AACpD;AACA;AACA;AACA;AACA;AACA,qCAAqC,iBAAiB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,wBAAwB;AACnC;AACA;AACA,YAAY,2BAA2B;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;;;;;;;;;;;;AC3CL;AACb,uBAAuB,mBAAO,CAAC,wCAA6B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,WAAW,iBAAiB;AAC5B;AACA,WAAW,UAAU;AACrB;AACA;AACA;AACA;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA;AACA,sBAAsB;;;;;;;;;;;;AChDT;AACb,YAAY,mBAAO,CAAC,6BAAkB;AACtC;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA;AACA,gBAAgB;;;;;;;;;;;;AChBH;AACb,eAAe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;AACtD;AACA;AACA,YAAY,eAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;ACpHY;;AACb,IAAIpL,OAAO,GAAG3F,mBAAO,CAAC,8BAAD,CAArB;;AACA,IAAImR,OAAO,GAAGnR,mBAAO,CAAC,oBAAD,CAArB;;AACA,IAAIoR,OAAO,GAAGpR,mBAAO,CAAC,gCAAD,CAArB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASmP,SAAT,CAAmBC,QAAnB,EAA6B1H,SAA7B,EAAwC;AACpC,MAAIA,SAAS,KAAK,KAAK,CAAvB,EAA0B;AAAEA,IAAAA,SAAS,GAAG/B,OAAO,CAACW,KAApB;AAA4B;;AACxD,SAAO6K,OAAO,CAACE,KAAR,CAAc,YAAY;AAAE,WAAOD,OAAO,CAACE,KAAR,CAAclC,QAAd,EAAwB1H,SAAxB,CAAP;AAA4C,GAAxE,CAAP;AACH;;AACDzE,iBAAA,GAAoBkM,SAApB;;;;;;;;;;;AClDa;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,wBAAwB,mBAAO,CAAC,+BAAoB;AACpD,0BAA0B,mBAAO,CAAC,sCAA2B;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,iBAAiB;AAC5B;AACA,YAAY,iBAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;AC5EY;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA;AACA;AACA,YAAY,iBAAiB;AAC7B;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,IAAI;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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CA;AACA,qBAAqB,mBAAO,CAAC,2BAAiB;AAC9C,0BAA0B,mBAAO,CAAC,sCAA2B;AAC7D,wBAAwB,mBAAO,CAAC,+BAAoB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,0BAA0B;AACrC;AACA,WAAW,2CAA2C;AACtD;AACA;AACA;AACA,YAAY,iBAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;ACxJY;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,qBAAqB,mBAAO,CAAC,2BAAiB;AAC9C,iBAAiB,mBAAO,CAAC,6BAAkB;AAC3C,oBAAoB,mBAAO,CAAC,gCAAqB;AACjD,wBAAwB,mBAAO,CAAC,+BAAoB;AACpD,0BAA0B,mBAAO,CAAC,sCAA2B;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,wBAAwB;AACnC;AACA,YAAY,iBAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;AC1HY;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,wBAAwB,mBAAO,CAAC,+BAAoB;AACpD,0BAA0B,mBAAO,CAAC,sCAA2B;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB;AACA;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;AClHY;AACb,sBAAsB,mBAAO,CAAC,uCAA4B;AAC1D;AACA,+BAA+B;AAC/B;AACA,kBAAkB;;;;;;;;;;;;ACLL;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,wBAAwB,mBAAO,CAAC,0CAA+B;AAC/D,gBAAgB,mBAAO,CAAC,4BAAiB;AACzC,wBAAwB,mBAAO,CAAC,+BAAoB;AACpD,0BAA0B,mBAAO,CAAC,sCAA2B;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,iBAAiB;AAC5B;AACA,WAAW,UAAU;AACrB;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,6BAA6B;AAC7B;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,SAAS;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,+BAA+B;;;;;;;;;;;;ACrJlB;AACb,eAAe,mBAAO,CAAC,iCAAsB;AAC7C,eAAe,mBAAO,CAAC,iCAAsB;AAC7C,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,iBAAiB;AAC5B;AACA,WAAW,WAAW;AACtB;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA,+BAA+B;AAC/B;AACA,cAAc;;;;;;;;;;;;AC7DD;AACb,iBAAiB,mBAAO,CAAC,uBAAY;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;;;;;;;;;;;ACrDJ;AACb,iBAAiB,mBAAO,CAAC,uBAAY;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,gBAAgB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,qDAAqD;AAChE;AACA;AACA,WAAW,qFAAqF;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;;;;;;;;;;;ACjEJ;AACb,kBAAkB,mBAAO,CAAC,wBAAa;AACvC;AACA;AACA;AACA;AACA;AACA,qCAAqC,gBAAgB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,iBAAiB;AAC5B;AACA,WAAW,qFAAqF;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,yBAAyB;AACxE;AACA,mBAAmB;;;;;;;;;;;;AC9DN;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,+DAA+D;AAC1E;AACA;AACA;AACA;AACA;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;AC7GY;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,wBAAwB,mBAAO,CAAC,+BAAoB;AACpD,0BAA0B,mBAAO,CAAC,sCAA2B;AAC7D;AACA;AACA;AACA;AACA,qCAAqC,mBAAmB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,mBAAmB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,2CAA2C;AACtD;AACA;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;AC7HY;;AACb,IAAIf,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA4B,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AACxD,OAAK,IAAIC,CAAT,IAAcD,CAAd,EAAiB,IAAIA,CAAC,CAACE,cAAF,CAAiBD,CAAjB,CAAJ,EAAyBF,CAAC,CAACE,CAAD,CAAD,GAAOD,CAAC,CAACC,CAAD,CAAR;;AAC1C,WAASE,EAAT,GAAc;AAAE,SAAKC,WAAL,GAAmBL,CAAnB;AAAuB;;AACvCA,EAAAA,CAAC,CAACnG,SAAF,GAAcoG,CAAC,KAAK,IAAN,GAAaK,MAAM,CAACjE,MAAP,CAAc4D,CAAd,CAAb,IAAiCG,EAAE,CAACvG,SAAH,GAAeoG,CAAC,CAACpG,SAAjB,EAA4B,IAAIuG,EAAJ,EAA7D,CA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,wBAAwB,mBAAO,CAAC,+BAAoB;AACpD,0BAA0B,mBAAO,CAAC,sCAA2B;AAC7D;AACA;AACA;AACA;AACA,qCAAqC,YAAY;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT;AACA,WAAW,gCAAgC;AAC3C;AACA;AACA;AACA,WAAW,YAAY;AACvB;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;AChMY;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C;AACA,8BAA8B,oBAAoB;AAClD;AACA;AACA,mCAAmC,oBAAoB;AACvD,sDAAsD,kBAAkB;AACxE;AACA;AACA;AACA;AACA,IAAI,oBAAoB;AACxB;AACA;AACA;AACA;AACA,0CAA0C,kBAAkB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;AC3EY;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,wBAAwB,mBAAO,CAAC,+BAAoB;AACpD,0BAA0B,mBAAO,CAAC,sCAA2B;AAC7D,YAAY,mBAAO,CAAC,wBAAa;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,oBAAoB;AAC7B,SAAS,oBAAoB;AAC7B,SAAS,oBAAoB;AAC7B;AACA;AACA;AACA;AACA,QAAQ;AACR,QAAQ;AACR;AACA,SAAS;AACT,SAAS;AACT;AACA,WAAW,UAAU;AACrB,WAAW,YAAY;AACvB,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,0BAA0B;;;;;;;;;;;;ACtHb;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C,iBAAiB,mBAAO,CAAC,6BAAkB;AAC3C,oBAAoB,mBAAO,CAAC,gCAAqB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,oBAAoB;AAC7B,SAAS,oBAAoB;AAC7B,SAAS,oBAAoB;AAC7B,SAAS,oBAAoB;AAC7B;AACA;AACA;AACA;AACA,QAAQ;AACR,QAAQ;AACR,QAAQ;AACR;AACA,SAAS;AACT,SAAS;AACT;AACA,WAAW,UAAU;AACrB,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;AC1GY;AACb,6BAA6B,mBAAO,CAAC,mCAAwB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,oBAAoB;AAC7B,SAAS,oBAAoB;AAC7B,SAAS,oBAAoB;AAC7B,SAAS,oBAAoB;AAC7B;AACA;AACA;AACA;AACA,QAAQ;AACR,QAAQ;AACR,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,qBAAqB;AAC9B,SAAS,oBAAoB;AAC7B,SAAS,qBAAqB;AAC9B,SAAS,qBAAqB;AAC9B;AACA;AACA;AACA;AACA,QAAQ;AACR,QAAQ;AACR,QAAQ;AACR;AACA,SAAS;AACT,SAAS;AACT;AACA,WAAW,QAAQ;AACnB,WAAW,UAAU;AACrB,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA,yEAAyE,+DAA+D;AACxI;AACA,+BAA+B;;;;;;;;;;;;AC/DlB;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C,gCAAgC,mBAAO,CAAC,4CAAiC;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,YAAY,yBAAyB;AACrC;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA,WAAW,GAAG;AACd,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;AClGY;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA,WAAW,UAAU;AACrB,WAAW,KAAK;AAChB,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;ACxEY;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,wBAAwB,mBAAO,CAAC,+BAAoB;AACpD,0BAA0B,mBAAO,CAAC,sCAA2B;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,eAAe;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;ACvFY;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,wBAAwB,mBAAO,CAAC,+BAAoB;AACpD,0BAA0B,mBAAO,CAAC,sCAA2B;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,cAAc;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,qDAAqD;AAChE;AACA;AACA,WAAW,qFAAqF;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;ACxIY;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,iBAAiB,mBAAO,CAAC,6BAAkB;AAC3C,oBAAoB,mBAAO,CAAC,gCAAqB;AACjD,wBAAwB,mBAAO,CAAC,+BAAoB;AACpD,0BAA0B,mBAAO,CAAC,sCAA2B;AAC7D;AACA;AACA;AACA;AACA;AACA,2CAA2C,eAAe;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT;AACA,WAAW,iDAAiD;AAC5D;AACA;AACA,WAAW,QAAQ;AACnB;AACA,WAAW,WAAW;AACtB;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,gCAAgC;AAChC;AACA,+BAA+B;AAC/B;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,sBAAsB;AACtB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,wBAAwB;;;;;;;;;;;;ACrJX;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,4CAA4C;AACvD;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;AC5FY;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C,qBAAqB,mBAAO,CAAC,2BAAiB;AAC9C;AACA;AACA;AACA,WAAW,UAAU;AACrB,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;ACzCY;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,YAAY;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,mEAAmE;AAC9E;AACA,WAAW,KAAK;AAChB;AACA,YAAY,eAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,yBAAyB;AACzB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,2BAA2B;;;;;;;;;;;;AClGd;AACb,aAAa,mBAAO,CAAC,8BAAmB;AACxC;AACA;AACA;AACA;AACA,qCAAqC,WAAW;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,YAAY;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,mEAAmE;AAC9E;AACA,WAAW,KAAK;AAChB;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,iBAAiB;;;;;;;;;;;;ACvCJ;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C,mBAAmB,mBAAO,CAAC,+BAAoB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,YAAY,YAAY;AACxB;AACA;AACA,WAAW,mEAAmE;AAC9E;AACA,WAAW,sCAAsC;AACjD;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd;AACA,YAAY,iBAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;ACtJY;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C,qBAAqB,mBAAO,CAAC,2BAAiB;AAC9C,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C,gBAAgB,mBAAO,CAAC,uBAAY;AACpC,YAAY,mBAAO,CAAC,wBAAa;AACjC,gBAAgB,mBAAO,CAAC,4BAAiB;AACzC;AACA;AACA;AACA;AACA,IAAI,yBAAyB;AAC7B;AACA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C,uBAAuB,mBAAmB;AAC1C,uBAAuB,mBAAmB;AAC1C,uBAAuB,oBAAoB;AAC3C,uBAAuB,mBAAmB;AAC1C,uBAAuB,sBAAsB;AAC7C,uBAAuB,oBAAoB;AAC3C,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,qBAAqB;AAC/B,UAAU,qBAAqB;AAC/B,UAAU,qBAAqB;AAC/B;AACA,UAAU,oBAAoB;AAC9B,UAAU,oBAAoB;AAC9B,UAAU,uBAAuB;AACjC,UAAU,0BAA0B;AACpC;AACA,UAAU,sBAAsB;AAChC;AACA;AACA,uBAAuB,oBAAoB;AAC3C,uBAAuB,mBAAmB;AAC1C,uBAAuB,mBAAmB;AAC1C,uBAAuB,oBAAoB;AAC3C,uBAAuB,mBAAmB;AAC1C,uBAAuB,sBAAsB;AAC7C,uBAAuB,oBAAoB;AAC3C,uBAAuB;AACvB;AACA;AACA;AACA,qBAAqB,+CAA+C;AACpE;AACA;AACA;AACA,QAAQ;AACR,QAAQ;AACR,QAAQ;AACR;AACA,WAAW,uBAAuB;AAClC;AACA,WAAW,uBAAuB;AAClC;AACA,WAAW,4DAA4D;AACvE;AACA;AACA,YAAY,oCAAoC;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,yBAAyB;AACzB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;AClRY;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C,aAAa,mBAAO,CAAC,yBAAc;AACnC;AACA;AACA;AACA;AACA;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;AC9CY;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C;AACA,+BAA+B;AAC/B;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;ACzCY;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C,mBAAmB,mBAAO,CAAC,+BAAoB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,YAAY;AACxB;AACA,WAAW,UAAU;AACrB,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;ACrHY;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT;AACA,WAAW,sCAAsC;AACjD;AACA;AACA;AACA,WAAW,KAAK;AAChB;AACA,YAAY,eAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,mBAAmB;AACnB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;ACvFY;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C;AACA;AACA;AACA;AACA,gCAAgC,UAAU;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,WAAW,KAAK;AAChB,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;AC7DY;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C,qBAAqB,mBAAO,CAAC,4BAAiB;AAC9C;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA,IAAI,oBAAoB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,oBAAoB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,sBAAsB;AACtB,sBAAsB;AACtB;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT;AACA,YAAY,6BAA6B;AACzC,IAAI,oBAAoB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;AC1FY;AACb,eAAe,mBAAO,CAAC,mBAAU;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,oBAAoB;AAC9C,0BAA0B,oBAAoB;AAC9C,0BAA0B,qBAAqB;AAC/C;AACA,6DAA6D;AAC7D;AACA;AACA,SAAS;AACT;AACA,WAAW,UAAU;AACrB;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,4BAA4B;AAC5B;AACA;AACA,WAAW;;;;;;;;;;;;ACvCE;AACb,cAAc,mBAAO,CAAC,gCAAqB;AAC3C,cAAc,mBAAO,CAAC,gCAAqB;AAC3C,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,iBAAiB;AAC5B;AACA,WAAW,QAAQ;AACnB;AACA,WAAW,WAAW;AACtB;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA,+BAA+B;AAC/B;AACA,aAAa;;;;;;;;;;;;AC1DA;AACb,iBAAiB,mBAAO,CAAC,uBAAY;AACrC,iBAAiB,mBAAO,CAAC,6BAAkB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,QAAQ;AACnB;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA,gBAAgB;;;;;;;;;;;;ACnDH;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,0BAA0B,mBAAO,CAAC,sCAA2B;AAC7D,wBAAwB,mBAAO,CAAC,+BAAoB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,eAAe;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,qDAAqD;AAChE;AACA;AACA,WAAW,qFAAqF;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,wBAAwB;AACxB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,0BAA0B;;;;;;;;;;;;AC3Kb;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,wBAAwB,mBAAO,CAAC,+BAAoB;AACpD,0BAA0B,mBAAO,CAAC,sCAA2B;AAC7D;AACA;AACA;AACA;AACA;AACA,qCAAqC,eAAe;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,iBAAiB;AAC5B;AACA,WAAW,qFAAqF;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,0BAA0B;AAC1B;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,4BAA4B;;;;;;;;;;;;ACzJf;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,iBAAiB,mBAAO,CAAC,6BAAkB;AAC3C,oBAAoB,mBAAO,CAAC,gCAAqB;AACjD,0BAA0B,mBAAO,CAAC,sCAA2B;AAC7D,wBAAwB,mBAAO,CAAC,+BAAoB;AACpD;AACA;AACA;AACA;AACA;AACA,qCAAqC,WAAW;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,2CAA2C;AACtD;AACA;AACA,WAAW,QAAQ;AACnB;AACA,YAAY,eAAe;AAC3B;AACA;AACA;AACA;AACA,iCAAiC;AACjC,+BAA+B;AAC/B;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,yBAAyB;AACzB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,2BAA2B;;;;;;;;;;;;AC/Hd;AACb,eAAe,mBAAO,CAAC,mBAAU;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,oBAAoB;AAC9C,0BAA0B,oBAAoB;AAC9C,0BAA0B,qBAAqB;AAC/C;AACA,6DAA6D;AAC7D;AACA;AACA,SAAS;AACT;AACA,WAAW,UAAU;AACrB;AACA,YAAY,eAAe;AAC3B;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,4BAA4B;AAC5B;AACA;AACA,WAAW;;;;;;;;;;;;ACvCE;AACb,8BAA8B,mBAAO,CAAC,gDAAqC;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,kBAAkB;AAC7B;AACA;AACA,WAAW,UAAU;AACrB;AACA;AACA;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,yBAAyB;;;;;;;;;;;;ACzDZ;;AACb,IAAI/N,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA4B,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AACxD,OAAK,IAAIC,CAAT,IAAcD,CAAd,EAAiB,IAAIA,CAAC,CAACE,cAAF,CAAiBD,CAAjB,CAAJ,EAAyBF,CAAC,CAACE,CAAD,CAAD,GAAOD,CAAC,CAACC,CAAD,CAAR;;AAC1C,WAASE,EAAT,GAAc;AAAE,SAAKC,WAAL,GAAmBL,CAAn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A;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;ACvIY;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,SAAS;AACT,SAAS;AACT;AACA,YAAY,sBAAsB;AAClC;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;AC3EY;AACb,YAAY,mBAAO,CAAC,wBAAa;AACjC,eAAe,mBAAO,CAAC,qBAAU;AACjC;AACA;AACA;AACA;AACA,qCAAqC,aAAa;AAClD,2BAA2B,aAAa;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,cAAc;AAClE,iBAAiB,cAAc;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,WAAW,4CAA4C;AACvD;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB;AACA,YAAY,gCAAgC;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA,iBAAiB;;;;;;;;;;;;AClDJ;AACb,YAAY,mBAAO,CAAC,kBAAO;AAC3B;AACA;AACA;AACA,gCAAgC,UAAU;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,WAAW,WAAW;AACtB;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,aAAa;AACb;AACA;AACA;AACA,wBAAwB,YAAY;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACvDa;AACb,gBAAgB,mBAAO,CAAC,uBAAY;AACpC,kBAAkB,mBAAO,CAAC,wBAAa;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,iCAAiC;AAC7E;AACA;AACA,eAAe;;;;;;;;;;;;ACtBF;AACb,wBAAwB,mBAAO,CAAC,+BAAoB;AACpD,kBAAkB,mBAAO,CAAC,wBAAa;AACvC;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,uBAAuB;;;;;;;;;;;;ACZV;AACb,qBAAqB,mBAAO,CAAC,4BAAiB;AAC9C,kBAAkB,mBAAO,CAAC,wBAAa;AACvC;AACA,+BAA+B;AAC/B;AACA,mBAAmB;;;;;;;;;;;;ACNN;AACb,sBAAsB,mBAAO,CAAC,6BAAkB;AAChD,kBAAkB,mBAAO,CAAC,wBAAa;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,2CAA2C,iBAAiB;AAC3F;AACA,qBAAqB;;;;;;;;;;;;ACZR;AACb,gBAAgB,mBAAO,CAAC,4BAAiB;AACzC,aAAa,mBAAO,CAAC,6BAAoB;AACzC;AACA;AACA;AACA;AACA,WAAW,gBAAgB;AAC3B,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;;;;;;;;;;;AC1BC;AACb,aAAa,mBAAO,CAAC,mBAAQ;AAC7B,iBAAiB,mBAAO,CAAC,uBAAY;AACrC,uBAAuB,mBAAO,CAAC,6BAAkB;AACjD,aAAa,mBAAO,CAAC,yBAAc;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,YAAY,sBAAsB,WAAW;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,8CAA8C;AACzD;AACA,WAAW,GAAG;AACd,YAAY,eAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,cAAc;;;;;;;;;;;;ACnED;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;ACnFY;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C,wBAAwB,mBAAO,CAAC,0CAA+B;AAC/D;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;ACtEY;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,gBAAgB,mBAAO,CAAC,uBAAY;AACpC,iBAAiB,mBAAO,CAAC,6BAAkB;AAC3C,oBAAoB,mBAAO,CAAC,gCAAqB;AACjD,wBAAwB,mBAAO,CAAC,+BAAoB;AACpD,0BAA0B,mBAAO,CAAC,sCAA2B;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,iDAAiD;AAC5D;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;AC1GY;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,+BAA+B;AAC/B;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;AC/DY;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,gBAAgB,mBAAO,CAAC,uBAAY;AACpC,iBAAiB,mBAAO,CAAC,6BAAkB;AAC3C,oBAAoB,mBAAO,CAAC,gCAAqB;AACjD,wBAAwB,mBAAO,CAAC,+BAAoB;AACpD,0BAA0B,mBAAO,CAAC,sCAA2B;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,0CAA0C;AACrD;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;ACnGY;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,wBAAwB,mBAAO,CAAC,+BAAoB;AACpD,0BAA0B,mBAAO,CAAC,sCAA2B;AAC7D;AACA;AACA;AACA;AACA,qCAAqC,iBAAiB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT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AAAA,oBAAoB,CAAC3U,SAArB,CAA+B6U,UAA/B,GAA4C,YAAY;AACpD,QAAI,KAAK7B,QAAT,EAAmB;AACf,WAAKA,QAAL,GAAgB,KAAhB;AACA,WAAKjH,WAAL,CAAiB7K,IAAjB,CAAsB,KAAK6R,SAA3B;AACH;AACJ,GALD;;AAMA,SAAO4B,oBAAP;AACH,CApB2B,CAoB1B3R,YAAY,CAACC,UApBa,CAA5B;;AAqBA,SAAS2R,oBAAT,CAA8B1M,KAA9B,EAAqC;AACjC,MAAInG,UAAU,GAAGmG,KAAK,CAACnG,UAAvB;AAAA,MAAmC2G,MAAM,GAAGR,KAAK,CAACQ,MAAlD;AACA3G,EAAAA,UAAU,CAAC8S,UAAX;AACA,OAAK7M,QAAL,CAAcE,KAAd,EAAqBQ,MAArB;AACH;;;;;;;;;;;ACzFY;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C;AACA;AACA;AACA;AACA;AACA,qCAAqC,aAAa;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,aAAa;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,8CAA8C;AACzD;AACA,WAAW,KAAK;AAChB,YAAY,eAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;ACvHY;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C,iBAAiB,mBAAO,CAAC,6BAAkB;AAC3C,oBAAoB,mBAAO,CAAC,gCAAqB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,uFAAuF;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,YAAY;AACvB,WAAW,UAAU;AACrB,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,6BAA6B;AAC7B;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;AClKY;AACb,kBAAkB,mBAAO,CAAC,wBAAa;AACvC,iBAAiB,mBAAO,CAAC,sBAAY;AACrC,gBAAgB,mBAAO,CAAC,uBAAY;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,eAAe;AAC3B;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,aAAa;AACb;;;;;;;;;;;;ACvBa;AACb,sBAAsB,mBAAO,CAAC,6BAAkB;AAChD;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,sBAAsB;AAC/D;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC3Ca;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C,mBAAmB,mBAAO,CAAC,+BAAoB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,YAAY;AACxB;AACA,WAAW,UAAU;AACrB,YAAY,eAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;AC3FY;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;ACjDY;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C,gCAAgC,mBAAO,CAAC,4CAAiC;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,YAAY,yBAAyB;AACrC;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,eAAe;AAC5B;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;AC3FY;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,wBAAwB,mBAAO,CAAC,+BAAoB;AACpD,0BAA0B,mBAAO,CAAC,sCAA2B;AAC7D;AACA;AACA;AACA;AACA;AACA,WAAW,YAAY;AACvB;AACA,YAAY,eAAe;AAC3B;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;ACrEY;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,YAAY,eAAe;AAC3B;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;AChEY;AACb,wBAAwB,mBAAO,CAAC,0CAA+B;AAC/D,yBAAyB,mBAAO,CAAC,2CAAgC;AACjE,wBAAwB,mBAAO,CAAC,0CAA+B;AAC/D,eAAe,mBAAO,CAAC,iCAAsB;AAC7C,oBAAoB,mBAAO,CAAC,gCAAqB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,WAAW,iBAAiB,kBAAkB;AACzD;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;;;;;;;;;;;AC9CJ;AACb,8BAA8B,mBAAO,CAAC,gDAAqC;AAC3E;AACA;AACA;AACA;AACA;AACA,WAAW,WAAW;AACtB,YAAY,eAAe;AAC3B;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;AC7BY;AACb,kBAAkB,mBAAO,CAAC,wBAAa;AACvC,iBAAiB,mBAAO,CAAC,6BAAkB;AAC3C;AACA;AACA;AACA,iBAAiB;;;;;;;;;;;;ACNJ;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,wBAAwB,mBAAO,CAAC,+BAAoB;AACpD,0BAA0B,mBAAO,CAAC,sCAA2B;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,aAAa;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,qDAAqD;AAChE;AACA;AACA,WAAW,qFAAqF;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;AC5IY;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,wBAAwB,mBAAO,CAAC,+BAAoB;AACpD,0BAA0B,mBAAO,CAAC,sCAA2B;AAC7D;AACA;AACA;AACA,eAAe,cAAc;AAC7B;AACA,qCAAqC,gBAAgB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,iBAAiB;AAC5B;AACA,WAAW,qFAAqF;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;AC3HY;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C,gCAAgC,mBAAO,CAAC,4CAAiC;AACzE,wBAAwB,mBAAO,CAAC,0CAA+B;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,YAAY,yBAAyB;AACrC;AACA;AACA,WAAW,QAAQ;AACnB,YAAY,eAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;ACzFY;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C,gCAAgC,mBAAO,CAAC,4CAAiC;AACzE,wBAAwB,mBAAO,CAAC,0CAA+B;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,YAAY,yBAAyB;AACrC;AACA;AACA,WAAW,QAAQ;AACnB;AACA,YAAY,eAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,WAAW;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;AC3GY;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,wBAAwB,mBAAO,CAAC,+BAAoB;AACpD,0BAA0B,mBAAO,CAAC,sCAA2B;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,YAAY;AACvB;AACA;AACA,YAAY,eAAe;AAC3B;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;ACzEY;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,4CAA4C;AACvD;AACA;AACA,YAAY,eAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;AC1FY;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT;AACA,WAAW,mBAAmB;AAC9B;AACA,WAAW,UAAU;AACrB,WAAW,UAAU;AACrB,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;AC/GY;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,wBAAwB,mBAAO,CAAC,+BAAoB;AACpD,0BAA0B,mBAAO,CAAC,sCAA2B;AAC7D,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,mBAAmB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,2CAA2C;AACtD;AACA;AACA,WAAW,QAAQ;AACnB,SAAS,gCAAgC;AACzC,YAAY,eAAe;AAC3B;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,+BAA+B;AAC/B;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;AC5IY;;AACb,IAAIxC,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA4B,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AACxD,OAAK,IAAIC,CAAT,IAAcD,CAAd,EAAiB,IAAIA,CAAC,CAACE,cAAF,CAAiBD,CAAjB,CAAJ,EAAyBF,CAAC,CAACE,CAAD,CAAD,GAAOD,CAAC,CAACC,CAAD,CAAR;;AAC1C,WAASE,EAAT,GAAc;AAAE,SAAKC,WAAL,GAAmBL,CAAnB;AAAuB;;AACvCA,E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pB;AAA4B;;AACxD,SAAO2D,KAAK,CAACoB,GAAN,CAAU,UAAUhJ,KAAV,EAAiB;AAAE,WAAO,IAAI4C,SAAJ,CAAc5C,KAAd,EAAqBqF,SAAS,CAACmC,GAAV,EAArB,CAAP;AAA+C,GAA5E,CAAP,CAF0B,CAG1B;AACH;;AACD5G,iBAAA,GAAoB4N,SAApB;;AACA,IAAI5L,SAAS,GAAI,YAAY;AACzB,WAASA,SAAT,CAAmB5C,KAAnB,EAA0BwO,SAA1B,EAAqC;AACjC,SAAKxO,KAAL,GAAaA,KAAb;AACA,SAAKwO,SAAL,GAAiBA,SAAjB;AACH;;AACD,SAAO5L,SAAP;AACH,CANgB,EAAjB;;AAOAhC,iBAAA,GAAoBgC,SAApB;AACA;;;;;;;;;;;ACvBa;AACb,eAAe,mBAAO,CAAC,mBAAU;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;;;;;;;;;;;;ACZF;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,gBAAgB,mBAAO,CAAC,uBAAY;AACpC,wBAAwB,mBAAO,CAAC,+BAAoB;AACpD,0BAA0B,mBAAO,CAAC,sCAA2B;AAC7D;AACA;AACA;AACA;AACA,qCAAqC,aAAa;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,iBAAiB;AAC5B;AACA,YAAY,2BAA2B;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;AC9GY;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C,gBAAgB,mBAAO,CAAC,uBAAY;AACpC;AACA;AACA;AACA;AACA,qCAAqC,kBAAkB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,QAAQ;AACnB;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA,YAAY,2BAA2B;AACvC;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,yBAAyB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;ACnIY;;AACb,IAAIyB,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA4B,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AACxD,OAAK,IAAIC,CAAT,IAAcD,CAAd,EAAiB,IAAIA,CAAC,CAACE,cAAF,CAAiBD,CAAjB,CAAJ,EAAyBF,CAAC,CAACE,CAAD,CAAD,GAAOD,CAAC,CAACC,CAAD,CAAR;;AAC1C,WAASE,EAAT,GAAc;AAAE,SAAKC,WAAL,GAAmBL,CAAnB;AAAu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ACA,WAAW,eAAe;AAC1B;AACA,WAAW,gCAAgC;AAC3C;AACA;AACA;AACA,YAAY,2BAA2B;AACvC;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,SAAS;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;AClLY;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,gBAAgB,mBAAO,CAAC,uBAAY;AACpC,iBAAiB,mBAAO,CAAC,6BAAkB;AAC3C,oBAAoB,mBAAO,CAAC,gCAAqB;AACjD,wBAAwB,mBAAO,CAAC,+BAAoB;AACpD,0BAA0B,mBAAO,CAAC,sCAA2B;AAC7D;AACA;AACA;AACA;AACA;AACA,qCAAqC,iBAAiB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,wBAAwB;AACnC;AACA;AACA,YAAY,2BAA2B;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;AC/HY;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,wBAAwB,mBAAO,CAAC,+BAAoB;AACpD,0BAA0B,mBAAO,CAAC,sCAA2B;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,WAAW,iBAAiB;AAC5B;AACA,WAAW,UAAU;AACrB;AACA;AACA;AACA;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;AClIY;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,wBAAwB,mBAAO,CAAC,0CAA+B;AAC/D,gBAAgB,mBAAO,CAAC,4BAAiB;AACzC,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C,wBAAwB,mBAAO,CAAC,+BAAoB;AACpD,0BAA0B,mBAAO,CAAC,sCAA2B;AAC7D,iBAAiB,mBAAO,CAAC,+BAAoB;AAC7C;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,kBAAkB;AAChF;AACA;AACA;AACA,QAAQ;AACR,QAAQ;AACR,QAAQ;AACR;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,mBAAmB;AACnB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,+BAA+B,IAAI;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;ACvRY;AACb,YAAY,mBAAO,CAAC,kBAAO;AAC3B;AACA,+BAA+B;AAC/B;AACA,cAAc;;;;;;;;;;;;ACLD;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,qBAAqB,mBAAO,CAAC,2BAAiB;AAC9C;AACA,uCAAuC,gBAAgB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB;AACA,eAAe,QAAQ;AACvB;AACA,gBAAgB;AAChB;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA,CAAC;AACD,cAAc;;;;;;;;;;;;AC1CD;;AACb,IAAIjR,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA4B,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AACxD,OAAK,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AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,qBAAqB;;;;;;;;;;;;AC/GR;;AACb,IAAIC,sBAAsB,GAAGpa,mBAAO,CAAC,mCAAD,CAApC;;AACA,IAAIqa,yBAAyB,GAAGra,mBAAO,CAAC,sCAAD,CAAvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAiD,sBAAA,GAAyB,IAAIoX,yBAAyB,CAACC,uBAA9B,CAAsDF,sBAAsB,CAAC7B,oBAA7E,CAAzB;;;;;;;;;;;ACjCa;;AACb,IAAIgC,YAAY,GAAGva,mBAAO,CAAC,wBAAD,CAA1B;;AACA,IAAIwa,eAAe,GAAGxa,mBAAO,CAAC,4BAAD,CAA7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAiD,YAAA,GAAe,IAAIuX,eAAe,CAACC,aAApB,CAAkCF,YAAY,CAAClB,UAA/C,CAAf;;;;;;;;;;;ACrCa;;AACb,IAAIhB,aAAa,GAAGrY,mBAAO,CAAC,0BAAD,CAA3B;;AACA,IAAI0a,gBAAgB,GAAG1a,mBAAO,CAAC,6BAAD,CAA9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAiD,aAAA,GAAgB,IAAIyX,gBAAgB,CAACR,cAArB,CAAoC7B,aAAa,CAACc,WAAlD,CAAhB;;;;;;;;;;;AC7Ca;;AACb,IAAIwB,aAAa,GAAG3a,mBAAO,CAAC,0BAAD,CAA3B;;AACA,IAAI4a,gBAAgB,GAAG5a,mBAAO,CAAC,6BAAD,CAA9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAiD,aAAA,GAAgB,IAAI2X,gBAAgB,CAACC,cAArB,CAAoCF,aAAa,CAACR,WAAlD,CAAhB;;;;;;;;;;;AChEa;AACb,aAAa,mBAAO,CAAC,yBAAc;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,iBAAiB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;;;;;;;;;;;;ACpCL;AACb,aAAa,mBAAO,CAAC,yBAAc;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,kBAAkB;AAClB;AACA;AACA;AACA,oBAAoB;;;;;;;;;;;;ACxBP;AACb,aAAa,mBAAO,CAAC,yBAAc;AACnC;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,sBAAsB;;;;;;;;;;;;ACRT;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C,qBAAqB,mBAAO,CAAC,2BAAiB;AAC9C,6BAA6B,mBAAO,CAAC,mCAAwB;AAC7D,oBAAoB,mBAAO,CAAC,gCAAqB;AACjD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,oBAAoB;AAC5C;AACA;AACA;AACA;AACA,aAAa,mBAAmB,0CAA0C;AAC1E;AACA;AACA;AACA,CAAC;AACD,sBAAsB;AACtB;;;;;;;;;;;;AC5Ca;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,gBAAgB,mBAAO,CAAC,uBAAY;AACpC,qBAAqB,mBAAO,CAAC,2BAAiB;AAC9C,6BAA6B,mBAAO,CAAC,mCAAwB;AAC7D,oBAAoB,mBAAO,CAAC,gCAAqB;AACjD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,oBAAoB;AAC5C;AACA;AACA;AACA,yDAAyD,wCAAwC;AACjG,aAAa;AACb;AACA;AACA;AACA,CAAC;AACD,qBAAqB;AACrB;;;;;;;;;;;;AC9Ca;AACb;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA,CAAC;AACD,uBAAuB;;;;;;;;;;;;ACTV;AACb,wBAAwB,mBAAO,CAAC,8BAAmB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,4BAA4B;;;;;;;;;;;;ACjBf;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C,qBAAqB,mBAAO,CAAC,4BAAiB;AAC9C,uBAAuB,mBAAO,CAAC,6BAAkB;AACjD,sBAAsB,mBAAO,CAAC,4BAAiB;AAC/C,wBAAwB,mBAAO,CAAC,8BAAmB;AACnD,6BAA6B,mBAAO,CAAC,8CAAmC;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,8FAA8F;AAC1H,SAAS;AACT,4BAA4B,6FAA6F;AACzH,SAAS;AACT,4BAA4B,6FAA6F;AACzH,SAAS;AACT;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,iFAAiF;AAC/G,aAAa;AACb,8BAA8B,gFAAgF;AAC9G,aAAa;AACb,8BAA8B,gFAAgF;AAC9G,aAAa;AACb,SAAS;AACT;AACA,wCAAwC,oCAAoC;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,oBAAoB;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,yEAAyE;AAC7G;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,qBAAqB;;;;;;;;;;;;AC7NR;AACb,aAAa,mBAAO,CAAC,mBAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA,CAAC;AACD,uCAAuC;AACvC,sBAAsB;;;;;;;;;;;;AChCT;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,+BAA+B;;;;;;;;;;;;AC1BlB;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,kBAAkB;;;;;;;;;;;;AC1BL;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,eAAe;;;;;;;;;;;;AC7Bf;AACA;AACA;AACa;;AACb,IAAIpa,MAAM,GAAGC,mBAAO,CAAC,mBAAD,CAApB;;AACA,IAAI8a,mBAAmB,GAAI,YAAY;AACnC,WAASA,mBAAT,CAA6BjZ,IAA7B,EAAmC;AAC/B,SAAKA,IAAL,GAAYA,IAAZ;;AACA,QAAIA,IAAI,CAAC0X,YAAL,IAAqB,OAAO1X,IAAI,CAAC0X,YAAZ,KAA6B,UAAtD,EAAkE;AAC9D,WAAKA,YAAL,GAAoB1X,IAAI,CAAC0X,YAAL,CAAkBP,IAAlB,CAAuBnX,IAAvB,CAApB;AACA,WAAK2X,cAAL,GAAsB3X,IAAI,CAAC2X,cAAL,CA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;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,+BAA+B;;;;;;;;;;;;ACzBlB;AACb,aAAa,mBAAO,CAAC,mBAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,sBAAsB;AACtB,WAAW;;;;;;;;;;;;AC/BE;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,oBAAoB;;;;;;;;;;;;ACvBP;AACb;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2GAA2G,2CAA2C;AACtJ;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,2BAA2B;;;;;;;;;;;;ACvBd;AACb;AACA,4CAA4C,SAAS;AACrD;AACA;AACA,oDAAoD,UAAU;AAC9D;AACA;AACA;AACA;AACA;AACA,mBAAmB;;;;;;;;;;;;ACXN;AACb,aAAa,mBAAO,CAAC,mBAAQ;AAC7B;AACA;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA,oBAAoB,SAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,iBAAiB;AACjB,cAAc;;;;;;;;;;;;ACxBD;AACb;AACA,mBAAmB,KAAK;;;;;;;;;;;;ACFX;AACb;AACA;AACA;AACA,gBAAgB;;;;;;;;;;;;ACJH;AACb,eAAe,oCAAoC,2CAA2C;;;;;;;;;;;;ACDjF;AACb,mBAAmB,mBAAmB,2CAA2C;;;;;;;;;;;;ACDpE;AACb;AACA;AACA;AACA,cAAc;;;;;;;;;;;;ACJD;AACb;AACA;AACA;AACA,kBAAkB;;;;;;;;;;;;ACJL;AACb,gBAAgB,mBAAO,CAAC,4BAAiB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;;;;;;;;;;;ACVa;AACb;AACA;AACA;AACA,gBAAgB;;;;;;;;;;;;ACJH;AACb;AACA;AACA;AACA,iBAAiB;;;;;;;;;;;;ACJJ;AACb;AACA;AACA;AACA,mBAAmB;;;;;;;;;;;;ACJN;AACb;AACA;AACA,YAAY;;;;;;;;;;;;ACHC;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;;;;;;;;;;;;ACTE;AACb,aAAa,mBAAO,CAAC,mBAAQ;AAC7B;AACA;AACA;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,kBAAkB;AAClE;AACA;AACA,qBAAqB;;;;;;;;;;;;ACvBR;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;ACjBY;AACb,aAAa,mBAAO,CAAC,mBAAQ;AAC7B,oBAAoB,mBAAO,CAAC,0BAAe;AAC3C,kBAAkB,mBAAO,CAAC,wBAAa;AACvC,iBAAiB,mBAAO,CAAC,uBAAY;AACrC,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C,iBAAiB,mBAAO,CAAC,+BAAoB;AAC7C,wBAAwB,mBAAO,CAAC,+BAAoB;AACpD,mBAAmB,mBAAO,CAAC,iCAAsB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,gCAAgC;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,mBAAmB,gCAAgC;AAC5D;AACA;AACA,iDAAiD,YAAY;AAC7D,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;;;;;;;;;;;;AC7EZ;AACb,mBAAmB,mBAAO,CAAC,0BAAe;AAC1C,qBAAqB,mBAAO,CAAC,mCAAwB;AACrD,iBAAiB,mBAAO,CAAC,wBAAa;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;;;;;;;;;;;;AClBP;AACb,oBAAoB,mBAAO,CAAC,0BAAe;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB","sources":["./node_modules/detect-passive-events/lib/index.js","./node_modules/ng5-slider/__ivy_ngcc__/esm2015/ng5-slider.js","./node_modules/ng5-slider/node_modules/rxjs/AsyncSubject.js","./node_modules/ng5-slider/node_modules/rxjs/BehaviorSubject.js","./node_modules/ng5-slider/node_modules/rxjs/InnerSubscriber.js","./node_modules/ng5-slider/node_modules/rxjs/Notification.js","./node_modules/ng5-slider/node_modules/rxjs/Observable.js","./node_modules/ng5-slider/node_modules/rxjs/Observer.js","./node_modules/ng5-slider/node_modules/rxjs/OuterSubscriber.js","./node_modules/ng5-slider/node_modules/rxjs/ReplaySubject.js","./node_modules/ng5-slider/node_modules/rxjs/Rx.js","./node_modules/ng5-slider/node_modules/rxjs/Scheduler.js","./node_modules/ng5-slider/node_modules/rxjs/Subject.js","./node_modules/ng5-slider/node_modules/rxjs/SubjectSubscription.js","./node_modules/ng5-slider/node_modules/rxjs/Subscriber.js","./node_modules/ng5-slider/node_modules/rxjs/Subscription.js","./node_modules/ng5-slider/node_modules/rxjs/add/observable/bindCallback.js","./node_modules/ng5-slider/node_modules/rxjs/add/observable/bindNodeCallback.js","./node_modules/ng5-slider/node_modules/rxjs/add/observable/combineLatest.js","./node_modules/ng5-slider/node_modules/rxjs/add/observable/concat.js","./node_modules/ng5-slider/node_modules/rxjs/add/observable/defer.js","./node_modules/ng5-slider/node_modules/rxjs/add/observable/dom/ajax.js","./node_modules/ng5-slider/node_modules/rxjs/add/observable/dom/webSocket.js","./node_modules/ng5-slider/node_modules/rxjs/add/observable/empty.js","./node_modules/ng5-slider/node_modules/rxjs/add/observable/forkJoin.js","./node_modules/ng5-slider/node_modules/rxjs/add/observable/from.js","./node_modules/ng5-slider/node_modules/rxjs/add/observable/fromEvent.js","./node_modules/ng5-slider/node_modules/rxjs/add/observable/fromEventPattern.js","./node_modules/ng5-slider/node_modules/rxjs/add/observable/fromPromise.js","./node_modules/ng5-slider/node_modules/rxjs/add/observable/generate.js","./node_modules/ng5-slider/node_modules/rxjs/add/observable/if.js","./node_modules/ng5-slider/node_modules/rxjs/add/observable/interval.js","./node_modules/ng5-slider/node_modules/rxjs/add/observable/merge.js","./node_modules/ng5-slider/node_modules/rxjs/add/observable/never.js","./node_modules/ng5-slider/node_modules/rxjs/add/observable/of.js","./node_modules/ng5-slider/node_modules/rxjs/add/observable/onErrorResumeNext.js","./node_modules/ng5-slider/node_modules/rxjs/add/observable/pairs.js","./node_modules/ng5-slider/node_modules/rxjs/add/observable/race.js","./node_modules/ng5-slider/node_modules/rxjs/add/observable/range.js","./node_modules/ng5-slider/node_modules/rxjs/add/observable/throw.js","./node_modules/ng5-slider/node_modules/rxjs/add/observable/timer.js","./node_modules/ng5-slider/node_modules/rxjs/add/observable/using.js","./node_modules/ng5-slider/node_modules/rxjs/add/observable/zip.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/audit.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/auditTime.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/buffer.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/bufferCount.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/bufferTime.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/bufferToggle.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/bufferWhen.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/catch.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/combineAll.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/combineLatest.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/concat.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/concatAll.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/concatMap.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/concatMapTo.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/count.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/debounce.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/debounceTime.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/defaultIfEmpty.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/delay.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/delayWhen.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/dematerialize.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/distinct.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/distinctUntilChanged.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/distinctUntilKeyChanged.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/do.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/elementAt.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/every.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/exhaust.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/exhaustMap.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/expand.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/filter.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/finally.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/find.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/findIndex.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/first.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/groupBy.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/ignoreElements.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/isEmpty.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/last.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/let.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/map.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/mapTo.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/materialize.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/max.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/merge.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/mergeAll.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/mergeMap.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/mergeMapTo.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/mergeScan.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/min.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/multicast.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/observeOn.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/onErrorResumeNext.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/pairwise.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/partition.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/pluck.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/publish.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/publishBehavior.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/publishLast.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/publishReplay.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/race.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/reduce.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/repeat.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/repeatWhen.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/retry.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/retryWhen.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/sample.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/sampleTime.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/scan.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/sequenceEqual.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/share.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/shareReplay.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/single.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/skip.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/skipLast.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/skipUntil.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/skipWhile.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/startWith.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/subscribeOn.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/switch.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/switchMap.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/switchMapTo.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/take.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/takeLast.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/takeUntil.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/takeWhile.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/throttle.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/throttleTime.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/timeInterval.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/timeout.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/timeoutWith.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/timestamp.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/toArray.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/toPromise.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/window.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/windowCount.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/windowTime.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/windowToggle.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/windowWhen.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/withLatestFrom.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/zip.js","./node_modules/ng5-slider/node_modules/rxjs/add/operator/zipAll.js","./node_modules/ng5-slider/node_modules/rxjs/observable/ArrayLikeObservable.js","./node_modules/ng5-slider/node_modules/rxjs/observable/ArrayObservable.js","./node_modules/ng5-slider/node_modules/rxjs/observable/BoundCallbackObservable.js","./node_modules/ng5-slider/node_modules/rxjs/observable/BoundNodeCallbackObservable.js","./node_modules/ng5-slider/node_modules/rxjs/observable/ConnectableObservable.js","./node_modules/ng5-slider/node_modules/rxjs/observable/DeferObservable.js","./node_modules/ng5-slider/node_modules/rxjs/observable/EmptyObservable.js","./node_modules/ng5-slider/node_modules/rxjs/observable/ErrorObservable.js","./node_modules/ng5-slider/node_modules/rxjs/observable/ForkJoinObservable.js","./node_modules/ng5-slider/node_modules/rxjs/observable/FromEventObservable.js","./node_modules/ng5-slider/node_modules/rxjs/observable/FromEventPatternObservable.js","./node_modules/ng5-slider/node_modules/rxjs/observable/FromObservable.js","./node_modules/ng5-slider/node_modules/rxjs/observable/GenerateObservable.js","./node_modules/ng5-slider/node_modules/rxjs/observable/IfObservable.js","./node_modules/ng5-slider/node_modules/rxjs/observable/IntervalObservable.js","./node_modules/ng5-slider/node_modules/rxjs/observable/IteratorObservable.js","./node_modules/ng5-slider/node_modules/rxjs/observable/NeverObservable.js","./node_modules/ng5-slider/node_modules/rxjs/observable/PairsObservable.js","./node_modules/ng5-slider/node_modules/rxjs/observable/PromiseObservable.js","./node_modules/ng5-slider/node_modules/rxjs/observable/RangeObservable.js","./node_modules/ng5-slider/node_modules/rxjs/observable/ScalarObservable.js","./node_modules/ng5-slider/node_modules/rxjs/observable/SubscribeOnObservable.js","./node_modules/ng5-slider/node_modules/rxjs/observable/TimerObservable.js","./node_modules/ng5-slider/node_modules/rxjs/observable/UsingObservable.js","./node_modules/ng5-slider/node_modules/rxjs/observable/bindCallback.js","./node_modules/ng5-slider/node_modules/rxjs/observable/bindNodeCallback.js","./node_modules/ng5-slider/node_modules/rxjs/observable/combineLatest.js","./node_modules/ng5-slider/node_modules/rxjs/observable/concat.js","./node_modules/ng5-slider/node_modules/rxjs/observable/defer.js","./node_modules/ng5-slider/node_modules/rxjs/observable/dom/AjaxObservable.js","./node_modules/ng5-slider/node_modules/rxjs/observable/dom/WebSocketSubject.js","./node_modules/ng5-slider/node_modules/rxjs/observable/dom/ajax.js","./node_modules/ng5-slider/node_modules/rxjs/observable/dom/webSocket.js","./node_modules/ng5-slider/node_modules/rxjs/observable/empty.js","./node_modules/ng5-slider/node_modules/rxjs/observable/forkJoin.js","./node_modules/ng5-slider/node_modules/rxjs/observable/from.js","./node_modules/ng5-slider/node_modules/rxjs/observable/fromEvent.js","./node_modules/ng5-slider/node_modules/rxjs/observable/fromEventPattern.js","./node_modules/ng5-slider/node_modules/rxjs/observable/fromPromise.js","./node_modules/ng5-slider/node_modules/rxjs/observable/generate.js","./node_modules/ng5-slider/node_modules/rxjs/observable/if.js","./node_modules/ng5-slider/node_modules/rxjs/observable/interval.js","./node_modules/ng5-slider/node_modules/rxjs/observable/merge.js","./node_modules/ng5-slider/node_modules/rxjs/observable/never.js","./node_modules/ng5-slider/node_modules/rxjs/observable/of.js","./node_modules/ng5-slider/node_modules/rxjs/observable/onErrorResumeNext.js","./node_modules/ng5-slider/node_modules/rxjs/observable/pairs.js","./node_modules/ng5-slider/node_modules/rxjs/observable/race.js","./node_modules/ng5-slider/node_modules/rxjs/observable/range.js","./node_modules/ng5-slider/node_modules/rxjs/observable/throw.js","./node_modules/ng5-slider/node_modules/rxjs/observable/timer.js","./node_modules/ng5-slider/node_modules/rxjs/observable/using.js","./node_modules/ng5-slider/node_modules/rxjs/observable/zip.js","./node_modules/ng5-slider/node_modules/rxjs/operator/audit.js","./node_modules/ng5-slider/node_modules/rxjs/operator/auditTime.js","./node_modules/ng5-slider/node_modules/rxjs/operator/buffer.js","./node_modules/ng5-slider/node_modules/rxjs/operator/bufferCount.js","./node_modules/ng5-slider/node_modules/rxjs/operator/bufferTime.js","./node_modules/ng5-slider/node_modules/rxjs/operator/bufferToggle.js","./node_modules/ng5-slider/node_modules/rxjs/operator/bufferWhen.js","./node_modules/ng5-slider/node_modules/rxjs/operator/catch.js","./node_modules/ng5-slider/node_modules/rxjs/operator/combineAll.js","./node_modules/ng5-slider/node_modules/rxjs/operator/combineLatest.js","./node_modules/ng5-slider/node_modules/rxjs/operator/concat.js","./node_modules/ng5-slider/node_modules/rxjs/operator/concatAll.js","./node_modules/ng5-slider/node_modules/rxjs/operator/concatMap.js","./node_modules/ng5-slider/node_modules/rxjs/operator/concatMapTo.js","./node_modules/ng5-slider/node_modules/rxjs/operator/count.js","./node_modules/ng5-slider/node_modules/rxjs/operator/debounce.js","./node_modules/ng5-slider/node_modules/rxjs/operator/debounceTime.js","./node_modules/ng5-slider/node_modules/rxjs/operator/defaultIfEmpty.js","./node_modules/ng5-slider/node_modules/rxjs/operator/delay.js","./node_modules/ng5-slider/node_modules/rxjs/operator/delayWhen.js","./node_modules/ng5-slider/node_modules/rxjs/operator/dematerialize.js","./node_modules/ng5-slider/node_modules/rxjs/operator/distinct.js","./node_modules/ng5-slider/node_modules/rxjs/operator/distinctUntilChanged.js","./node_modules/ng5-slider/node_modules/rxjs/operator/distinctUntilKeyChanged.js","./node_modules/ng5-slider/node_modules/rxjs/operator/do.js","./node_modules/ng5-slider/node_modules/rxjs/operator/elementAt.js","./node_modules/ng5-slider/node_modules/rxjs/operator/every.js","./node_modules/ng5-slider/node_modules/rxjs/operator/exhaust.js","./node_modules/ng5-slider/node_modules/rxjs/operator/exhaustMap.js","./node_modules/ng5-slider/node_modules/rxjs/operator/expand.js","./node_modules/ng5-slider/node_modules/rxjs/operator/filter.js","./node_modules/ng5-slider/node_modules/rxjs/operator/finally.js","./node_modules/ng5-slider/node_modules/rxjs/operator/find.js","./node_modules/ng5-slider/node_modules/rxjs/operator/findIndex.js","./node_modules/ng5-slider/node_modules/rxjs/operator/first.js","./node_modules/ng5-slider/node_modules/rxjs/operator/groupBy.js","./node_modules/ng5-slider/node_modules/rxjs/operator/ignoreElements.js","./node_modules/ng5-slider/node_modules/rxjs/operator/isEmpty.js","./node_modules/ng5-slider/node_modules/rxjs/operator/last.js","./node_modules/ng5-slider/node_modules/rxjs/operator/let.js","./node_modules/ng5-slider/node_modules/rxjs/operator/map.js","./node_modules/ng5-slider/node_modules/rxjs/operator/mapTo.js","./node_modules/ng5-slider/node_modules/rxjs/operator/materialize.js","./node_modules/ng5-slider/node_modules/rxjs/operator/max.js","./node_modules/ng5-slider/node_modules/rxjs/operator/merge.js","./node_modules/ng5-slider/node_modules/rxjs/operator/mergeAll.js","./node_modules/ng5-slider/node_modules/rxjs/operator/mergeMap.js","./node_modules/ng5-slider/node_modules/rxjs/operator/mergeMapTo.js","./node_modules/ng5-slider/node_modules/rxjs/operator/mergeScan.js","./node_modules/ng5-slider/node_modules/rxjs/operator/min.js","./node_modules/ng5-slider/node_modules/rxjs/operator/multicast.js","./node_modules/ng5-slider/node_modules/rxjs/operator/observeOn.js","./node_modules/ng5-slider/node_modules/rxjs/operator/onErrorResumeNext.js","./node_modules/ng5-slider/node_modules/rxjs/operator/pairwise.js","./node_modules/ng5-slider/node_modules/rxjs/operator/partition.js","./node_modules/ng5-slider/node_modules/rxjs/operator/pluck.js","./node_modules/ng5-slider/node_modules/rxjs/operator/publish.js","./node_modules/ng5-slider/node_modules/rxjs/operator/publishBehavior.js","./node_modules/ng5-slider/node_modules/rxjs/operator/publishLast.js","./node_modules/ng5-slider/node_modules/rxjs/operator/publishReplay.js","./node_modules/ng5-slider/node_modules/rxjs/operator/race.js","./node_modules/ng5-slider/node_modules/rxjs/operator/reduce.js","./node_modules/ng5-slider/node_modules/rxjs/operator/repeat.js","./node_modules/ng5-slider/node_modules/rxjs/operator/repeatWhen.js","./node_modules/ng5-slider/node_modules/rxjs/operator/retry.js","./node_modules/ng5-slider/node_modules/rxjs/operator/retryWhen.js","./node_modules/ng5-slider/node_modules/rxjs/operator/sample.js","./node_modules/ng5-slider/node_modules/rxjs/operator/sampleTime.js","./node_modules/ng5-slider/node_modules/rxjs/operator/scan.js","./node_modules/ng5-slider/node_modules/rxjs/operator/sequenceEqual.js","./node_modules/ng5-slider/node_modules/rxjs/operator/share.js","./node_modules/ng5-slider/node_modules/rxjs/operator/shareReplay.js","./node_modules/ng5-slider/node_modules/rxjs/operator/single.js","./node_modules/ng5-slider/node_modules/rxjs/operator/skip.js","./node_modules/ng5-slider/node_modules/rxjs/operator/skipLast.js","./node_modules/ng5-slider/node_modules/rxjs/operator/skipUntil.js","./node_modules/ng5-slider/node_modules/rxjs/operator/skipWhile.js","./node_modules/ng5-slider/node_modules/rxjs/operator/startWith.js","./node_modules/ng5-slider/node_modules/rxjs/operator/subscribeOn.js","./node_modules/ng5-slider/node_modules/rxjs/operator/switch.js","./node_modules/ng5-slider/node_modules/rxjs/operator/switchMap.js","./node_modules/ng5-slider/node_modules/rxjs/operator/switchMapTo.js","./node_modules/ng5-slider/node_modules/rxjs/operator/take.js","./node_modules/ng5-slider/node_modules/rxjs/operator/takeLast.js","./node_modules/ng5-slider/node_modules/rxjs/operator/takeUntil.js","./node_modules/ng5-slider/node_modules/rxjs/operator/takeWhile.js","./node_modules/ng5-slider/node_modules/rxjs/operator/throttle.js","./node_modules/ng5-slider/node_modules/rxjs/operator/throttleTime.js","./node_modules/ng5-slider/node_modules/rxjs/operator/timeInterval.js","./node_modules/ng5-slider/node_modules/rxjs/operator/timeout.js","./node_modules/ng5-slider/node_modules/rxjs/operator/timeoutWith.js","./node_modules/ng5-slider/node_modules/rxjs/operator/timestamp.js","./node_modules/ng5-slider/node_modules/rxjs/operator/toArray.js","./node_modules/ng5-slider/node_modules/rxjs/operator/window.js","./node_modules/ng5-slider/node_modules/rxjs/operator/windowCount.js","./node_modules/ng5-slider/node_modules/rxjs/operator/windowTime.js","./node_modules/ng5-slider/node_modules/rxjs/operator/windowToggle.js","./node_modules/ng5-slider/node_modules/rxjs/operator/windowWhen.js","./node_modules/ng5-slider/node_modules/rxjs/operator/withLatestFrom.js","./node_modules/ng5-slider/node_modules/rxjs/operator/zip.js","./node_modules/ng5-slider/node_modules/rxjs/operator/zipAll.js","./node_modules/ng5-slider/node_modules/rxjs/operators.js","./node_modules/ng5-slider/node_modules/rxjs/operators/audit.js","./node_modules/ng5-slider/node_modules/rxjs/operators/auditTime.js","./node_modules/ng5-slider/node_modules/rxjs/operators/buffer.js","./node_modules/ng5-slider/node_modules/rxjs/operators/bufferCount.js","./node_modules/ng5-slider/node_modules/rxjs/operators/bufferTime.js","./node_modules/ng5-slider/node_modules/rxjs/operators/bufferToggle.js","./node_modules/ng5-slider/node_modules/rxjs/operators/bufferWhen.js","./node_modules/ng5-slider/node_modules/rxjs/operators/catchError.js","./node_modules/ng5-slider/node_modules/rxjs/operators/combineAll.js","./node_modules/ng5-slider/node_modules/rxjs/operators/combineLatest.js","./node_modules/ng5-slider/node_modules/rxjs/operators/concat.js","./node_modules/ng5-slider/node_modules/rxjs/operators/concatAll.js","./node_modules/ng5-slider/node_modules/rxjs/operators/concatMap.js","./node_modules/ng5-slider/node_modules/rxjs/operators/concatMapTo.js","./node_modules/ng5-slider/node_modules/rxjs/operators/count.js","./node_modules/ng5-slider/node_modules/rxjs/operators/debounce.js","./node_modules/ng5-slider/node_modules/rxjs/operators/debounceTime.js","./node_modules/ng5-slider/node_modules/rxjs/operators/defaultIfEmpty.js","./node_modules/ng5-slider/node_modules/rxjs/operators/delay.js","./node_modules/ng5-slider/node_modules/rxjs/operators/delayWhen.js","./node_modules/ng5-slider/node_modules/rxjs/operators/dematerialize.js","./node_modules/ng5-slider/node_modules/rxjs/operators/distinct.js","./node_modules/ng5-slider/node_modules/rxjs/operators/distinctUntilChanged.js","./node_modules/ng5-slider/node_modules/rxjs/operators/distinctUntilKeyChanged.js","./node_modules/ng5-slider/node_modules/rxjs/operators/elementAt.js","./node_modules/ng5-slider/node_modules/rxjs/operators/every.js","./node_modules/ng5-slider/node_modules/rxjs/operators/exhaust.js","./node_modules/ng5-slider/node_modules/rxjs/operators/exhaustMap.js","./node_modules/ng5-slider/node_modules/rxjs/operators/expand.js","./node_modules/ng5-slider/node_modules/rxjs/operators/filter.js","./node_modules/ng5-slider/node_modules/rxjs/operators/finalize.js","./node_modules/ng5-slider/node_modules/rxjs/operators/find.js","./node_modules/ng5-slider/node_modules/rxjs/operators/findIndex.js","./node_modules/ng5-slider/node_modules/rxjs/operators/first.js","./node_modules/ng5-slider/node_modules/rxjs/operators/groupBy.js","./node_modules/ng5-slider/node_modules/rxjs/operators/ignoreElements.js","./node_modules/ng5-slider/node_modules/rxjs/operators/isEmpty.js","./node_modules/ng5-slider/node_modules/rxjs/operators/last.js","./node_modules/ng5-slider/node_modules/rxjs/operators/map.js","./node_modules/ng5-slider/node_modules/rxjs/operators/mapTo.js","./node_modules/ng5-slider/node_modules/rxjs/operators/materialize.js","./node_modules/ng5-slider/node_modules/rxjs/operators/max.js","./node_modules/ng5-slider/node_modules/rxjs/operators/merge.js","./node_modules/ng5-slider/node_modules/rxjs/operators/mergeAll.js","./node_modules/ng5-slider/node_modules/rxjs/operators/mergeMap.js","./node_modules/ng5-slider/node_modules/rxjs/operators/mergeMapTo.js","./node_modules/ng5-slider/node_modules/rxjs/operators/mergeScan.js","./node_modules/ng5-slider/node_modules/rxjs/operators/min.js","./node_modules/ng5-slider/node_modules/rxjs/operators/multicast.js","./node_modules/ng5-slider/node_modules/rxjs/operators/observeOn.js","./node_modules/ng5-slider/node_modules/rxjs/operators/onErrorResumeNext.js","./node_modules/ng5-slider/node_modules/rxjs/operators/pairwise.js","./node_modules/ng5-slider/node_modules/rxjs/operators/partition.js","./node_modules/ng5-slider/node_modules/rxjs/operators/pluck.js","./node_modules/ng5-slider/node_modules/rxjs/operators/publish.js","./node_modules/ng5-slider/node_modules/rxjs/operators/publishBehavior.js","./node_modules/ng5-slider/node_modules/rxjs/operators/publishLast.js","./node_modules/ng5-slider/node_modules/rxjs/operators/publishReplay.js","./node_modules/ng5-slider/node_modules/rxjs/operators/race.js","./node_modules/ng5-slider/node_modules/rxjs/operators/reduce.js","./node_modules/ng5-slider/node_modules/rxjs/operators/refCount.js","./node_modules/ng5-slider/node_modules/rxjs/operators/repeat.js","./node_modules/ng5-slider/node_modules/rxjs/operators/repeatWhen.js","./node_modules/ng5-slider/node_modules/rxjs/operators/retry.js","./node_modules/ng5-slider/node_modules/rxjs/operators/retryWhen.js","./node_modules/ng5-slider/node_modules/rxjs/operators/sample.js","./node_modules/ng5-slider/node_modules/rxjs/operators/sampleTime.js","./node_modules/ng5-slider/node_modules/rxjs/operators/scan.js","./node_modules/ng5-slider/node_modules/rxjs/operators/sequenceEqual.js","./node_modules/ng5-slider/node_modules/rxjs/operators/share.js","./node_modules/ng5-slider/node_modules/rxjs/operators/shareReplay.js","./node_modules/ng5-slider/node_modules/rxjs/operators/single.js","./node_modules/ng5-slider/node_modules/rxjs/operators/skip.js","./node_modules/ng5-slider/node_modules/rxjs/operators/skipLast.js","./node_modules/ng5-slider/node_modules/rxjs/operators/skipUntil.js","./node_modules/ng5-slider/node_modules/rxjs/operators/skipWhile.js","./node_modules/ng5-slider/node_modules/rxjs/operators/startWith.js","./node_modules/ng5-slider/node_modules/rxjs/operators/subscribeOn.js","./node_modules/ng5-slider/node_modules/rxjs/operators/switchAll.js","./node_modules/ng5-slider/node_modules/rxjs/operators/switchMap.js","./node_modules/ng5-slider/node_modules/rxjs/operators/switchMapTo.js","./node_modules/ng5-slider/node_modules/rxjs/operators/take.js","./node_modules/ng5-slider/node_modules/rxjs/operators/takeLast.js","./node_modules/ng5-slider/node_modules/rxjs/operators/takeUntil.js","./node_modules/ng5-slider/node_modules/rxjs/operators/takeWhile.js","./node_modules/ng5-slider/node_modules/rxjs/operators/tap.js","./node_modules/ng5-slider/node_modules/rxjs/operators/throttle.js","./node_modules/ng5-slider/node_modules/rxjs/operators/throttleTime.js","./node_modules/ng5-slider/node_modules/rxjs/operators/timeInterval.js","./node_modules/ng5-slider/node_modules/rxjs/operators/timeout.js","./node_modules/ng5-slider/node_modules/rxjs/operators/timeoutWith.js","./node_modules/ng5-slider/node_modules/rxjs/operators/timestamp.js","./node_modules/ng5-slider/node_modules/rxjs/operators/toArray.js","./node_modules/ng5-slider/node_modules/rxjs/operators/window.js","./node_modules/ng5-slider/node_modules/rxjs/operators/windowCount.js","./node_modules/ng5-slider/node_modules/rxjs/operators/windowTime.js","./node_modules/ng5-slider/node_modules/rxjs/operators/windowToggle.js","./node_modules/ng5-slider/node_modules/rxjs/operators/windowWhen.js","./node_modules/ng5-slider/node_modules/rxjs/operators/withLatestFrom.js","./node_modules/ng5-slider/node_modules/rxjs/operators/zip.js","./node_modules/ng5-slider/node_modules/rxjs/operators/zipAll.js","./node_modules/ng5-slider/node_modules/rxjs/scheduler/Action.js","./node_modules/ng5-slider/node_modules/rxjs/scheduler/AnimationFrameAction.js","./node_modules/ng5-slider/node_modules/rxjs/scheduler/AnimationFrameScheduler.js","./node_modules/ng5-slider/node_modules/rxjs/scheduler/AsapAction.js","./node_modules/ng5-slider/node_modules/rxjs/scheduler/AsapScheduler.js","./node_modules/ng5-slider/node_modules/rxjs/scheduler/AsyncAction.js","./node_modules/ng5-slider/node_modules/rxjs/scheduler/AsyncScheduler.js","./node_modules/ng5-slider/node_modules/rxjs/scheduler/QueueAction.js","./node_modules/ng5-slider/node_modules/rxjs/scheduler/QueueScheduler.js","./node_modules/ng5-slider/node_modules/rxjs/scheduler/VirtualTimeScheduler.js","./node_modules/ng5-slider/node_modules/rxjs/scheduler/animationFrame.js","./node_modules/ng5-slider/node_modules/rxjs/scheduler/asap.js","./node_modules/ng5-slider/node_modules/rxjs/scheduler/async.js","./node_modules/ng5-slider/node_modules/rxjs/scheduler/queue.js","./node_modules/ng5-slider/node_modules/rxjs/symbol/iterator.js","./node_modules/ng5-slider/node_modules/rxjs/symbol/observable.js","./node_modules/ng5-slider/node_modules/rxjs/symbol/rxSubscriber.js","./node_modules/ng5-slider/node_modules/rxjs/testing/ColdObservable.js","./node_modules/ng5-slider/node_modules/rxjs/testing/HotObservable.js","./node_modules/ng5-slider/node_modules/rxjs/testing/SubscriptionLog.js","./node_modules/ng5-slider/node_modules/rxjs/testing/SubscriptionLoggable.js","./node_modules/ng5-slider/node_modules/rxjs/testing/TestScheduler.js","./node_modules/ng5-slider/node_modules/rxjs/util/AnimationFrame.js","./node_modules/ng5-slider/node_modules/rxjs/util/ArgumentOutOfRangeError.js","./node_modules/ng5-slider/node_modules/rxjs/util/EmptyError.js","./node_modules/ng5-slider/node_modules/rxjs/util/FastMap.js","./node_modules/ng5-slider/node_modules/rxjs/util/Immediate.js","./node_modules/ng5-slider/node_modules/rxjs/util/Map.js","./node_modules/ng5-slider/node_modules/rxjs/util/MapPolyfill.js","./node_modules/ng5-slider/node_modules/rxjs/util/ObjectUnsubscribedError.js","./node_modules/ng5-slider/node_modules/rxjs/util/Set.js","./node_modules/ng5-slider/node_modules/rxjs/util/TimeoutError.js","./node_modules/ng5-slider/node_modules/rxjs/util/UnsubscriptionError.js","./node_modules/ng5-slider/node_modules/rxjs/util/applyMixins.js","./node_modules/ng5-slider/node_modules/rxjs/util/assign.js","./node_modules/ng5-slider/node_modules/rxjs/util/errorObject.js","./node_modules/ng5-slider/node_modules/rxjs/util/identity.js","./node_modules/ng5-slider/node_modules/rxjs/util/isArray.js","./node_modules/ng5-slider/node_modules/rxjs/util/isArrayLike.js","./node_modules/ng5-slider/node_modules/rxjs/util/isDate.js","./node_modules/ng5-slider/node_modules/rxjs/util/isFunction.js","./node_modules/ng5-slider/node_modules/rxjs/util/isNumeric.js","./node_modules/ng5-slider/node_modules/rxjs/util/isObject.js","./node_modules/ng5-slider/node_modules/rxjs/util/isPromise.js","./node_modules/ng5-slider/node_modules/rxjs/util/isScheduler.js","./node_modules/ng5-slider/node_modules/rxjs/util/noop.js","./node_modules/ng5-slider/node_modules/rxjs/util/not.js","./node_modules/ng5-slider/node_modules/rxjs/util/pipe.js","./node_modules/ng5-slider/node_modules/rxjs/util/root.js","./node_modules/ng5-slider/node_modules/rxjs/util/subscribeToResult.js","./node_modules/ng5-slider/node_modules/rxjs/util/toSubscriber.js","./node_modules/ng5-slider/node_modules/rxjs/util/tryCatch.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n// adapted from https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\nvar detectPassiveEvents = {\n  update: function update() {\n    if (typeof window !== 'undefined' && typeof window.addEventListener === 'function') {\n      var passive = false;\n      var options = Object.defineProperty({}, 'passive', {\n        get: function get() {\n          passive = true;\n        }\n      });\n      // note: have to set and remove a no-op listener instead of null\n      // (which was used previously), becasue Edge v15 throws an error\n      // when providing a null callback.\n      // https://github.com/rafgraph/detect-passive-events/pull/3\n      var noop = function noop() {};\n      window.addEventListener('testPassiveEventSupport', noop, options);\n      window.removeEventListener('testPassiveEventSupport', noop, options);\n      detectPassiveEvents.hasSupport = passive;\n    }\n  }\n};\n\ndetectPassiveEvents.update();\nexports.default = detectPassiveEvents;","import { Subject } from 'rxjs';\nimport { Renderer2, Directive, ElementRef, HostBinding, ChangeDetectorRef, Component, ViewChild, HostListener, Input, EventEmitter, Output, ContentChild, forwardRef, NgZone, NgModule } from '@angular/core';\nimport { throttleTime, tap, distinctUntilChanged, filter } from 'rxjs/operators';\nimport detectPassiveEvents from 'detect-passive-events';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @enum {number} */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nconst _c0 = [\"tooltipTemplate\"];\nconst _c1 = [\"leftOuterSelectionBar\"];\nconst _c2 = [\"rightOuterSelectionBar\"];\nconst _c3 = [\"fullBar\"];\nconst _c4 = [\"selectionBar\"];\nconst _c5 = [\"minHandle\"];\nconst _c6 = [\"maxHandle\"];\nconst _c7 = [\"floorLabel\"];\nconst _c8 = [\"ceilLabel\"];\nconst _c9 = [\"minHandleLabel\"];\nconst _c10 = [\"maxHandleLabel\"];\nconst _c11 = [\"combinedLabel\"];\nconst _c12 = [\"ticksElement\"];\nfunction SliderComponent_span_28_ng5_slider_tooltip_wrapper_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"ng5-slider-tooltip-wrapper\", 31);\n} if (rf & 2) {\n    const t_r13 = ɵngcc0.ɵɵnextContext().$implicit;\n    const ctx_r14 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"template\", ctx_r14.tooltipTemplate)(\"tooltip\", t_r13.valueTooltip)(\"placement\", t_r13.valueTooltipPlacement)(\"content\", t_r13.value);\n} }\nfunction SliderComponent_span_28_span_3_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"span\", 32);\n} if (rf & 2) {\n    const t_r13 = ɵngcc0.ɵɵnextContext().$implicit;\n    ɵngcc0.ɵɵproperty(\"innerHTML\", t_r13.legend, ɵngcc0.ɵɵsanitizeHtml);\n} }\nconst _c13 = function (a0) { return { \"ng5-slider-selected\": a0 }; };\nfunction SliderComponent_span_28_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 27);\n    ɵngcc0.ɵɵelement(1, \"ng5-slider-tooltip-wrapper\", 28);\n    ɵngcc0.ɵɵtemplate(2, SliderComponent_span_28_ng5_slider_tooltip_wrapper_2_Template, 1, 4, \"ng5-slider-tooltip-wrapper\", 29);\n    ɵngcc0.ɵɵtemplate(3, SliderComponent_span_28_span_3_Template, 1, 1, \"span\", 30);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const t_r13 = ctx.$implicit;\n    const ctx_r12 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(7, _c13, t_r13.selected))(\"ngStyle\", t_r13.style);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"template\", ctx_r12.tooltipTemplate)(\"tooltip\", t_r13.tooltip)(\"placement\", t_r13.tooltipPlacement);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", t_r13.value != null);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", t_r13.legend != null);\n} }\nfunction TooltipWrapperComponent_ng_container_0_1_ng_template_0_Template(rf, ctx) { }\nfunction TooltipWrapperComponent_ng_container_0_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵtemplate(0, TooltipWrapperComponent_ng_container_0_1_ng_template_0_Template, 0, 0, \"ng-template\");\n} }\nconst _c14 = function (a0, a1, a2) { return { tooltip: a0, placement: a1, content: a2 }; };\nfunction TooltipWrapperComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, TooltipWrapperComponent_ng_container_0_1_Template, 1, 0, undefined, 1);\n    ɵngcc0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.template)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction3(2, _c14, ctx_r0.tooltip, ctx_r0.placement, ctx_r0.content));\n} }\nfunction TooltipWrapperComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 2);\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵattribute(\"title\", ctx_r1.tooltip)(\"data-tooltip-placement\", ctx_r1.placement);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r1.content, \" \");\n} }\nconst PointerType = {\n    /** Low pointer */\n    Min: 0,\n    /** High pointer */\n    Max: 1,\n};\nPointerType[PointerType.Min] = \"Min\";\nPointerType[PointerType.Max] = \"Max\";\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @enum {number} */\nconst LabelType = {\n    /** Label above low pointer */\n    Low: 0,\n    /** Label above high pointer */\n    High: 1,\n    /** Label for minimum slider value */\n    Floor: 2,\n    /** Label for maximum slider value */\n    Ceil: 3,\n    /** Label below legend tick */\n    TickValue: 4,\n};\nLabelType[LabelType.Low] = \"Low\";\nLabelType[LabelType.High] = \"High\";\nLabelType[LabelType.Floor] = \"Floor\";\nLabelType[LabelType.Ceil] = \"Ceil\";\nLabelType[LabelType.TickValue] = \"TickValue\";\n/**\n * Custom step definition\n *\n * This can be used to specify custom values and legend values for slider ticks\n * @record\n */\n\n/**\n * Slider options\n */\nclass Options {\n    constructor() {\n        /**\n         * Minimum value for a slider.\n         * Not applicable when using stepsArray.\n         */\n        this.floor = 0;\n        /**\n         * Maximum value for a slider.\n         * Not applicable when using stepsArray.\n         */\n        this.ceil = null;\n        /**\n         * Step between each value.\n         * Not applicable when using stepsArray.\n         */\n        this.step = 1;\n        /**\n         * The minimum range authorized on the slider.\n         * Applies to range slider only.\n         * When using stepsArray, expressed as index into stepsArray.\n         */\n        this.minRange = null;\n        /**\n         * The maximum range authorized on the slider.\n         * Applies to range slider only.\n         * When using stepsArray, expressed as index into stepsArray.\n         */\n        this.maxRange = null;\n        /**\n         * Set to true to have a push behavior. When the min handle goes above the max,\n         * the max is moved as well (and vice-versa). The range between min and max is\n         * defined by the step option (defaults to 1) and can also be overriden by\n         * the minRange option. Applies to range slider only.\n         */\n        this.pushRange = false;\n        /**\n         * The minimum value authorized on the slider.\n         * When using stepsArray, expressed as index into stepsArray.\n         */\n        this.minLimit = null;\n        /**\n         * The maximum value authorized on the slider.\n         * When using stepsArray, expressed as index into stepsArray.\n         */\n        this.maxLimit = null;\n        /**\n         * Custom translate function. Use this if you want to translate values displayed\n         * on the slider.\n         */\n        this.translate = null;\n        /**\n         * Custom function for combining overlapping labels in range slider.\n         * It takes the min and max values (already translated with translate fuction)\n         * and should return how these two values should be combined.\n         * If not provided, the default function will join the two values with\n         * ' - ' as separator.\n         */\n        this.combineLabels = null;\n        /**\n         * Use to display legend under ticks (thus, it needs to be used along with\n         * showTicks or showTicksValues). The function will be called with each tick\n         * value and returned content will be displayed under the tick as a legend.\n         * If the returned value is null, then no legend is displayed under\n         * the corresponding tick.You can also directly provide the legend values\n         * in the stepsArray option.\n         */\n        this.getLegend = null;\n        /**\n         * If you want to display a slider with non linear/number steps.\n         * Just pass an array with each slider value and that's it; the floor, ceil and step settings\n         * of the slider will be computed automatically.\n         * By default, the value model and valueHigh model values will be the value of the selected item\n         * in the stepsArray.\n         * They can also be bound to the index of the selected item by setting the bindIndexForStepsArray\n         * option to true.\n         */\n        this.stepsArray = null;\n        /**\n         * Set to true to bind the index of the selected item to value model and valueHigh model.\n         */\n        this.bindIndexForStepsArray = false;\n        /**\n         * When set to true and using a range slider, the range can be dragged by the selection bar.\n         * Applies to range slider only.\n         */\n        this.draggableRange = false;\n        /**\n         * Same as draggableRange but the slider range can't be changed.\n         * Applies to range slider only.\n         */\n        this.draggableRangeOnly = false;\n        /**\n         * Set to true to always show the selection bar before the slider handle.\n         */\n        this.showSelectionBar = false;\n        /**\n         * Set to true to always show the selection bar after the slider handle.\n         */\n        this.showSelectionBarEnd = false;\n        /**\n         * Set a number to draw the selection bar between this value and the slider handle.\n         * When using stepsArray, expressed as index into stepsArray.\n         */\n        this.showSelectionBarFromValue = null;\n        /**\n         * Only for range slider. Set to true to visualize in different colour the areas\n         * on the left/right (top/bottom for vertical range slider) of selection bar between the handles.\n         */\n        this.showOuterSelectionBars = false;\n        /**\n         * Set to true to hide pointer labels\n         */\n        this.hidePointerLabels = false;\n        /**\n         * Set to true to hide min / max labels\n         */\n        this.hideLimitLabels = false;\n        /**\n         * Set to false to disable the auto-hiding behavior of the limit labels.\n         */\n        this.autoHideLimitLabels = true;\n        /**\n         * Set to true to make the slider read-only.\n         */\n        this.readOnly = false;\n        /**\n         * Set to true to disable the slider.\n         */\n        this.disabled = false;\n        /**\n         * Throttle interval for mouse events in milliseconds.\n         * This is provided to avoid a flood of events when moving the slider with mouse.\n         */\n        this.mouseEventsInterval = 50;\n        /**\n         * Throttle interval for touch events in milliseconds.\n         * This is provided to avoid a flood of events when moving the slider with touch gesture.\n         */\n        this.touchEventsInterval = 50;\n        /**\n         * Throttle interval for input changes (changes to bindings or reactive form inputs)\n         * This is provided to avoid a flood of events on frequent input binding changes affecting performance.\n         */\n        this.inputEventsInterval = 100;\n        /**\n         * Throttle interval for output changes (signalling changes to output bindings and user callbacks)\n         * This is provided to avoid a flood of outgoing events affecting Angular app performance.\n         */\n        this.outputEventsInterval = 100;\n        /**\n         * Set to true to display a tick for each step of the slider.\n         */\n        this.showTicks = false;\n        /**\n         * Set to true to display a tick and the step value for each step of the slider..\n         */\n        this.showTicksValues = false;\n        /* The step between each tick to display. If not set, the step value is used.\n            Not used when ticksArray is specified. */\n        this.tickStep = null;\n        /* The step between displaying each tick step value. */\n        this.tickValueStep = 1;\n        /**\n         * Use to display ticks at specific positions.\n         * The array contains the index of the ticks that should be displayed.\n         * For example, [0, 1, 5] will display a tick for the first, second and sixth values.\n         */\n        this.ticksArray = null;\n        /**\n         * Used to display a tooltip when a tick is hovered.\n         * Set to a function that returns the tooltip content for a given value.\n         */\n        this.ticksTooltip = null;\n        /**\n         * Same as ticksTooltip but for ticks values.\n         */\n        this.ticksValuesTooltip = null;\n        /**\n         * Set to true to display the slider vertically.\n         * The slider will take the full height of its parent.\n         * Changing this value at runtime is not currently supported.\n         */\n        this.vertical = false;\n        /**\n         * Function that returns the current color of the selection bar.\n         * If your color won't change, don't use this option but set it through CSS.\n         * If the returned color depends on a model value (either value or valueHigh),\n         * you should use the argument passed to the function.\n         * Indeed, when the function is called, there is no certainty that the model\n         * has already been updated.\n         */\n        this.getSelectionBarColor = null;\n        /**\n         * Function that returns the color of a tick. showTicks must be enabled.\n         */\n        this.getTickColor = null;\n        /**\n         * Function that returns the current color of a pointer.\n         * If your color won't change, don't use this option but set it through CSS.\n         * If the returned color depends on a model value (either value or valueHigh),\n         * you should use the argument passed to the function.\n         * Indeed, when the function is called, there is no certainty that the model has already been updated.\n         * To handle range slider pointers independently, you should evaluate pointerType within the given\n         * function where \"min\" stands for value model and \"max\" for valueHigh model values.\n         */\n        this.getPointerColor = null;\n        /**\n         * Handles are focusable (on click or with tab) and can be modified using the following keyboard controls:\n         * Left/bottom arrows: -1\n         * Right/top arrows: +1\n         * Page-down: -10%\n         * Page-up: +10%\n         * Home: minimum value\n         * End: maximum value\n         */\n        this.keyboardSupport = true;\n        /**\n         * If you display the slider in an element that uses transform: scale(0.5), set the scale value to 2\n         * so that the slider is rendered properly and the events are handled correctly.\n         */\n        this.scale = 1;\n        /**\n         * Set to true to force the value to be rounded to the step, even when modified from the outside.\n         * When set to false, if the model values are modified from outside the slider, they are not rounded\n         * and can be between two steps.\n         */\n        this.enforceStep = true;\n        /**\n         * Set to true to force the value to be normalised to allowed range (floor to ceil), even when modified from the outside.\n         * When set to false, if the model values are modified from outside the slider, and they are outside allowed range,\n         * the slider may be rendered incorrectly. However, setting this to false may be useful if you want to perform custom normalisation.\n         */\n        this.enforceRange = true;\n        /**\n         * Set to true to prevent to user from switching the min and max handles. Applies to range slider only.\n         */\n        this.noSwitching = false;\n        /**\n         * Set to true to only bind events on slider handles.\n         */\n        this.onlyBindHandles = false;\n        /**\n         * Set to true to show graphs right to left.\n         * If vertical is true it will be from top to bottom and left / right arrow functions reversed.\n         */\n        this.rightToLeft = false;\n        /**\n         * Set to true to reverse keyboard navigation:\n         * Right/top arrows: -1\n         * Left/bottom arrows: +1\n         * Page-up: -10%\n         * Page-down: +10%\n         * End: minimum value\n         * Home: maximum value\n         */\n        this.reversedControls = false;\n        /**\n         * Set to true to keep the slider labels inside the slider bounds.\n         */\n        this.boundPointerLabels = true;\n        /**\n         * Set to true to use a logarithmic scale to display the slider.\n         */\n        this.logScale = false;\n        /**\n         * Function that returns the position on the slider for a given value.\n         * The position must be a percentage between 0 and 1.\n         * The function should be monotonically increasing or decreasing; otherwise the slider may behave incorrectly.\n         */\n        this.customValueToPosition = null;\n        /**\n         * Function that returns the value for a given position on the slider.\n         * The position is a percentage between 0 and 1.\n         * The function should be monotonically increasing or decreasing; otherwise the slider may behave incorrectly.\n         */\n        this.customPositionToValue = null;\n        /**\n         * Precision limit for calculated values.\n         * Values used in calculations will be rounded to this number of significant digits\n         * to prevent accumulating small floating-point errors.\n         */\n        this.precisionLimit = 12;\n        /**\n         * Use to display the selection bar as a gradient.\n         * The given object must contain from and to properties which are colors.\n         */\n        this.selectionBarGradient = null;\n        /**\n         * Use to add a label directly to the slider for accessibility. Adds the aria-label attribute.\n         */\n        this.ariaLabel = null;\n        /**\n         * Use instead of ariaLabel to reference the id of an element which will be used to label the slider.\n         * Adds the aria-labelledby attribute.\n         */\n        this.ariaLabelledBy = null;\n        /**\n         * Use to add a label directly to the slider range for accessibility. Adds the aria-label attribute.\n         */\n        this.ariaLabelHigh = null;\n        /**\n         * Use instead of ariaLabelHigh to reference the id of an element which will be used to label the slider range.\n         * Adds the aria-labelledby attribute.\n         */\n        this.ariaLabelledByHigh = null;\n        /**\n         * Use to increase rendering performance. If the value is not provided, the slider calculates the with/height of the handle\n         */\n        this.handleDimension = null;\n        /**\n         * Use to increase rendering performance. If the value is not provided, the slider calculates the with/height of the bar\n         */\n        this.barDimension = null;\n        /**\n         * Enable/disable CSS animations\n         */\n        this.animate = true;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass ChangeContext {\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n *  Collection of functions to handle conversions/lookups of values\n */\nclass ValueHelper {\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    static isNullOrUndefined(value) {\n        return value === undefined || value === null;\n    }\n    /**\n     * @param {?} val\n     * @param {?} minVal\n     * @param {?} maxVal\n     * @return {?}\n     */\n    static linearValueToPosition(val, minVal, maxVal) {\n        const /** @type {?} */ range = maxVal - minVal;\n        return (val - minVal) / range;\n    }\n    /**\n     * @param {?} val\n     * @param {?} minVal\n     * @param {?} maxVal\n     * @return {?}\n     */\n    static logValueToPosition(val, minVal, maxVal) {\n        val = Math.log(val);\n        minVal = Math.log(minVal);\n        maxVal = Math.log(maxVal);\n        const /** @type {?} */ range = maxVal - minVal;\n        return (val - minVal) / range;\n    }\n    /**\n     * @param {?} percent\n     * @param {?} minVal\n     * @param {?} maxVal\n     * @return {?}\n     */\n    static linearPositionToValue(percent, minVal, maxVal) {\n        return percent * (maxVal - minVal) + minVal;\n    }\n    /**\n     * @param {?} percent\n     * @param {?} minVal\n     * @param {?} maxVal\n     * @return {?}\n     */\n    static logPositionToValue(percent, minVal, maxVal) {\n        minVal = Math.log(minVal);\n        maxVal = Math.log(maxVal);\n        const /** @type {?} */ value = percent * (maxVal - minVal) + minVal;\n        return Math.exp(value);\n    }\n    /**\n     * @param {?} modelValue\n     * @param {?} stepsArray\n     * @return {?}\n     */\n    static findStepIndex(modelValue, stepsArray) {\n        const /** @type {?} */ differences = stepsArray.map((step) => Math.abs(modelValue - step.value));\n        let /** @type {?} */ minDifferenceIndex = 0;\n        for (let /** @type {?} */ index = 0; index < stepsArray.length; index++) {\n            if (differences[index] !== differences[minDifferenceIndex] && differences[index] < differences[minDifferenceIndex]) {\n                minDifferenceIndex = index;\n            }\n        }\n        return minDifferenceIndex;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Helper with compatibility functions to support different browsers\n */\nclass CompatibilityHelper {\n    /**\n     * Workaround for TouchEvent constructor sadly not being available on all browsers (e.g. Firefox, Safari)\n     * @param {?} event\n     * @return {?}\n     */\n    static isTouchEvent(event) {\n        if ((/** @type {?} */ (window)).TouchEvent !== undefined) {\n            return event instanceof TouchEvent;\n        }\n        return event.touches !== undefined;\n    }\n    /**\n     * Detect presence of ResizeObserver API\n     * @return {?}\n     */\n    static isResizeObserverAvailable() {\n        return (/** @type {?} */ (window)).ResizeObserver !== undefined;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Helper with mathematical functions\n */\nclass MathHelper {\n    /**\n     * @param {?} value\n     * @param {?} precisionLimit\n     * @return {?}\n     */\n    static roundToPrecisionLimit(value, precisionLimit) {\n        return +(value.toPrecision(precisionLimit));\n    }\n    /**\n     * @param {?} value\n     * @param {?} floor\n     * @param {?} ceil\n     * @return {?}\n     */\n    static clampToRange(value, floor, ceil) {\n        return Math.min(Math.max(value, floor), ceil);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass EventListener {\n    constructor() {\n        this.eventName = null;\n        this.events = null;\n        this.eventsSubscription = null;\n        this.teardownCallback = null;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Helper class to attach event listeners to DOM elements with debounce support using rxjs\n */\nclass EventListenerHelper {\n    /**\n     * @param {?} renderer\n     */\n    constructor(renderer) {\n        this.renderer = renderer;\n    }\n    /**\n     * @param {?} nativeElement\n     * @param {?} eventName\n     * @param {?} callback\n     * @param {?=} throttleInterval\n     * @return {?}\n     */\n    attachPassiveEventListener(nativeElement, eventName, callback, throttleInterval) {\n        // Only use passive event listeners if the browser supports it\n        if (detectPassiveEvents.hasSupport !== true) {\n            return this.attachEventListener(nativeElement, eventName, callback, throttleInterval);\n        }\n        // Angular doesn't support passive event handlers (yet), so we need to roll our own code using native functions\n        const /** @type {?} */ listener = new EventListener();\n        listener.eventName = eventName;\n        listener.events = new Subject();\n        const /** @type {?} */ observerCallback = (event) => {\n            listener.events.next(event);\n        };\n        nativeElement.addEventListener(eventName, observerCallback, { passive: true, capture: false });\n        listener.teardownCallback = () => {\n            nativeElement.removeEventListener(eventName, observerCallback, { passive: true, capture: false });\n        };\n        listener.eventsSubscription = listener.events\n            .pipe((!ValueHelper.isNullOrUndefined(throttleInterval))\n            ? throttleTime(throttleInterval, undefined, { leading: true, trailing: true })\n            : tap(() => { }) // no-op\n        )\n            .subscribe((event) => {\n            callback(event);\n        });\n        return listener;\n    }\n    /**\n     * @param {?} eventListener\n     * @return {?}\n     */\n    detachEventListener(eventListener) {\n        if (!ValueHelper.isNullOrUndefined(eventListener.eventsSubscription)) {\n            eventListener.eventsSubscription.unsubscribe();\n            eventListener.eventsSubscription = null;\n        }\n        if (!ValueHelper.isNullOrUndefined(eventListener.events)) {\n            eventListener.events.complete();\n            eventListener.events = null;\n        }\n        if (!ValueHelper.isNullOrUndefined(eventListener.teardownCallback)) {\n            eventListener.teardownCallback();\n            eventListener.teardownCallback = null;\n        }\n    }\n    /**\n     * @param {?} nativeElement\n     * @param {?} eventName\n     * @param {?} callback\n     * @param {?=} throttleInterval\n     * @return {?}\n     */\n    attachEventListener(nativeElement, eventName, callback, throttleInterval) {\n        const /** @type {?} */ listener = new EventListener();\n        listener.eventName = eventName;\n        listener.events = new Subject();\n        const /** @type {?} */ observerCallback = (event) => {\n            listener.events.next(event);\n        };\n        listener.teardownCallback = this.renderer.listen(nativeElement, eventName, observerCallback);\n        listener.eventsSubscription = listener.events\n            .pipe((!ValueHelper.isNullOrUndefined(throttleInterval))\n            ? throttleTime(throttleInterval, undefined, { leading: true, trailing: true })\n            : tap(() => { }) // no-op\n        )\n            .subscribe((event) => { callback(event); });\n        return listener;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass SliderElementDirective {\n    /**\n     * @param {?} elemRef\n     * @param {?} renderer\n     * @param {?} changeDetectionRef\n     */\n    constructor(elemRef, renderer, changeDetectionRef) {\n        this.elemRef = elemRef;\n        this.renderer = renderer;\n        this.changeDetectionRef = changeDetectionRef;\n        this._position = 0;\n        this._dimension = 0;\n        this._alwaysHide = false;\n        this._vertical = false;\n        this._scale = 1;\n        this.opacity = 1;\n        this.visibility = 'visible';\n        this.left = '';\n        this.bottom = '';\n        this.height = '';\n        this.width = '';\n        this.eventListeners = [];\n        this.eventListenerHelper = new EventListenerHelper(this.renderer);\n    }\n    /**\n     * @return {?}\n     */\n    get position() {\n        return this._position;\n    }\n    /**\n     * @return {?}\n     */\n    get dimension() {\n        return this._dimension;\n    }\n    /**\n     * @return {?}\n     */\n    get alwaysHide() {\n        return this._alwaysHide;\n    }\n    /**\n     * @return {?}\n     */\n    get vertical() {\n        return this._vertical;\n    }\n    /**\n     * @return {?}\n     */\n    get scale() {\n        return this._scale;\n    }\n    /**\n     * @param {?} hide\n     * @return {?}\n     */\n    setAlwaysHide(hide) {\n        this._alwaysHide = hide;\n        if (hide) {\n            this.visibility = 'hidden';\n        }\n        else {\n            this.visibility = 'visible';\n        }\n    }\n    /**\n     * @return {?}\n     */\n    hide() {\n        this.opacity = 0;\n    }\n    /**\n     * @return {?}\n     */\n    show() {\n        if (this.alwaysHide) {\n            return;\n        }\n        this.opacity = 1;\n    }\n    /**\n     * @return {?}\n     */\n    isVisible() {\n        if (this.alwaysHide) {\n            return false;\n        }\n        return this.opacity !== 0;\n    }\n    /**\n     * @param {?} vertical\n     * @return {?}\n     */\n    setVertical(vertical) {\n        this._vertical = vertical;\n        if (this._vertical) {\n            this.left = '';\n            this.width = '';\n        }\n        else {\n            this.bottom = '';\n            this.height = '';\n        }\n    }\n    /**\n     * @param {?} scale\n     * @return {?}\n     */\n    setScale(scale) {\n        this._scale = scale;\n    }\n    /**\n     * @param {?} pos\n     * @return {?}\n     */\n    setPosition(pos) {\n        if (this._position !== pos && !this.isRefDestroyed()) {\n            this.changeDetectionRef.markForCheck();\n        }\n        this._position = pos;\n        if (this._vertical) {\n            this.bottom = Math.round(pos) + 'px';\n        }\n        else {\n            this.left = Math.round(pos) + 'px';\n        }\n    }\n    /**\n     * @return {?}\n     */\n    calculateDimension() {\n        const /** @type {?} */ val = this.getBoundingClientRect();\n        if (this.vertical) {\n            this._dimension = (val.bottom - val.top) * this.scale;\n        }\n        else {\n            this._dimension = (val.right - val.left) * this.scale;\n        }\n    }\n    /**\n     * @param {?} dim\n     * @return {?}\n     */\n    setDimension(dim) {\n        if (this._dimension !== dim && !this.isRefDestroyed()) {\n            this.changeDetectionRef.markForCheck();\n        }\n        this._dimension = dim;\n        if (this._vertical) {\n            this.height = Math.round(dim) + 'px';\n        }\n        else {\n            this.width = Math.round(dim) + 'px';\n        }\n    }\n    /**\n     * @return {?}\n     */\n    getBoundingClientRect() {\n        return this.elemRef.nativeElement.getBoundingClientRect();\n    }\n    /**\n     * @param {?} eventName\n     * @param {?} callback\n     * @param {?=} debounceInterval\n     * @return {?}\n     */\n    on(eventName, callback, debounceInterval) {\n        const /** @type {?} */ listener = this.eventListenerHelper.attachEventListener(this.elemRef.nativeElement, eventName, callback, debounceInterval);\n        this.eventListeners.push(listener);\n    }\n    /**\n     * @param {?} eventName\n     * @param {?} callback\n     * @param {?=} debounceInterval\n     * @return {?}\n     */\n    onPassive(eventName, callback, debounceInterval) {\n        const /** @type {?} */ listener = this.eventListenerHelper.attachPassiveEventListener(this.elemRef.nativeElement, eventName, callback, debounceInterval);\n        this.eventListeners.push(listener);\n    }\n    /**\n     * @param {?=} eventName\n     * @return {?}\n     */\n    off(eventName) {\n        let /** @type {?} */ listenersToKeep;\n        let /** @type {?} */ listenersToRemove;\n        if (!ValueHelper.isNullOrUndefined(eventName)) {\n            listenersToKeep = this.eventListeners.filter((event) => event.eventName !== eventName);\n            listenersToRemove = this.eventListeners.filter((event) => event.eventName === eventName);\n        }\n        else {\n            listenersToKeep = [];\n            listenersToRemove = this.eventListeners;\n        }\n        for (const /** @type {?} */ listener of listenersToRemove) {\n            this.eventListenerHelper.detachEventListener(listener);\n        }\n        this.eventListeners = listenersToKeep;\n    }\n    /**\n     * @return {?}\n     */\n    isRefDestroyed() {\n        return ValueHelper.isNullOrUndefined(this.changeDetectionRef) || this.changeDetectionRef['destroyed'];\n    }\n}\nSliderElementDirective.ɵfac = function SliderElementDirective_Factory(t) { return new (t || SliderElementDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nSliderElementDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: SliderElementDirective, selectors: [[\"\", \"ng5SliderElement\", \"\"]], hostVars: 12, hostBindings: function SliderElementDirective_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"opacity\", ctx.opacity)(\"visibility\", ctx.visibility)(\"left\", ctx.left)(\"bottom\", ctx.bottom)(\"height\", ctx.height)(\"width\", ctx.width);\n    } } });\n/** @nocollapse */\nSliderElementDirective.ctorParameters = () => [\n    { type: ElementRef, },\n    { type: Renderer2, },\n    { type: ChangeDetectorRef, },\n];\nSliderElementDirective.propDecorators = {\n    \"opacity\": [{ type: HostBinding, args: ['style.opacity',] },],\n    \"visibility\": [{ type: HostBinding, args: ['style.visibility',] },],\n    \"left\": [{ type: HostBinding, args: ['style.left',] },],\n    \"bottom\": [{ type: HostBinding, args: ['style.bottom',] },],\n    \"height\": [{ type: HostBinding, args: ['style.height',] },],\n    \"width\": [{ type: HostBinding, args: ['style.width',] },],\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SliderElementDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[ng5SliderElement]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ChangeDetectorRef }]; }, { opacity: [{\n            type: HostBinding,\n            args: ['style.opacity']\n        }], visibility: [{\n            type: HostBinding,\n            args: ['style.visibility']\n        }], left: [{\n            type: HostBinding,\n            args: ['style.left']\n        }], bottom: [{\n            type: HostBinding,\n            args: ['style.bottom']\n        }], height: [{\n            type: HostBinding,\n            args: ['style.height']\n        }], width: [{\n            type: HostBinding,\n            args: ['style.width']\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass SliderHandleDirective extends SliderElementDirective {\n    /**\n     * @param {?} elemRef\n     * @param {?} renderer\n     * @param {?} changeDetectionRef\n     */\n    constructor(elemRef, renderer, changeDetectionRef) {\n        super(elemRef, renderer, changeDetectionRef);\n        this.active = false;\n        this.role = '';\n        this.tabindex = '';\n        this.ariaOrientation = '';\n        this.ariaLabel = '';\n        this.ariaLabelledBy = '';\n        this.ariaValueNow = '';\n        this.ariaValueText = '';\n        this.ariaValueMin = '';\n        this.ariaValueMax = '';\n    }\n    /**\n     * @return {?}\n     */\n    focus() {\n        this.elemRef.nativeElement.focus();\n    }\n}\nSliderHandleDirective.ɵfac = function SliderHandleDirective_Factory(t) { return new (t || SliderHandleDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nSliderHandleDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: SliderHandleDirective, selectors: [[\"\", \"ng5SliderHandle\", \"\"]], hostVars: 11, hostBindings: function SliderHandleDirective_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"role\", ctx.role)(\"tabindex\", ctx.tabindex)(\"aria-orientation\", ctx.ariaOrientation)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledBy)(\"aria-valuenow\", ctx.ariaValueNow)(\"aria-valuetext\", ctx.ariaValueText)(\"aria-valuemin\", ctx.ariaValueMin)(\"aria-valuemax\", ctx.ariaValueMax);\n        ɵngcc0.ɵɵclassProp(\"ng5-slider-active\", ctx.active);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nSliderHandleDirective.ctorParameters = () => [\n    { type: ElementRef, },\n    { type: Renderer2, },\n    { type: ChangeDetectorRef, },\n];\nSliderHandleDirective.propDecorators = {\n    \"active\": [{ type: HostBinding, args: ['class.ng5-slider-active',] },],\n    \"role\": [{ type: HostBinding, args: ['attr.role',] },],\n    \"tabindex\": [{ type: HostBinding, args: ['attr.tabindex',] },],\n    \"ariaOrientation\": [{ type: HostBinding, args: ['attr.aria-orientation',] },],\n    \"ariaLabel\": [{ type: HostBinding, args: ['attr.aria-label',] },],\n    \"ariaLabelledBy\": [{ type: HostBinding, args: ['attr.aria-labelledby',] },],\n    \"ariaValueNow\": [{ type: HostBinding, args: ['attr.aria-valuenow',] },],\n    \"ariaValueText\": [{ type: HostBinding, args: ['attr.aria-valuetext',] },],\n    \"ariaValueMin\": [{ type: HostBinding, args: ['attr.aria-valuemin',] },],\n    \"ariaValueMax\": [{ type: HostBinding, args: ['attr.aria-valuemax',] },],\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SliderHandleDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[ng5SliderHandle]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ChangeDetectorRef }]; }, { active: [{\n            type: HostBinding,\n            args: ['class.ng5-slider-active']\n        }], role: [{\n            type: HostBinding,\n            args: ['attr.role']\n        }], tabindex: [{\n            type: HostBinding,\n            args: ['attr.tabindex']\n        }], ariaOrientation: [{\n            type: HostBinding,\n            args: ['attr.aria-orientation']\n        }], ariaLabel: [{\n            type: HostBinding,\n            args: ['attr.aria-label']\n        }], ariaLabelledBy: [{\n            type: HostBinding,\n            args: ['attr.aria-labelledby']\n        }], ariaValueNow: [{\n            type: HostBinding,\n            args: ['attr.aria-valuenow']\n        }], ariaValueText: [{\n            type: HostBinding,\n            args: ['attr.aria-valuetext']\n        }], ariaValueMin: [{\n            type: HostBinding,\n            args: ['attr.aria-valuemin']\n        }], ariaValueMax: [{\n            type: HostBinding,\n            args: ['attr.aria-valuemax']\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass SliderLabelDirective extends SliderElementDirective {\n    /**\n     * @param {?} elemRef\n     * @param {?} renderer\n     * @param {?} changeDetectionRef\n     */\n    constructor(elemRef, renderer, changeDetectionRef) {\n        super(elemRef, renderer, changeDetectionRef);\n        this._value = null;\n    }\n    /**\n     * @return {?}\n     */\n    get value() {\n        return this._value;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    setValue(value) {\n        let /** @type {?} */ recalculateDimension = false;\n        if (!this.alwaysHide &&\n            (ValueHelper.isNullOrUndefined(this.value) ||\n                this.value.length !== value.length ||\n                (this.value.length > 0 && this.dimension === 0))) {\n            recalculateDimension = true;\n        }\n        this._value = value;\n        this.elemRef.nativeElement.innerHTML = value;\n        // Update dimension only when length of the label have changed\n        if (recalculateDimension) {\n            this.calculateDimension();\n        }\n    }\n}\nSliderLabelDirective.ɵfac = function SliderLabelDirective_Factory(t) { return new (t || SliderLabelDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nSliderLabelDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: SliderLabelDirective, selectors: [[\"\", \"ng5SliderLabel\", \"\"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nSliderLabelDirective.ctorParameters = () => [\n    { type: ElementRef, },\n    { type: Renderer2, },\n    { type: ChangeDetectorRef, },\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SliderLabelDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[ng5SliderLabel]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ChangeDetectorRef }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass Tick {\n    constructor() {\n        this.selected = false;\n        this.style = {};\n        this.tooltip = null;\n        this.tooltipPlacement = null;\n        this.value = null;\n        this.valueTooltip = null;\n        this.valueTooltipPlacement = null;\n        this.legend = null;\n    }\n}\nclass Dragging {\n    constructor() {\n        this.active = false;\n        this.value = 0;\n        this.difference = 0;\n        this.position = 0;\n        this.lowLimit = 0;\n        this.highLimit = 0;\n    }\n}\nclass ModelValues {\n    /**\n     * @param {?=} x\n     * @param {?=} y\n     * @return {?}\n     */\n    static compare(x, y) {\n        if (ValueHelper.isNullOrUndefined(x) && ValueHelper.isNullOrUndefined(y)) {\n            return false;\n        }\n        if (ValueHelper.isNullOrUndefined(x) !== ValueHelper.isNullOrUndefined(y)) {\n            return false;\n        }\n        return x.value === y.value && x.highValue === y.highValue;\n    }\n}\nclass ModelChange extends ModelValues {\n    /**\n     * @param {?=} x\n     * @param {?=} y\n     * @return {?}\n     */\n    static compare(x, y) {\n        if (ValueHelper.isNullOrUndefined(x) && ValueHelper.isNullOrUndefined(y)) {\n            return false;\n        }\n        if (ValueHelper.isNullOrUndefined(x) !== ValueHelper.isNullOrUndefined(y)) {\n            return false;\n        }\n        return x.value === y.value &&\n            x.highValue === y.highValue &&\n            x.forceChange === y.forceChange;\n    }\n}\nconst NG5_SLIDER_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    /* tslint:disable-next-line: no-use-before-declare */\n    useExisting: forwardRef(() => SliderComponent),\n    multi: true,\n};\nclass SliderComponent {\n    /**\n     * @param {?} renderer\n     * @param {?} elementRef\n     * @param {?} changeDetectionRef\n     * @param {?} zone\n     */\n    constructor(renderer, elementRef, changeDetectionRef, zone) {\n        this.renderer = renderer;\n        this.elementRef = elementRef;\n        this.changeDetectionRef = changeDetectionRef;\n        this.zone = zone;\n        // Model for low value of slider. For simple slider, this is the only input. For range slider, this is the low value.\n        this.value = null;\n        // Output for low value slider to support two-way bindings\n        this.valueChange = new EventEmitter();\n        // Model for high value of slider. Not used in simple slider. For range slider, this is the high value.\n        this.highValue = null;\n        // Output for high value slider to support two-way bindings\n        this.highValueChange = new EventEmitter();\n        // An object with all the other options of the slider.\n        // Each option can be updated at runtime and the slider will automatically be re-rendered.\n        this.options = new Options();\n        // Event emitted when user starts interaction with the slider\n        this.userChangeStart = new EventEmitter();\n        // Event emitted on each change coming from user interaction\n        this.userChange = new EventEmitter();\n        // Event emitted when user finishes interaction with the slider\n        this.userChangeEnd = new EventEmitter();\n        this.initHasRun = false;\n        this.inputModelChangeSubject = new Subject();\n        this.inputModelChangeSubscription = null;\n        this.outputModelChangeSubject = new Subject();\n        this.outputModelChangeSubscription = null;\n        this.viewLowValue = null;\n        this.viewHighValue = null;\n        this.viewOptions = new Options();\n        this.handleHalfDimension = 0;\n        this.maxHandlePosition = 0;\n        this.currentTrackingPointer = null;\n        this.currentFocusPointer = null;\n        this.firstKeyDown = false;\n        this.touchId = null;\n        this.dragging = new Dragging();\n        // Host element class bindings\n        this.sliderElementVerticalClass = false;\n        this.sliderElementAnimateClass = false;\n        this.sliderElementDisabledAttr = null;\n        this.barStyle = {};\n        this.minPointerStyle = {};\n        this.maxPointerStyle = {};\n        this.fullBarTransparentClass = false;\n        this.selectionBarDraggableClass = false;\n        this.ticksUnderValuesClass = false;\n        this.intermediateTicks = false;\n        this.ticks = [];\n        this.eventListenerHelper = null;\n        this.onMoveEventListener = null;\n        this.onEndEventListener = null;\n        this.resizeObserver = null;\n        this.onTouchedCallback = null;\n        this.onChangeCallback = null;\n        this.eventListenerHelper = new EventListenerHelper(this.renderer);\n    }\n    /**\n     * @param {?} manualRefresh\n     * @return {?}\n     */\n    set manualRefresh(manualRefresh) {\n        this.unsubscribeManualRefresh();\n        this.manualRefreshSubscription = manualRefresh.subscribe(() => {\n            setTimeout(() => this.calculateViewDimensionsAndDetectChanges());\n        });\n    }\n    /**\n     * @param {?} triggerFocus\n     * @return {?}\n     */\n    set triggerFocus(triggerFocus) {\n        this.unsubscribeTriggerFocus();\n        this.triggerFocusSubscription = triggerFocus.subscribe((pointerType) => {\n            this.focusPointer(pointerType);\n        });\n    }\n    /**\n     * @return {?}\n     */\n    get range() {\n        return !ValueHelper.isNullOrUndefined(this.value) && !ValueHelper.isNullOrUndefined(this.highValue);\n    }\n    /**\n     * @return {?}\n     */\n    get showTicks() {\n        return this.viewOptions.showTicks;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.viewOptions = new Options();\n        Object.assign(this.viewOptions, this.options);\n        // We need to run these two things first, before the rest of the init in ngAfterViewInit(),\n        // because these two settings are set through @HostBinding and Angular change detection\n        // mechanism doesn't like them changing in ngAfterViewInit()\n        this.updateDisabledState();\n        this.updateVerticalState();\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        this.applyOptions();\n        this.subscribeInputModelChangeSubject(this.viewOptions.inputEventsInterval);\n        this.subscribeOutputModelChangeSubject(this.viewOptions.outputEventsInterval);\n        // Once we apply options, we need to normalise model values for the first time\n        this.renormaliseModelValues();\n        this.viewLowValue = this.modelValueToViewValue(this.value);\n        if (this.range) {\n            this.viewHighValue = this.modelValueToViewValue(this.highValue);\n        }\n        else {\n            this.viewHighValue = null;\n        }\n        this.updateVerticalState(); // need to run this again to cover changes to slider elements\n        this.manageElementsStyle();\n        this.updateDisabledState();\n        this.calculateViewDimensions();\n        this.addAccessibility();\n        this.updateCeilLabel();\n        this.updateFloorLabel();\n        this.initHandles();\n        this.manageEventsBindings();\n        this.subscribeResizeObserver();\n        this.initHasRun = true;\n        // Run change detection manually to resolve some issues when init procedure changes values used in the view\n        if (!this.isRefDestroyed()) {\n            this.changeDetectionRef.detectChanges();\n        }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        // Always apply options first\n        if (!ValueHelper.isNullOrUndefined(changes[\"options\"])) {\n            this.onChangeOptions();\n        }\n        // Then value changes\n        if (!ValueHelper.isNullOrUndefined(changes[\"value\"]) ||\n            !ValueHelper.isNullOrUndefined(changes[\"highValue\"])) {\n            this.inputModelChangeSubject.next({\n                value: this.value,\n                highValue: this.highValue,\n                forceChange: false,\n                internalChange: false\n            });\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.unbindEvents();\n        this.unsubscribeResizeObserver();\n        this.unsubscribeInputModelChangeSubject();\n        this.unsubscribeOutputModelChangeSubject();\n        this.unsubscribeManualRefresh();\n        this.unsubscribeTriggerFocus();\n    }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    writeValue(obj) {\n        if (obj instanceof Array) {\n            this.value = obj[0];\n            this.highValue = obj[1];\n        }\n        else {\n            this.value = obj;\n        }\n        // ngOnChanges() is not called in this instance, so we need to communicate the change manually\n        this.inputModelChangeSubject.next({\n            value: this.value,\n            highValue: this.highValue,\n            forceChange: false,\n            internalChange: false\n        });\n    }\n    /**\n     * @param {?} onChangeCallback\n     * @return {?}\n     */\n    registerOnChange(onChangeCallback) {\n        this.onChangeCallback = onChangeCallback;\n    }\n    /**\n     * @param {?} onTouchedCallback\n     * @return {?}\n     */\n    registerOnTouched(onTouchedCallback) {\n        this.onTouchedCallback = onTouchedCallback;\n    }\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.viewOptions.disabled = isDisabled;\n        this.updateDisabledState();\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    onResize(event) {\n        this.calculateViewDimensionsAndDetectChanges();\n    }\n    /**\n     * @param {?=} interval\n     * @return {?}\n     */\n    subscribeInputModelChangeSubject(interval) {\n        this.inputModelChangeSubscription = this.inputModelChangeSubject\n            .pipe(distinctUntilChanged(ModelChange.compare),\n        // Hack to reset the status of the distinctUntilChanged() - if a \"fake\" event comes through with forceChange=true,\n        // we forcefully by-pass distinctUntilChanged(), but otherwise drop the event\n        filter((modelChange) => !modelChange.forceChange && !modelChange.internalChange), (!ValueHelper.isNullOrUndefined(interval))\n            ? throttleTime(interval, undefined, { leading: true, trailing: true })\n            : tap(() => { }) // no-op\n        )\n            .subscribe((modelChange) => this.applyInputModelChange(modelChange));\n    }\n    /**\n     * @param {?=} interval\n     * @return {?}\n     */\n    subscribeOutputModelChangeSubject(interval) {\n        this.outputModelChangeSubscription = this.outputModelChangeSubject\n            .pipe(distinctUntilChanged(ModelChange.compare), (!ValueHelper.isNullOrUndefined(interval))\n            ? throttleTime(interval, undefined, { leading: true, trailing: true })\n            : tap(() => { }) // no-op\n        )\n            .subscribe((modelChange) => this.publishOutputModelChange(modelChange));\n    }\n    /**\n     * @return {?}\n     */\n    subscribeResizeObserver() {\n        if (CompatibilityHelper.isResizeObserverAvailable()) {\n            this.resizeObserver = new ResizeObserver(() => this.calculateViewDimensionsAndDetectChanges());\n            this.resizeObserver.observe(this.elementRef.nativeElement);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    unsubscribeResizeObserver() {\n        if (CompatibilityHelper.isResizeObserverAvailable() && this.resizeObserver !== null) {\n            this.resizeObserver.disconnect();\n            this.resizeObserver = null;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    unsubscribeOnMove() {\n        if (!ValueHelper.isNullOrUndefined(this.onMoveEventListener)) {\n            this.eventListenerHelper.detachEventListener(this.onMoveEventListener);\n            this.onMoveEventListener = null;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    unsubscribeOnEnd() {\n        if (!ValueHelper.isNullOrUndefined(this.onEndEventListener)) {\n            this.eventListenerHelper.detachEventListener(this.onEndEventListener);\n            this.onEndEventListener = null;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    unsubscribeInputModelChangeSubject() {\n        if (!ValueHelper.isNullOrUndefined(this.inputModelChangeSubscription)) {\n            this.inputModelChangeSubscription.unsubscribe();\n            this.inputModelChangeSubscription = null;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    unsubscribeOutputModelChangeSubject() {\n        if (!ValueHelper.isNullOrUndefined(this.outputModelChangeSubscription)) {\n            this.outputModelChangeSubscription.unsubscribe();\n            this.outputModelChangeSubscription = null;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    unsubscribeManualRefresh() {\n        if (!ValueHelper.isNullOrUndefined(this.manualRefreshSubscription)) {\n            this.manualRefreshSubscription.unsubscribe();\n            this.manualRefreshSubscription = null;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    unsubscribeTriggerFocus() {\n        if (!ValueHelper.isNullOrUndefined(this.triggerFocusSubscription)) {\n            this.triggerFocusSubscription.unsubscribe();\n            this.triggerFocusSubscription = null;\n        }\n    }\n    /**\n     * @param {?} pointerType\n     * @return {?}\n     */\n    getPointerElement(pointerType) {\n        if (pointerType === PointerType.Min) {\n            return this.minHandleElement;\n        }\n        else if (pointerType === PointerType.Max) {\n            return this.maxHandleElement;\n        }\n        return null;\n    }\n    /**\n     * @return {?}\n     */\n    getCurrentTrackingValue() {\n        if (this.currentTrackingPointer === PointerType.Min) {\n            return this.viewLowValue;\n        }\n        else if (this.currentTrackingPointer === PointerType.Max) {\n            return this.viewHighValue;\n        }\n        return null;\n    }\n    /**\n     * @param {?} modelValue\n     * @return {?}\n     */\n    modelValueToViewValue(modelValue) {\n        if (ValueHelper.isNullOrUndefined(modelValue)) {\n            return NaN;\n        }\n        if (!ValueHelper.isNullOrUndefined(this.viewOptions.stepsArray) && !this.viewOptions.bindIndexForStepsArray) {\n            return ValueHelper.findStepIndex(+modelValue, this.viewOptions.stepsArray);\n        }\n        return +modelValue;\n    }\n    /**\n     * @param {?} viewValue\n     * @return {?}\n     */\n    viewValueToModelValue(viewValue) {\n        if (!ValueHelper.isNullOrUndefined(this.viewOptions.stepsArray) && !this.viewOptions.bindIndexForStepsArray) {\n            return this.getStepValue(viewValue);\n        }\n        return viewValue;\n    }\n    /**\n     * @param {?} sliderValue\n     * @return {?}\n     */\n    getStepValue(sliderValue) {\n        const /** @type {?} */ step = this.viewOptions.stepsArray[sliderValue];\n        return (!ValueHelper.isNullOrUndefined(step)) ? step.value : NaN;\n    }\n    /**\n     * @return {?}\n     */\n    applyViewChange() {\n        this.value = this.viewValueToModelValue(this.viewLowValue);\n        if (this.range) {\n            this.highValue = this.viewValueToModelValue(this.viewHighValue);\n        }\n        this.outputModelChangeSubject.next({\n            value: this.value,\n            highValue: this.highValue,\n            userEventInitiated: true,\n            forceChange: false\n        });\n        // At this point all changes are applied and outputs are emitted, so we should be done.\n        // However, input changes are communicated in different stream and we need to be ready to\n        // act on the next input change even if it is exactly the same as last input change.\n        // Therefore, we send a special event to reset the stream.\n        this.inputModelChangeSubject.next({\n            value: this.value,\n            highValue: this.highValue,\n            forceChange: false,\n            internalChange: true\n        });\n    }\n    /**\n     * @param {?} modelChange\n     * @return {?}\n     */\n    applyInputModelChange(modelChange) {\n        const /** @type {?} */ normalisedModelChange = this.normaliseModelValues(modelChange);\n        // If normalised model change is different, apply the change to the model values\n        const /** @type {?} */ normalisationChange = !ModelValues.compare(modelChange, normalisedModelChange);\n        if (normalisationChange) {\n            this.value = normalisedModelChange.value;\n            this.highValue = normalisedModelChange.highValue;\n        }\n        this.viewLowValue = this.modelValueToViewValue(normalisedModelChange.value);\n        if (this.range) {\n            this.viewHighValue = this.modelValueToViewValue(normalisedModelChange.highValue);\n        }\n        else {\n            this.viewHighValue = null;\n        }\n        this.updateLowHandle(this.valueToPosition(this.viewLowValue));\n        if (this.range) {\n            this.updateHighHandle(this.valueToPosition(this.viewHighValue));\n        }\n        this.updateSelectionBar();\n        this.updateTicksScale();\n        this.updateAriaAttributes();\n        if (this.range) {\n            this.updateCombinedLabel();\n        }\n        // At the end, we need to communicate the model change to the outputs as well\n        // Normalisation changes are also always forced out to ensure that subscribers always end up in correct state\n        this.outputModelChangeSubject.next({\n            value: normalisedModelChange.value,\n            highValue: normalisedModelChange.highValue,\n            forceChange: normalisationChange,\n            userEventInitiated: false\n        });\n    }\n    /**\n     * @param {?} modelChange\n     * @return {?}\n     */\n    publishOutputModelChange(modelChange) {\n        const /** @type {?} */ emitOutputs = () => {\n            this.valueChange.emit(modelChange.value);\n            if (this.range) {\n                this.highValueChange.emit(modelChange.highValue);\n            }\n            if (!ValueHelper.isNullOrUndefined(this.onChangeCallback)) {\n                if (this.range) {\n                    this.onChangeCallback([modelChange.value, modelChange.highValue]);\n                }\n                else {\n                    this.onChangeCallback(modelChange.value);\n                }\n            }\n            if (!ValueHelper.isNullOrUndefined(this.onTouchedCallback)) {\n                if (this.range) {\n                    this.onTouchedCallback([modelChange.value, modelChange.highValue]);\n                }\n                else {\n                    this.onTouchedCallback(modelChange.value);\n                }\n            }\n        };\n        if (modelChange.userEventInitiated) {\n            // If this change was initiated by a user event, we can emit outputs in the same tick\n            emitOutputs();\n            this.userChange.emit(this.getChangeContext());\n        }\n        else {\n            // But, if the change was initated by something else like a change in input bindings,\n            // we need to wait until next tick to emit the outputs to keep Angular change detection happy\n            setTimeout(() => { emitOutputs(); });\n        }\n    }\n    /**\n     * @param {?} input\n     * @return {?}\n     */\n    normaliseModelValues(input) {\n        const /** @type {?} */ normalisedInput = new ModelValues();\n        normalisedInput.value = input.value;\n        normalisedInput.highValue = input.highValue;\n        if (this.viewOptions.enforceStep) {\n            normalisedInput.value = this.roundStep(normalisedInput.value);\n            if (this.range) {\n                normalisedInput.highValue = this.roundStep(normalisedInput.highValue);\n            }\n        }\n        // Don't attempt to normalise further when using steps array (steps may be out of order and that is perfectly fine)\n        if (!ValueHelper.isNullOrUndefined(this.viewOptions.stepsArray) || !this.viewOptions.enforceRange) {\n            return normalisedInput;\n        }\n        normalisedInput.value = MathHelper.clampToRange(normalisedInput.value, this.viewOptions.floor, this.viewOptions.ceil);\n        if (this.range) {\n            normalisedInput.highValue = MathHelper.clampToRange(normalisedInput.highValue, this.viewOptions.floor, this.viewOptions.ceil);\n        }\n        // Make sure that range slider invariant (value <= highValue) is always satisfied\n        if (this.range && input.value > input.highValue) {\n            // We know that both values are now clamped correctly, they may just be in the wrong order\n            // So the easy solution is to swap them... except swapping is sometimes disabled in options, so we make the two values the same\n            if (this.viewOptions.noSwitching) {\n                normalisedInput.value = normalisedInput.highValue;\n            }\n            else {\n                const /** @type {?} */ tempValue = input.value;\n                normalisedInput.value = input.highValue;\n                normalisedInput.highValue = tempValue;\n            }\n        }\n        return normalisedInput;\n    }\n    /**\n     * @return {?}\n     */\n    renormaliseModelValues() {\n        const /** @type {?} */ previousModelValues = {\n            value: this.value,\n            highValue: this.highValue\n        };\n        const /** @type {?} */ normalisedModelValues = this.normaliseModelValues(previousModelValues);\n        if (!ModelValues.compare(normalisedModelValues, previousModelValues)) {\n            this.value = normalisedModelValues.value;\n            this.highValue = normalisedModelValues.highValue;\n            this.outputModelChangeSubject.next({\n                value: this.value,\n                highValue: this.highValue,\n                forceChange: true,\n                userEventInitiated: false\n            });\n        }\n    }\n    /**\n     * @return {?}\n     */\n    onChangeOptions() {\n        if (!this.initHasRun) {\n            return;\n        }\n        const /** @type {?} */ previousInputEventsInterval = this.viewOptions.inputEventsInterval;\n        const /** @type {?} */ previousOutputEventsInterval = this.viewOptions.outputEventsInterval;\n        this.applyOptions();\n        if (previousInputEventsInterval !== this.viewOptions.inputEventsInterval) {\n            this.unsubscribeInputModelChangeSubject();\n            this.subscribeInputModelChangeSubject(this.viewOptions.inputEventsInterval);\n        }\n        if (previousOutputEventsInterval !== this.viewOptions.outputEventsInterval) {\n            this.unsubscribeInputModelChangeSubject();\n            this.subscribeInputModelChangeSubject(this.viewOptions.outputEventsInterval);\n        }\n        // With new options, we need to re-normalise model values if necessary\n        this.renormaliseModelValues();\n        this.viewLowValue = this.modelValueToViewValue(this.value);\n        if (this.range) {\n            this.viewHighValue = this.modelValueToViewValue(this.highValue);\n        }\n        else {\n            this.viewHighValue = null;\n        }\n        this.resetSlider();\n    }\n    /**\n     * @return {?}\n     */\n    applyOptions() {\n        this.viewOptions = new Options();\n        Object.assign(this.viewOptions, this.options);\n        this.viewOptions.draggableRange = this.range && this.viewOptions.draggableRange;\n        this.viewOptions.draggableRangeOnly = this.range && this.viewOptions.draggableRangeOnly;\n        if (this.viewOptions.draggableRangeOnly) {\n            this.viewOptions.draggableRange = true;\n        }\n        this.viewOptions.showTicks = this.viewOptions.showTicks ||\n            this.viewOptions.showTicksValues ||\n            !ValueHelper.isNullOrUndefined(this.viewOptions.ticksArray);\n        if (this.viewOptions.showTicks &&\n            (!ValueHelper.isNullOrUndefined(this.viewOptions.tickStep) || !ValueHelper.isNullOrUndefined(this.viewOptions.ticksArray))) {\n            this.intermediateTicks = true;\n        }\n        this.viewOptions.showSelectionBar = this.viewOptions.showSelectionBar ||\n            this.viewOptions.showSelectionBarEnd ||\n            !ValueHelper.isNullOrUndefined(this.viewOptions.showSelectionBarFromValue);\n        if (!ValueHelper.isNullOrUndefined(this.viewOptions.stepsArray)) {\n            this.applyStepsArrayOptions();\n        }\n        else {\n            this.applyFloorCeilOptions();\n        }\n        if (ValueHelper.isNullOrUndefined(this.viewOptions.combineLabels)) {\n            this.viewOptions.combineLabels = (minValue, maxValue) => {\n                return minValue + ' - ' + maxValue;\n            };\n        }\n        if (this.viewOptions.logScale && this.viewOptions.floor === 0) {\n            throw Error('Can\\'t use floor=0 with logarithmic scale');\n        }\n    }\n    /**\n     * @return {?}\n     */\n    applyStepsArrayOptions() {\n        this.viewOptions.floor = 0;\n        this.viewOptions.ceil = this.viewOptions.stepsArray.length - 1;\n        this.viewOptions.step = 1;\n        if (ValueHelper.isNullOrUndefined(this.viewOptions.translate)) {\n            this.viewOptions.translate = (modelValue) => {\n                if (this.viewOptions.bindIndexForStepsArray) {\n                    return String(this.getStepValue(modelValue));\n                }\n                return String(modelValue);\n            };\n        }\n        this.viewOptions.getLegend = (index) => {\n            const /** @type {?} */ step = this.viewOptions.stepsArray[index];\n            return step.legend;\n        };\n    }\n    /**\n     * @return {?}\n     */\n    applyFloorCeilOptions() {\n        if (ValueHelper.isNullOrUndefined(this.viewOptions.step)) {\n            this.viewOptions.step = 1;\n        }\n        else {\n            this.viewOptions.step = +this.viewOptions.step;\n            if (this.viewOptions.step <= 0) {\n                this.viewOptions.step = 1;\n            }\n        }\n        if (ValueHelper.isNullOrUndefined(this.viewOptions.ceil) ||\n            ValueHelper.isNullOrUndefined(this.viewOptions.floor)) {\n            throw Error('floor and ceil options must be supplied');\n        }\n        this.viewOptions.ceil = +this.viewOptions.ceil;\n        this.viewOptions.floor = +this.viewOptions.floor;\n        if (ValueHelper.isNullOrUndefined(this.viewOptions.translate)) {\n            this.viewOptions.translate = (value) => String(value);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    resetSlider() {\n        this.manageElementsStyle();\n        this.addAccessibility();\n        this.updateCeilLabel();\n        this.updateFloorLabel();\n        this.unbindEvents();\n        this.manageEventsBindings();\n        this.updateDisabledState();\n        this.calculateViewDimensions();\n        this.refocusPointerIfNeeded();\n    }\n    /**\n     * @param {?} pointerType\n     * @return {?}\n     */\n    focusPointer(pointerType) {\n        // If not supplied, use min pointer as default\n        if (pointerType !== PointerType.Min && pointerType !== PointerType.Max) {\n            pointerType = PointerType.Min;\n        }\n        if (pointerType === PointerType.Min) {\n            this.minHandleElement.focus();\n        }\n        else if (this.range && pointerType === PointerType.Max) {\n            this.maxHandleElement.focus();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    refocusPointerIfNeeded() {\n        if (!ValueHelper.isNullOrUndefined(this.currentFocusPointer)) {\n            this.onPointerFocus(this.currentFocusPointer);\n            const /** @type {?} */ element = this.getPointerElement(this.currentFocusPointer);\n            element.focus();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    manageElementsStyle() {\n        this.updateScale();\n        this.floorLabelElement.setAlwaysHide(this.viewOptions.showTicksValues || this.viewOptions.hideLimitLabels);\n        this.ceilLabelElement.setAlwaysHide(this.viewOptions.showTicksValues || this.viewOptions.hideLimitLabels);\n        const /** @type {?} */ hideLabelsForTicks = this.viewOptions.showTicksValues && !this.intermediateTicks;\n        this.minHandleLabelElement.setAlwaysHide(hideLabelsForTicks || this.viewOptions.hidePointerLabels);\n        this.maxHandleLabelElement.setAlwaysHide(hideLabelsForTicks || !this.range || this.viewOptions.hidePointerLabels);\n        this.combinedLabelElement.setAlwaysHide(hideLabelsForTicks || !this.range || this.viewOptions.hidePointerLabels);\n        this.selectionBarElement.setAlwaysHide(!this.range && !this.viewOptions.showSelectionBar);\n        this.leftOuterSelectionBarElement.setAlwaysHide(!this.range || !this.viewOptions.showOuterSelectionBars);\n        this.rightOuterSelectionBarElement.setAlwaysHide(!this.range || !this.viewOptions.showOuterSelectionBars);\n        this.fullBarTransparentClass = this.range && this.viewOptions.showOuterSelectionBars;\n        this.selectionBarDraggableClass = this.viewOptions.draggableRange && !this.viewOptions.onlyBindHandles;\n        this.ticksUnderValuesClass = this.intermediateTicks && this.options.showTicksValues;\n        if (this.sliderElementVerticalClass !== this.viewOptions.vertical) {\n            this.updateVerticalState();\n            // The above change in host component class will not be applied until the end of this cycle\n            // However, functions calculating the slider position expect the slider to be already styled as vertical\n            // So as a workaround, we need to reset the slider once again to compute the correct values\n            setTimeout(() => { this.resetSlider(); });\n        }\n        // Changing animate class may interfere with slider reset/initialisation, so we should set it separately,\n        // after all is properly set up\n        if (this.sliderElementAnimateClass !== this.viewOptions.animate) {\n            setTimeout(() => { this.sliderElementAnimateClass = this.viewOptions.animate; });\n        }\n    }\n    /**\n     * @return {?}\n     */\n    manageEventsBindings() {\n        if (this.viewOptions.disabled || this.viewOptions.readOnly) {\n            this.unbindEvents();\n        }\n        else {\n            this.bindEvents();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    updateDisabledState() {\n        this.sliderElementDisabledAttr = this.viewOptions.disabled ? 'disabled' : null;\n    }\n    /**\n     * @return {?}\n     */\n    updateVerticalState() {\n        this.sliderElementVerticalClass = this.viewOptions.vertical;\n        for (const /** @type {?} */ element of this.getAllSliderElements()) {\n            // This is also called before ngAfterInit, so need to check that view child bindings work\n            if (!ValueHelper.isNullOrUndefined(element)) {\n                element.setVertical(this.viewOptions.vertical);\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    updateScale() {\n        for (const /** @type {?} */ element of this.getAllSliderElements()) {\n            element.setScale(this.viewOptions.scale);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    getAllSliderElements() {\n        return [this.leftOuterSelectionBarElement,\n            this.rightOuterSelectionBarElement,\n            this.fullBarElement,\n            this.selectionBarElement,\n            this.minHandleElement,\n            this.maxHandleElement,\n            this.floorLabelElement,\n            this.ceilLabelElement,\n            this.minHandleLabelElement,\n            this.maxHandleLabelElement,\n            this.combinedLabelElement,\n            this.ticksElement\n        ];\n    }\n    /**\n     * @return {?}\n     */\n    initHandles() {\n        this.updateLowHandle(this.valueToPosition(this.viewLowValue));\n        /*\n           the order here is important since the selection bar should be\n           updated after the high handle but before the combined label\n           */\n        if (this.range) {\n            this.updateHighHandle(this.valueToPosition(this.viewHighValue));\n        }\n        this.updateSelectionBar();\n        if (this.range) {\n            this.updateCombinedLabel();\n        }\n        this.updateTicksScale();\n    }\n    /**\n     * @return {?}\n     */\n    addAccessibility() {\n        this.updateAriaAttributes();\n        this.minHandleElement.role = 'slider';\n        if (this.viewOptions.keyboardSupport &&\n            !(this.viewOptions.readOnly || this.viewOptions.disabled)) {\n            this.minHandleElement.tabindex = '0';\n        }\n        else {\n            this.minHandleElement.tabindex = '';\n        }\n        if (this.viewOptions.vertical) {\n            this.minHandleElement.ariaOrientation = 'vertical';\n        }\n        if (!ValueHelper.isNullOrUndefined(this.viewOptions.ariaLabel)) {\n            this.minHandleElement.ariaLabel = this.viewOptions.ariaLabel;\n        }\n        else if (!ValueHelper.isNullOrUndefined(this.viewOptions.ariaLabelledBy)) {\n            this.minHandleElement.ariaLabelledBy = this.viewOptions.ariaLabelledBy;\n        }\n        if (this.range) {\n            this.maxHandleElement.role = 'slider';\n            if (this.viewOptions.keyboardSupport &&\n                !(this.viewOptions.readOnly || this.viewOptions.disabled)) {\n                this.maxHandleElement.tabindex = '0';\n            }\n            else {\n                this.maxHandleElement.tabindex = '';\n            }\n            this.maxHandleElement.ariaOrientation = this.viewOptions.vertical ? 'vertical' : 'horizontal';\n            if (!ValueHelper.isNullOrUndefined(this.viewOptions.ariaLabelHigh)) {\n                this.maxHandleElement.ariaLabel = this.viewOptions.ariaLabelHigh;\n            }\n            else if (!ValueHelper.isNullOrUndefined(this.viewOptions.ariaLabelledByHigh)) {\n                this.maxHandleElement.ariaLabelledBy = this.viewOptions.ariaLabelledByHigh;\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    updateAriaAttributes() {\n        this.minHandleElement.ariaValueNow = (+this.value).toString();\n        this.minHandleElement.ariaValueText = this.viewOptions.translate(+this.value, LabelType.Low);\n        this.minHandleElement.ariaValueMin = this.viewOptions.floor.toString();\n        this.minHandleElement.ariaValueMax = this.viewOptions.ceil.toString();\n        if (this.range) {\n            this.maxHandleElement.ariaValueNow = (+this.highValue).toString();\n            this.maxHandleElement.ariaValueText = this.viewOptions.translate(+this.highValue, LabelType.High);\n            this.maxHandleElement.ariaValueMin = this.viewOptions.floor.toString();\n            this.maxHandleElement.ariaValueMax = this.viewOptions.ceil.toString();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    calculateViewDimensions() {\n        if (!ValueHelper.isNullOrUndefined(this.viewOptions.handleDimension)) {\n            this.minHandleElement.setDimension(this.viewOptions.handleDimension);\n        }\n        else {\n            this.minHandleElement.calculateDimension();\n        }\n        const /** @type {?} */ handleWidth = this.minHandleElement.dimension;\n        this.handleHalfDimension = handleWidth / 2;\n        if (!ValueHelper.isNullOrUndefined(this.viewOptions.barDimension)) {\n            this.fullBarElement.setDimension(this.viewOptions.barDimension);\n        }\n        else {\n            this.fullBarElement.calculateDimension();\n        }\n        this.maxHandlePosition = this.fullBarElement.dimension - handleWidth;\n        if (this.initHasRun) {\n            this.updateFloorLabel();\n            this.updateCeilLabel();\n            this.initHandles();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    calculateViewDimensionsAndDetectChanges() {\n        this.calculateViewDimensions();\n        if (!this.isRefDestroyed()) {\n            this.changeDetectionRef.detectChanges();\n        }\n    }\n    /**\n     * If the slider reference is already destroyed\n     * @return {?} boolean - true if ref is destroyed\n     */\n    isRefDestroyed() {\n        return this.changeDetectionRef['destroyed'];\n    }\n    /**\n     * @return {?}\n     */\n    updateTicksScale() {\n        if (!this.viewOptions.showTicks) {\n            return;\n        }\n        const /** @type {?} */ ticksArray = !ValueHelper.isNullOrUndefined(this.viewOptions.ticksArray)\n            ? this.viewOptions.ticksArray\n            : this.getTicksArray();\n        const /** @type {?} */ translate = this.viewOptions.vertical ? 'translateY' : 'translateX';\n        if (this.viewOptions.rightToLeft) {\n            ticksArray.reverse();\n        }\n        const /** @type {?} */ newTicks = ticksArray.map((value) => {\n            let /** @type {?} */ position = this.valueToPosition(value);\n            if (this.viewOptions.vertical) {\n                position = this.maxHandlePosition - position;\n            }\n            const /** @type {?} */ translation = translate + '(' + Math.round(position) + 'px)';\n            const /** @type {?} */ tick = new Tick();\n            tick.selected = this.isTickSelected(value);\n            tick.style = {\n                '-webkit-transform': translation,\n                '-moz-transform': translation,\n                '-o-transform': translation,\n                '-ms-transform': translation,\n                transform: translation,\n            };\n            if (tick.selected && !ValueHelper.isNullOrUndefined(this.viewOptions.getSelectionBarColor)) {\n                tick.style['background-color'] = this.getSelectionBarColor();\n            }\n            if (!tick.selected && !ValueHelper.isNullOrUndefined(this.viewOptions.getTickColor)) {\n                tick.style['background-color'] = this.getTickColor(value);\n            }\n            if (!ValueHelper.isNullOrUndefined(this.viewOptions.ticksTooltip)) {\n                tick.tooltip = this.viewOptions.ticksTooltip(value);\n                tick.tooltipPlacement = this.viewOptions.vertical ? 'right' : 'top';\n            }\n            if (this.viewOptions.showTicksValues && (value % this.viewOptions.tickValueStep === 0)) {\n                tick.value = this.getDisplayValue(value, LabelType.TickValue);\n                if (!ValueHelper.isNullOrUndefined(this.viewOptions.ticksValuesTooltip)) {\n                    tick.valueTooltip = this.viewOptions.ticksValuesTooltip(value);\n                    tick.valueTooltipPlacement = this.viewOptions.vertical\n                        ? 'right'\n                        : 'top';\n                }\n            }\n            if (!ValueHelper.isNullOrUndefined(this.viewOptions.getLegend)) {\n                const /** @type {?} */ legend = this.viewOptions.getLegend(value);\n                if (!ValueHelper.isNullOrUndefined(legend)) {\n                    tick.legend = legend;\n                }\n            }\n            return tick;\n        });\n        // We should avoid re-creating the ticks array if possible\n        // This both improves performance and makes CSS animations work correctly\n        if (!ValueHelper.isNullOrUndefined(this.ticks) && this.ticks.length === newTicks.length) {\n            for (let /** @type {?} */ i = 0; i < newTicks.length; ++i) {\n                Object.assign(this.ticks[i], newTicks[i]);\n            }\n        }\n        else {\n            this.ticks = newTicks;\n        }\n        if (!this.isRefDestroyed()) {\n            this.changeDetectionRef.detectChanges();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    getTicksArray() {\n        const /** @type {?} */ step = (!ValueHelper.isNullOrUndefined(this.viewOptions.tickStep)) ? this.viewOptions.tickStep : this.viewOptions.step;\n        const /** @type {?} */ ticksArray = [];\n        for (let /** @type {?} */ value = this.viewOptions.floor; value <= this.viewOptions.ceil; value += step) {\n            ticksArray.push(value);\n        }\n        return ticksArray;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    isTickSelected(value) {\n        if (!this.range) {\n            if (!ValueHelper.isNullOrUndefined(this.viewOptions.showSelectionBarFromValue)) {\n                const /** @type {?} */ center = this.viewOptions.showSelectionBarFromValue;\n                if (this.viewLowValue > center &&\n                    value >= center &&\n                    value <= this.viewLowValue) {\n                    return true;\n                }\n                else if (this.viewLowValue < center &&\n                    value <= center &&\n                    value >= this.viewLowValue) {\n                    return true;\n                }\n            }\n            else if (this.viewOptions.showSelectionBarEnd) {\n                if (value >= this.viewLowValue) {\n                    return true;\n                }\n            }\n            else if (this.viewOptions.showSelectionBar && value <= this.viewLowValue) {\n                return true;\n            }\n        }\n        if (this.range && value >= this.viewLowValue && value <= this.viewHighValue) {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * @return {?}\n     */\n    updateFloorLabel() {\n        if (!this.floorLabelElement.alwaysHide) {\n            this.floorLabelElement.setValue(this.getDisplayValue(this.viewOptions.floor, LabelType.Floor));\n            this.floorLabelElement.calculateDimension();\n            const /** @type {?} */ position = this.viewOptions.rightToLeft\n                ? this.fullBarElement.dimension - this.floorLabelElement.dimension\n                : 0;\n            this.floorLabelElement.setPosition(position);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    updateCeilLabel() {\n        if (!this.ceilLabelElement.alwaysHide) {\n            this.ceilLabelElement.setValue(this.getDisplayValue(this.viewOptions.ceil, LabelType.Ceil));\n            this.ceilLabelElement.calculateDimension();\n            const /** @type {?} */ position = this.viewOptions.rightToLeft\n                ? 0\n                : this.fullBarElement.dimension - this.ceilLabelElement.dimension;\n            this.ceilLabelElement.setPosition(position);\n        }\n    }\n    /**\n     * @param {?} which\n     * @param {?} newPos\n     * @return {?}\n     */\n    updateHandles(which, newPos) {\n        if (which === PointerType.Min) {\n            this.updateLowHandle(newPos);\n        }\n        else if (which === PointerType.Max) {\n            this.updateHighHandle(newPos);\n        }\n        this.updateSelectionBar();\n        this.updateTicksScale();\n        if (this.range) {\n            this.updateCombinedLabel();\n        }\n    }\n    /**\n     * @param {?} labelType\n     * @param {?} newPos\n     * @return {?}\n     */\n    getHandleLabelPos(labelType, newPos) {\n        const /** @type {?} */ labelDimension = (labelType === PointerType.Min)\n            ? this.minHandleLabelElement.dimension\n            : this.maxHandleLabelElement.dimension;\n        const /** @type {?} */ nearHandlePos = newPos - labelDimension / 2 + this.handleHalfDimension;\n        const /** @type {?} */ endOfBarPos = this.fullBarElement.dimension - labelDimension;\n        if (!this.viewOptions.boundPointerLabels) {\n            return nearHandlePos;\n        }\n        if ((this.viewOptions.rightToLeft && labelType === PointerType.Min) ||\n            (!this.viewOptions.rightToLeft && labelType === PointerType.Max)) {\n            return Math.min(nearHandlePos, endOfBarPos);\n        }\n        else {\n            return Math.min(Math.max(nearHandlePos, 0), endOfBarPos);\n        }\n    }\n    /**\n     * @param {?} newPos\n     * @return {?}\n     */\n    updateLowHandle(newPos) {\n        this.minHandleElement.setPosition(newPos);\n        this.minHandleLabelElement.setValue(this.getDisplayValue(this.viewLowValue, LabelType.Low));\n        this.minHandleLabelElement.setPosition(this.getHandleLabelPos(PointerType.Min, newPos));\n        if (!ValueHelper.isNullOrUndefined(this.viewOptions.getPointerColor)) {\n            this.minPointerStyle = {\n                backgroundColor: this.getPointerColor(PointerType.Min),\n            };\n        }\n        if (this.viewOptions.autoHideLimitLabels) {\n            this.updateFloorAndCeilLabelsVisibility();\n        }\n    }\n    /**\n     * @param {?} newPos\n     * @return {?}\n     */\n    updateHighHandle(newPos) {\n        this.maxHandleElement.setPosition(newPos);\n        this.maxHandleLabelElement.setValue(this.getDisplayValue(this.viewHighValue, LabelType.High));\n        this.maxHandleLabelElement.setPosition(this.getHandleLabelPos(PointerType.Max, newPos));\n        if (!ValueHelper.isNullOrUndefined(this.viewOptions.getPointerColor)) {\n            this.maxPointerStyle = {\n                backgroundColor: this.getPointerColor(PointerType.Max),\n            };\n        }\n        if (this.viewOptions.autoHideLimitLabels) {\n            this.updateFloorAndCeilLabelsVisibility();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    updateFloorAndCeilLabelsVisibility() {\n        // Show based only on hideLimitLabels if pointer labels are hidden\n        if (this.viewOptions.hidePointerLabels) {\n            return;\n        }\n        let /** @type {?} */ floorLabelHidden = false;\n        let /** @type {?} */ ceilLabelHidden = false;\n        const /** @type {?} */ isMinLabelAtFloor = this.isLabelBelowFloorLabel(this.minHandleLabelElement);\n        const /** @type {?} */ isMinLabelAtCeil = this.isLabelAboveCeilLabel(this.minHandleLabelElement);\n        const /** @type {?} */ isMaxLabelAtCeil = this.isLabelAboveCeilLabel(this.maxHandleLabelElement);\n        const /** @type {?} */ isCombinedLabelAtFloor = this.isLabelBelowFloorLabel(this.combinedLabelElement);\n        const /** @type {?} */ isCombinedLabelAtCeil = this.isLabelAboveCeilLabel(this.combinedLabelElement);\n        if (isMinLabelAtFloor) {\n            floorLabelHidden = true;\n            this.floorLabelElement.hide();\n        }\n        else {\n            floorLabelHidden = false;\n            this.floorLabelElement.show();\n        }\n        if (isMinLabelAtCeil) {\n            ceilLabelHidden = true;\n            this.ceilLabelElement.hide();\n        }\n        else {\n            ceilLabelHidden = false;\n            this.ceilLabelElement.show();\n        }\n        if (this.range) {\n            const /** @type {?} */ hideCeil = this.combinedLabelElement.isVisible() ? isCombinedLabelAtCeil : isMaxLabelAtCeil;\n            const /** @type {?} */ hideFloor = this.combinedLabelElement.isVisible() ? isCombinedLabelAtFloor : isMinLabelAtFloor;\n            if (hideCeil) {\n                this.ceilLabelElement.hide();\n            }\n            else if (!ceilLabelHidden) {\n                this.ceilLabelElement.show();\n            }\n            // Hide or show floor label\n            if (hideFloor) {\n                this.floorLabelElement.hide();\n            }\n            else if (!floorLabelHidden) {\n                this.floorLabelElement.show();\n            }\n        }\n    }\n    /**\n     * @param {?} label\n     * @return {?}\n     */\n    isLabelBelowFloorLabel(label) {\n        const /** @type {?} */ pos = label.position;\n        const /** @type {?} */ dim = label.dimension;\n        const /** @type {?} */ floorPos = this.floorLabelElement.position;\n        const /** @type {?} */ floorDim = this.floorLabelElement.dimension;\n        return this.viewOptions.rightToLeft\n            ? pos + dim >= floorPos - 2\n            : pos <= floorPos + floorDim + 2;\n    }\n    /**\n     * @param {?} label\n     * @return {?}\n     */\n    isLabelAboveCeilLabel(label) {\n        const /** @type {?} */ pos = label.position;\n        const /** @type {?} */ dim = label.dimension;\n        const /** @type {?} */ ceilPos = this.ceilLabelElement.position;\n        const /** @type {?} */ ceilDim = this.ceilLabelElement.dimension;\n        return this.viewOptions.rightToLeft\n            ? pos <= ceilPos + ceilDim + 2\n            : pos + dim >= ceilPos - 2;\n    }\n    /**\n     * @return {?}\n     */\n    updateSelectionBar() {\n        let /** @type {?} */ position = 0;\n        let /** @type {?} */ dimension = 0;\n        const /** @type {?} */ isSelectionBarFromRight = this.viewOptions.rightToLeft\n            ? !this.viewOptions.showSelectionBarEnd\n            : this.viewOptions.showSelectionBarEnd;\n        const /** @type {?} */ positionForRange = this.viewOptions.rightToLeft\n            ? this.maxHandleElement.position + this.handleHalfDimension\n            : this.minHandleElement.position + this.handleHalfDimension;\n        if (this.range) {\n            dimension = Math.abs(this.maxHandleElement.position - this.minHandleElement.position);\n            position = positionForRange;\n        }\n        else {\n            if (!ValueHelper.isNullOrUndefined(this.viewOptions.showSelectionBarFromValue)) {\n                const /** @type {?} */ center = this.viewOptions.showSelectionBarFromValue;\n                const /** @type {?} */ centerPosition = this.valueToPosition(center);\n                const /** @type {?} */ isModelGreaterThanCenter = this.viewOptions.rightToLeft\n                    ? this.viewLowValue <= center\n                    : this.viewLowValue > center;\n                if (isModelGreaterThanCenter) {\n                    dimension = this.minHandleElement.position - centerPosition;\n                    position = centerPosition + this.handleHalfDimension;\n                }\n                else {\n                    dimension = centerPosition - this.minHandleElement.position;\n                    position = this.minHandleElement.position + this.handleHalfDimension;\n                }\n            }\n            else if (isSelectionBarFromRight) {\n                dimension = Math.ceil(Math.abs(this.maxHandlePosition - this.minHandleElement.position) + this.handleHalfDimension);\n                position = Math.floor(this.minHandleElement.position + this.handleHalfDimension);\n            }\n            else {\n                dimension = this.minHandleElement.position + this.handleHalfDimension;\n                position = 0;\n            }\n        }\n        this.selectionBarElement.setDimension(dimension);\n        this.selectionBarElement.setPosition(position);\n        if (this.range && this.viewOptions.showOuterSelectionBars) {\n            if (this.viewOptions.rightToLeft) {\n                this.rightOuterSelectionBarElement.setDimension(position);\n                this.rightOuterSelectionBarElement.setPosition(0);\n                this.fullBarElement.calculateDimension();\n                this.leftOuterSelectionBarElement.setDimension(this.fullBarElement.dimension - (position + dimension));\n                this.leftOuterSelectionBarElement.setPosition(position + dimension);\n            }\n            else {\n                this.leftOuterSelectionBarElement.setDimension(position);\n                this.leftOuterSelectionBarElement.setPosition(0);\n                this.fullBarElement.calculateDimension();\n                this.rightOuterSelectionBarElement.setDimension(this.fullBarElement.dimension - (position + dimension));\n                this.rightOuterSelectionBarElement.setPosition(position + dimension);\n            }\n        }\n        if (!ValueHelper.isNullOrUndefined(this.viewOptions.getSelectionBarColor)) {\n            const /** @type {?} */ color = this.getSelectionBarColor();\n            this.barStyle = {\n                backgroundColor: color,\n            };\n        }\n        else if (!ValueHelper.isNullOrUndefined(this.viewOptions.selectionBarGradient)) {\n            const /** @type {?} */ offset = (!ValueHelper.isNullOrUndefined(this.viewOptions.showSelectionBarFromValue))\n                ? this.valueToPosition(this.viewOptions.showSelectionBarFromValue)\n                : 0;\n            const /** @type {?} */ reversed = (offset - position > 0 && !isSelectionBarFromRight) || (offset - position <= 0 && isSelectionBarFromRight);\n            const /** @type {?} */ direction = this.viewOptions.vertical\n                ? reversed ? 'bottom' : 'top'\n                : reversed ? 'left' : 'right';\n            this.barStyle = {\n                backgroundImage: 'linear-gradient(to ' +\n                    direction +\n                    ', ' +\n                    this.viewOptions.selectionBarGradient.from +\n                    ' 0%,' +\n                    this.viewOptions.selectionBarGradient.to +\n                    ' 100%)',\n            };\n            if (this.viewOptions.vertical) {\n                this.barStyle.backgroundPosition =\n                    'center ' +\n                        (offset +\n                            dimension +\n                            position +\n                            (reversed ? -this.handleHalfDimension : 0)) +\n                        'px';\n                this.barStyle.backgroundSize =\n                    '100% ' + (this.fullBarElement.dimension - this.handleHalfDimension) + 'px';\n            }\n            else {\n                this.barStyle.backgroundPosition =\n                    offset -\n                        position +\n                        (reversed ? this.handleHalfDimension : 0) +\n                        'px center';\n                this.barStyle.backgroundSize =\n                    this.fullBarElement.dimension - this.handleHalfDimension + 'px 100%';\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    getSelectionBarColor() {\n        if (this.range) {\n            return this.viewOptions.getSelectionBarColor(this.value, this.highValue);\n        }\n        return this.viewOptions.getSelectionBarColor(this.value);\n    }\n    /**\n     * @param {?} pointerType\n     * @return {?}\n     */\n    getPointerColor(pointerType) {\n        if (pointerType === PointerType.Max) {\n            return this.viewOptions.getPointerColor(this.highValue, pointerType);\n        }\n        return this.viewOptions.getPointerColor(this.value, pointerType);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    getTickColor(value) {\n        return this.viewOptions.getTickColor(value);\n    }\n    /**\n     * @return {?}\n     */\n    updateCombinedLabel() {\n        let /** @type {?} */ isLabelOverlap = null;\n        if (this.viewOptions.rightToLeft) {\n            isLabelOverlap =\n                this.minHandleLabelElement.position - this.minHandleLabelElement.dimension - 10 <= this.maxHandleLabelElement.position;\n        }\n        else {\n            isLabelOverlap =\n                this.minHandleLabelElement.position + this.minHandleLabelElement.dimension + 10 >= this.maxHandleLabelElement.position;\n        }\n        if (isLabelOverlap) {\n            const /** @type {?} */ lowDisplayValue = this.getDisplayValue(this.viewLowValue, LabelType.Low);\n            const /** @type {?} */ highDisplayValue = this.getDisplayValue(this.viewHighValue, LabelType.High);\n            const /** @type {?} */ combinedLabelValue = this.viewOptions.rightToLeft\n                ? this.viewOptions.combineLabels(highDisplayValue, lowDisplayValue)\n                : this.viewOptions.combineLabels(lowDisplayValue, highDisplayValue);\n            this.combinedLabelElement.setValue(combinedLabelValue);\n            const /** @type {?} */ pos = this.viewOptions.boundPointerLabels\n                ? Math.min(Math.max(this.selectionBarElement.position +\n                    this.selectionBarElement.dimension / 2 -\n                    this.combinedLabelElement.dimension / 2, 0), this.fullBarElement.dimension - this.combinedLabelElement.dimension)\n                : this.selectionBarElement.position + this.selectionBarElement.dimension / 2 - this.combinedLabelElement.dimension / 2;\n            this.combinedLabelElement.setPosition(pos);\n            this.minHandleLabelElement.hide();\n            this.maxHandleLabelElement.hide();\n            this.combinedLabelElement.show();\n        }\n        else {\n            this.updateHighHandle(this.valueToPosition(this.viewHighValue));\n            this.updateLowHandle(this.valueToPosition(this.viewLowValue));\n            this.maxHandleLabelElement.show();\n            this.minHandleLabelElement.show();\n            this.combinedLabelElement.hide();\n        }\n        if (this.viewOptions.autoHideLimitLabels) {\n            this.updateFloorAndCeilLabelsVisibility();\n        }\n    }\n    /**\n     * @param {?} value\n     * @param {?} which\n     * @return {?}\n     */\n    getDisplayValue(value, which) {\n        if (!ValueHelper.isNullOrUndefined(this.viewOptions.stepsArray) && !this.viewOptions.bindIndexForStepsArray) {\n            value = this.getStepValue(value);\n        }\n        return this.viewOptions.translate(value, which);\n    }\n    /**\n     * @param {?} value\n     * @param {?=} customStep\n     * @return {?}\n     */\n    roundStep(value, customStep) {\n        const /** @type {?} */ step = !ValueHelper.isNullOrUndefined(customStep) ? customStep : this.viewOptions.step;\n        let /** @type {?} */ steppedDifference = MathHelper.roundToPrecisionLimit((value - this.viewOptions.floor) / step, this.viewOptions.precisionLimit);\n        steppedDifference = Math.round(steppedDifference) * step;\n        return MathHelper.roundToPrecisionLimit(this.viewOptions.floor + steppedDifference, this.viewOptions.precisionLimit);\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    valueToPosition(val) {\n        let /** @type {?} */ fn = ValueHelper.linearValueToPosition;\n        if (!ValueHelper.isNullOrUndefined(this.viewOptions.customValueToPosition)) {\n            fn = this.viewOptions.customValueToPosition;\n        }\n        else if (this.viewOptions.logScale) {\n            fn = ValueHelper.logValueToPosition;\n        }\n        val = MathHelper.clampToRange(val, this.viewOptions.floor, this.viewOptions.ceil);\n        let /** @type {?} */ percent = fn(val, this.viewOptions.floor, this.viewOptions.ceil);\n        if (ValueHelper.isNullOrUndefined(percent)) {\n            percent = 0;\n        }\n        if (this.viewOptions.rightToLeft) {\n            percent = 1 - percent;\n        }\n        return percent * this.maxHandlePosition;\n    }\n    /**\n     * @param {?} position\n     * @return {?}\n     */\n    positionToValue(position) {\n        let /** @type {?} */ percent = position / this.maxHandlePosition;\n        if (this.viewOptions.rightToLeft) {\n            percent = 1 - percent;\n        }\n        let /** @type {?} */ fn = ValueHelper.linearPositionToValue;\n        if (!ValueHelper.isNullOrUndefined(this.viewOptions.customPositionToValue)) {\n            fn = this.viewOptions.customPositionToValue;\n        }\n        else if (this.viewOptions.logScale) {\n            fn = ValueHelper.logPositionToValue;\n        }\n        const /** @type {?} */ value = fn(percent, this.viewOptions.floor, this.viewOptions.ceil);\n        return !ValueHelper.isNullOrUndefined(value) ? value : 0;\n    }\n    /**\n     * @param {?} event\n     * @param {?=} targetTouchId\n     * @return {?}\n     */\n    getEventXY(event, targetTouchId) {\n        if (event instanceof MouseEvent) {\n            return this.viewOptions.vertical ? event.clientY : event.clientX;\n        }\n        let /** @type {?} */ touchIndex = 0;\n        const /** @type {?} */ touches = event.touches;\n        if (!ValueHelper.isNullOrUndefined(targetTouchId)) {\n            for (let /** @type {?} */ i = 0; i < touches.length; i++) {\n                if (touches[i].identifier === targetTouchId) {\n                    touchIndex = i;\n                    break;\n                }\n            }\n        }\n        // Return the target touch or if the target touch was not found in the event\n        // returns the coordinates of the first touch\n        return this.viewOptions.vertical ? touches[touchIndex].clientY : touches[touchIndex].clientX;\n    }\n    /**\n     * @param {?} event\n     * @param {?=} targetTouchId\n     * @return {?}\n     */\n    getEventPosition(event, targetTouchId) {\n        const /** @type {?} */ sliderElementBoundingRect = this.elementRef.nativeElement.getBoundingClientRect();\n        const /** @type {?} */ sliderPos = this.viewOptions.vertical ?\n            sliderElementBoundingRect.bottom : sliderElementBoundingRect.left;\n        let /** @type {?} */ eventPos = 0;\n        if (this.viewOptions.vertical) {\n            eventPos = -this.getEventXY(event, targetTouchId) + sliderPos;\n        }\n        else {\n            eventPos = this.getEventXY(event, targetTouchId) - sliderPos;\n        }\n        return eventPos * this.viewOptions.scale - this.handleHalfDimension;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    getNearestHandle(event) {\n        if (!this.range) {\n            return PointerType.Min;\n        }\n        const /** @type {?} */ position = this.getEventPosition(event);\n        const /** @type {?} */ distanceMin = Math.abs(position - this.minHandleElement.position);\n        const /** @type {?} */ distanceMax = Math.abs(position - this.maxHandleElement.position);\n        if (distanceMin < distanceMax) {\n            return PointerType.Min;\n        }\n        else if (distanceMin > distanceMax) {\n            return PointerType.Max;\n        }\n        else if (!this.viewOptions.rightToLeft) {\n            // if event is at the same distance from min/max then if it's at left of minH, we return minH else maxH\n            return position < this.minHandleElement.position ? PointerType.Min : PointerType.Max;\n        }\n        // reverse in rtl\n        return position > this.minHandleElement.position ? PointerType.Min : PointerType.Max;\n    }\n    /**\n     * @return {?}\n     */\n    bindEvents() {\n        const /** @type {?} */ draggableRange = this.viewOptions.draggableRange;\n        if (!this.viewOptions.onlyBindHandles) {\n            this.selectionBarElement.on('mousedown', (event) => this.onBarStart(null, draggableRange, event, true, true, true));\n        }\n        if (this.viewOptions.draggableRangeOnly) {\n            this.minHandleElement.on('mousedown', (event) => this.onBarStart(PointerType.Min, draggableRange, event, true, true));\n            this.maxHandleElement.on('mousedown', (event) => this.onBarStart(PointerType.Max, draggableRange, event, true, true));\n        }\n        else {\n            this.minHandleElement.on('mousedown', (event) => this.onStart(PointerType.Min, event, true, true));\n            if (this.range) {\n                this.maxHandleElement.on('mousedown', (event) => this.onStart(PointerType.Max, event, true, true));\n            }\n            if (!this.viewOptions.onlyBindHandles) {\n                this.fullBarElement.on('mousedown', (event) => this.onStart(null, event, true, true, true));\n                this.ticksElement.on('mousedown', (event) => this.onStart(null, event, true, true, true, true));\n            }\n        }\n        if (!this.viewOptions.onlyBindHandles) {\n            this.selectionBarElement.onPassive('touchstart', (event) => this.onBarStart(null, draggableRange, event, true, true, true));\n        }\n        if (this.viewOptions.draggableRangeOnly) {\n            this.minHandleElement.onPassive('touchstart', (event) => this.onBarStart(PointerType.Min, draggableRange, event, true, true));\n            this.maxHandleElement.onPassive('touchstart', (event) => this.onBarStart(PointerType.Max, draggableRange, event, true, true));\n        }\n        else {\n            this.minHandleElement.onPassive('touchstart', (event) => this.onStart(PointerType.Min, event, true, true));\n            if (this.range) {\n                this.maxHandleElement.onPassive('touchstart', (event) => this.onStart(PointerType.Max, event, true, true));\n            }\n            if (!this.viewOptions.onlyBindHandles) {\n                this.fullBarElement.onPassive('touchstart', (event) => this.onStart(null, event, true, true, true));\n                this.ticksElement.onPassive('touchstart', (event) => this.onStart(null, event, false, false, true, true));\n            }\n        }\n        if (this.viewOptions.keyboardSupport) {\n            this.minHandleElement.on('focus', () => this.onPointerFocus(PointerType.Min));\n            if (this.range) {\n                this.maxHandleElement.on('focus', () => this.onPointerFocus(PointerType.Max));\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    unbindEvents() {\n        this.unsubscribeOnMove();\n        this.unsubscribeOnEnd();\n        for (const /** @type {?} */ element of this.getAllSliderElements()) {\n            if (!ValueHelper.isNullOrUndefined(element)) {\n                element.off();\n            }\n        }\n    }\n    /**\n     * @param {?} pointerType\n     * @param {?} draggableRange\n     * @param {?} event\n     * @param {?} bindMove\n     * @param {?} bindEnd\n     * @param {?=} simulateImmediateMove\n     * @param {?=} simulateImmediateEnd\n     * @return {?}\n     */\n    onBarStart(pointerType, draggableRange, event, bindMove, bindEnd, simulateImmediateMove, simulateImmediateEnd) {\n        if (draggableRange) {\n            this.onDragStart(pointerType, event, bindMove, bindEnd);\n        }\n        else {\n            this.onStart(pointerType, event, bindMove, bindEnd, simulateImmediateMove, simulateImmediateEnd);\n        }\n    }\n    /**\n     * @param {?} pointerType\n     * @param {?} event\n     * @param {?} bindMove\n     * @param {?} bindEnd\n     * @param {?=} simulateImmediateMove\n     * @param {?=} simulateImmediateEnd\n     * @return {?}\n     */\n    onStart(pointerType, event, bindMove, bindEnd, simulateImmediateMove, simulateImmediateEnd) {\n        event.stopPropagation();\n        // Only call preventDefault() when handling non-passive events (passive events don't need it)\n        if (!CompatibilityHelper.isTouchEvent(event) || !detectPassiveEvents.hasSupport) {\n            event.preventDefault();\n        }\n        // We have to do this in case the HTML where the sliders are on\n        // have been animated into view.\n        this.calculateViewDimensions();\n        if (ValueHelper.isNullOrUndefined(pointerType)) {\n            pointerType = this.getNearestHandle(event);\n        }\n        this.currentTrackingPointer = pointerType;\n        const /** @type {?} */ pointerElement = this.getPointerElement(pointerType);\n        pointerElement.active = true;\n        if (this.viewOptions.keyboardSupport) {\n            pointerElement.focus();\n        }\n        if (bindMove) {\n            this.unsubscribeOnMove();\n            const /** @type {?} */ onMoveCallback = (e) => this.dragging.active ? this.onDragMove(e) : this.onMove(e);\n            if (CompatibilityHelper.isTouchEvent(event)) {\n                this.onMoveEventListener = this.eventListenerHelper.attachPassiveEventListener(document, 'touchmove', onMoveCallback, this.viewOptions.touchEventsInterval);\n            }\n            else {\n                this.onMoveEventListener = this.eventListenerHelper.attachEventListener(document, 'mousemove', onMoveCallback, this.viewOptions.mouseEventsInterval);\n            }\n        }\n        if (bindEnd) {\n            this.unsubscribeOnEnd();\n            const /** @type {?} */ onEndCallback = (e) => this.onEnd(e);\n            if (CompatibilityHelper.isTouchEvent(event)) {\n                this.onEndEventListener = this.eventListenerHelper.attachPassiveEventListener(document, 'touchend', onEndCallback);\n            }\n            else {\n                this.onEndEventListener = this.eventListenerHelper.attachEventListener(document, 'mouseup', onEndCallback);\n            }\n        }\n        this.userChangeStart.emit(this.getChangeContext());\n        if (CompatibilityHelper.isTouchEvent(event) && !ValueHelper.isNullOrUndefined((/** @type {?} */ (event)).changedTouches)) {\n            // Store the touch identifier\n            if (ValueHelper.isNullOrUndefined(this.touchId)) {\n                this.touchId = (/** @type {?} */ (event)).changedTouches[0].identifier;\n            }\n        }\n        // Click events, either with mouse or touch gesture are weird. Sometimes they result in full\n        // start, move, end sequence, and sometimes, they don't - they only invoke mousedown\n        // As a workaround, we simulate the first move event and the end event if it's necessary\n        if (simulateImmediateMove) {\n            this.onMove(event, true);\n        }\n        if (simulateImmediateEnd) {\n            this.onEnd(event);\n        }\n    }\n    /**\n     * @param {?} event\n     * @param {?=} fromTick\n     * @return {?}\n     */\n    onMove(event, fromTick) {\n        let /** @type {?} */ touchForThisSlider = null;\n        if (CompatibilityHelper.isTouchEvent(event)) {\n            const /** @type {?} */ changedTouches = (/** @type {?} */ (event)).changedTouches;\n            for (let /** @type {?} */ i = 0; i < changedTouches.length; i++) {\n                if (changedTouches[i].identifier === this.touchId) {\n                    touchForThisSlider = changedTouches[i];\n                    break;\n                }\n            }\n            if (ValueHelper.isNullOrUndefined(touchForThisSlider)) {\n                return;\n            }\n        }\n        const /** @type {?} */ newPos = !ValueHelper.isNullOrUndefined(touchForThisSlider)\n            ? this.getEventPosition(event, touchForThisSlider.identifier)\n            : this.getEventPosition(event);\n        let /** @type {?} */ newValue;\n        const /** @type {?} */ ceilValue = this.viewOptions.rightToLeft\n            ? this.viewOptions.floor\n            : this.viewOptions.ceil;\n        const /** @type {?} */ floorValue = this.viewOptions.rightToLeft ? this.viewOptions.ceil : this.viewOptions.floor;\n        if (newPos <= 0) {\n            newValue = floorValue;\n        }\n        else if (newPos >= this.maxHandlePosition) {\n            newValue = ceilValue;\n        }\n        else {\n            newValue = this.positionToValue(newPos);\n            if (fromTick && !ValueHelper.isNullOrUndefined(this.viewOptions.tickStep)) {\n                newValue = this.roundStep(newValue, this.viewOptions.tickStep);\n            }\n            else {\n                newValue = this.roundStep(newValue);\n            }\n        }\n        this.positionTrackingHandle(newValue);\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    onEnd(event) {\n        if (CompatibilityHelper.isTouchEvent(event)) {\n            const /** @type {?} */ changedTouches = (/** @type {?} */ (event)).changedTouches;\n            if (changedTouches[0].identifier !== this.touchId) {\n                return;\n            }\n        }\n        this.touchId = null;\n        if (!this.viewOptions.keyboardSupport) {\n            this.minHandleElement.active = false;\n            this.maxHandleElement.active = false;\n            this.currentTrackingPointer = null;\n        }\n        this.dragging.active = false;\n        this.unsubscribeOnMove();\n        this.unsubscribeOnEnd();\n        this.userChangeEnd.emit(this.getChangeContext());\n    }\n    /**\n     * @param {?} pointerType\n     * @return {?}\n     */\n    onPointerFocus(pointerType) {\n        const /** @type {?} */ pointerElement = this.getPointerElement(pointerType);\n        pointerElement.on('blur', () => this.onPointerBlur(pointerElement));\n        pointerElement.on('keydown', (event) => this.onKeyboardEvent(event));\n        pointerElement.on('keyup', () => this.onKeyUp());\n        pointerElement.active = true;\n        this.currentTrackingPointer = pointerType;\n        this.currentFocusPointer = pointerType;\n        this.firstKeyDown = true;\n    }\n    /**\n     * @return {?}\n     */\n    onKeyUp() {\n        this.firstKeyDown = true;\n        this.userChangeEnd.emit(this.getChangeContext());\n    }\n    /**\n     * @param {?} pointer\n     * @return {?}\n     */\n    onPointerBlur(pointer) {\n        pointer.off('blur');\n        pointer.off('keydown');\n        pointer.off('keyup');\n        pointer.active = false;\n        if (ValueHelper.isNullOrUndefined(this.touchId)) {\n            this.currentTrackingPointer = null;\n            this.currentFocusPointer = null;\n        }\n    }\n    /**\n     * @param {?} currentValue\n     * @return {?}\n     */\n    getKeyActions(currentValue) {\n        const /** @type {?} */ valueRange = this.viewOptions.ceil - this.viewOptions.floor;\n        let /** @type {?} */ increaseStep = currentValue + this.viewOptions.step;\n        let /** @type {?} */ decreaseStep = currentValue - this.viewOptions.step;\n        let /** @type {?} */ increasePage = currentValue + valueRange / 10;\n        let /** @type {?} */ decreasePage = currentValue - valueRange / 10;\n        if (this.viewOptions.reversedControls) {\n            increaseStep = currentValue - this.viewOptions.step;\n            decreaseStep = currentValue + this.viewOptions.step;\n            increasePage = currentValue - valueRange / 10;\n            decreasePage = currentValue + valueRange / 10;\n        }\n        // Left to right default actions\n        const /** @type {?} */ actions = {\n            UP: increaseStep,\n            DOWN: decreaseStep,\n            LEFT: decreaseStep,\n            RIGHT: increaseStep,\n            PAGEUP: increasePage,\n            PAGEDOWN: decreasePage,\n            HOME: this.viewOptions.reversedControls ? this.viewOptions.ceil : this.viewOptions.floor,\n            END: this.viewOptions.reversedControls ? this.viewOptions.floor : this.viewOptions.ceil,\n        };\n        // right to left means swapping right and left arrows\n        if (this.viewOptions.rightToLeft) {\n            actions[\"LEFT\"] = increaseStep;\n            actions[\"RIGHT\"] = decreaseStep;\n            // right to left and vertical means we also swap up and down\n            if (this.viewOptions.vertical) {\n                actions[\"UP\"] = decreaseStep;\n                actions[\"DOWN\"] = increaseStep;\n            }\n        }\n        return actions;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    onKeyboardEvent(event) {\n        const /** @type {?} */ currentValue = this.getCurrentTrackingValue();\n        const /** @type {?} */ keyCode = !ValueHelper.isNullOrUndefined(event.keyCode)\n            ? event.keyCode\n            : event.which;\n        const /** @type {?} */ keys = {\n            38: 'UP',\n            40: 'DOWN',\n            37: 'LEFT',\n            39: 'RIGHT',\n            33: 'PAGEUP',\n            34: 'PAGEDOWN',\n            36: 'HOME',\n            35: 'END',\n        };\n        const /** @type {?} */ actions = this.getKeyActions(currentValue);\n        const /** @type {?} */ key = keys[keyCode];\n        const /** @type {?} */ action = actions[key];\n        if (ValueHelper.isNullOrUndefined(action) || ValueHelper.isNullOrUndefined(this.currentTrackingPointer)) {\n            return;\n        }\n        event.preventDefault();\n        if (this.firstKeyDown) {\n            this.firstKeyDown = false;\n            this.userChangeStart.emit(this.getChangeContext());\n        }\n        const /** @type {?} */ actionValue = MathHelper.clampToRange(action, this.viewOptions.floor, this.viewOptions.ceil);\n        const /** @type {?} */ newValue = this.roundStep(actionValue);\n        if (!this.viewOptions.draggableRangeOnly) {\n            this.positionTrackingHandle(newValue);\n        }\n        else {\n            const /** @type {?} */ difference = this.viewHighValue - this.viewLowValue;\n            let /** @type {?} */ newMinValue;\n            let /** @type {?} */ newMaxValue;\n            if (this.currentTrackingPointer === PointerType.Min) {\n                newMinValue = newValue;\n                newMaxValue = newValue + difference;\n                if (newMaxValue > this.viewOptions.ceil) {\n                    newMaxValue = this.viewOptions.ceil;\n                    newMinValue = newMaxValue - difference;\n                }\n            }\n            else if (this.currentTrackingPointer === PointerType.Max) {\n                newMaxValue = newValue;\n                newMinValue = newValue - difference;\n                if (newMinValue < this.viewOptions.floor) {\n                    newMinValue = this.viewOptions.floor;\n                    newMaxValue = newMinValue + difference;\n                }\n            }\n            this.positionTrackingBar(newMinValue, newMaxValue);\n        }\n    }\n    /**\n     * @param {?} pointerType\n     * @param {?} event\n     * @param {?} bindMove\n     * @param {?} bindEnd\n     * @return {?}\n     */\n    onDragStart(pointerType, event, bindMove, bindEnd) {\n        const /** @type {?} */ position = this.getEventPosition(event);\n        this.dragging = new Dragging();\n        this.dragging.active = true;\n        this.dragging.value = this.positionToValue(position);\n        this.dragging.difference = this.viewHighValue - this.viewLowValue;\n        this.dragging.lowLimit = this.viewOptions.rightToLeft\n            ? this.minHandleElement.position - position\n            : position - this.minHandleElement.position;\n        this.dragging.highLimit = this.viewOptions.rightToLeft\n            ? position - this.maxHandleElement.position\n            : this.maxHandleElement.position - position;\n        this.onStart(pointerType, event, bindMove, bindEnd);\n    }\n    /**\n     * Get min value depending on whether the newPos is outOfBounds above or below the bar and rightToLeft\n     * @param {?} newPos\n     * @param {?} outOfBounds\n     * @param {?} isAbove\n     * @return {?}\n     */\n    getMinValue(newPos, outOfBounds, isAbove) {\n        const /** @type {?} */ isRTL = this.viewOptions.rightToLeft;\n        let /** @type {?} */ value = null;\n        if (outOfBounds) {\n            if (isAbove) {\n                value = isRTL\n                    ? this.viewOptions.floor\n                    : this.viewOptions.ceil - this.dragging.difference;\n            }\n            else {\n                value = isRTL\n                    ? this.viewOptions.ceil - this.dragging.difference\n                    : this.viewOptions.floor;\n            }\n        }\n        else {\n            value = isRTL\n                ? this.positionToValue(newPos + this.dragging.lowLimit)\n                : this.positionToValue(newPos - this.dragging.lowLimit);\n        }\n        return this.roundStep(value);\n    }\n    /**\n     * Get max value depending on whether the newPos is outOfBounds above or below the bar and rightToLeft\n     * @param {?} newPos\n     * @param {?} outOfBounds\n     * @param {?} isAbove\n     * @return {?}\n     */\n    getMaxValue(newPos, outOfBounds, isAbove) {\n        const /** @type {?} */ isRTL = this.viewOptions.rightToLeft;\n        let /** @type {?} */ value = null;\n        if (outOfBounds) {\n            if (isAbove) {\n                value = isRTL\n                    ? this.viewOptions.floor + this.dragging.difference\n                    : this.viewOptions.ceil;\n            }\n            else {\n                value = isRTL\n                    ? this.viewOptions.ceil\n                    : this.viewOptions.floor + this.dragging.difference;\n            }\n        }\n        else {\n            if (isRTL) {\n                value =\n                    this.positionToValue(newPos + this.dragging.lowLimit) +\n                        this.dragging.difference;\n            }\n            else {\n                value =\n                    this.positionToValue(newPos - this.dragging.lowLimit) +\n                        this.dragging.difference;\n            }\n        }\n        return this.roundStep(value);\n    }\n    /**\n     * @param {?=} event\n     * @return {?}\n     */\n    onDragMove(event) {\n        const /** @type {?} */ newPos = this.getEventPosition(event);\n        let /** @type {?} */ ceilLimit, /** @type {?} */\n        floorLimit, /** @type {?} */\n        floorHandleElement, /** @type {?} */\n        ceilHandleElement;\n        if (this.viewOptions.rightToLeft) {\n            ceilLimit = this.dragging.lowLimit;\n            floorLimit = this.dragging.highLimit;\n            floorHandleElement = this.maxHandleElement;\n            ceilHandleElement = this.minHandleElement;\n        }\n        else {\n            ceilLimit = this.dragging.highLimit;\n            floorLimit = this.dragging.lowLimit;\n            floorHandleElement = this.minHandleElement;\n            ceilHandleElement = this.maxHandleElement;\n        }\n        const /** @type {?} */ isUnderFloorLimit = (newPos <= floorLimit);\n        const /** @type {?} */ isOverCeilLimit = (newPos >= this.maxHandlePosition - ceilLimit);\n        let /** @type {?} */ newMinValue;\n        let /** @type {?} */ newMaxValue;\n        if (isUnderFloorLimit) {\n            if (floorHandleElement.position === 0) {\n                return;\n            }\n            newMinValue = this.getMinValue(newPos, true, false);\n            newMaxValue = this.getMaxValue(newPos, true, false);\n        }\n        else if (isOverCeilLimit) {\n            if (ceilHandleElement.position === this.maxHandlePosition) {\n                return;\n            }\n            newMaxValue = this.getMaxValue(newPos, true, true);\n            newMinValue = this.getMinValue(newPos, true, true);\n        }\n        else {\n            newMinValue = this.getMinValue(newPos, false, false);\n            newMaxValue = this.getMaxValue(newPos, false, false);\n        }\n        this.positionTrackingBar(newMinValue, newMaxValue);\n    }\n    /**\n     * @param {?} newMinValue\n     * @param {?} newMaxValue\n     * @return {?}\n     */\n    positionTrackingBar(newMinValue, newMaxValue) {\n        if (!ValueHelper.isNullOrUndefined(this.viewOptions.minLimit) &&\n            newMinValue < this.viewOptions.minLimit) {\n            newMinValue = this.viewOptions.minLimit;\n            newMaxValue = MathHelper.roundToPrecisionLimit(newMinValue + this.dragging.difference, this.viewOptions.precisionLimit);\n        }\n        if (!ValueHelper.isNullOrUndefined(this.viewOptions.maxLimit) &&\n            newMaxValue > this.viewOptions.maxLimit) {\n            newMaxValue = this.viewOptions.maxLimit;\n            newMinValue = MathHelper.roundToPrecisionLimit(newMaxValue - this.dragging.difference, this.viewOptions.precisionLimit);\n        }\n        this.viewLowValue = newMinValue;\n        this.viewHighValue = newMaxValue;\n        this.applyViewChange();\n        this.updateHandles(PointerType.Min, this.valueToPosition(newMinValue));\n        this.updateHandles(PointerType.Max, this.valueToPosition(newMaxValue));\n    }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    positionTrackingHandle(newValue) {\n        newValue = this.applyMinMaxLimit(newValue);\n        if (this.range) {\n            if (this.viewOptions.pushRange) {\n                newValue = this.applyPushRange(newValue);\n            }\n            else {\n                if (this.viewOptions.noSwitching) {\n                    if (this.currentTrackingPointer === PointerType.Min &&\n                        newValue > this.viewHighValue) {\n                        newValue = this.applyMinMaxRange(this.viewHighValue);\n                    }\n                    else if (this.currentTrackingPointer === PointerType.Max &&\n                        newValue < this.viewLowValue) {\n                        newValue = this.applyMinMaxRange(this.viewLowValue);\n                    }\n                }\n                newValue = this.applyMinMaxRange(newValue);\n                /* This is to check if we need to switch the min and max handles */\n                if (this.currentTrackingPointer === PointerType.Min && newValue > this.viewHighValue) {\n                    this.viewLowValue = this.viewHighValue;\n                    this.applyViewChange();\n                    this.updateHandles(PointerType.Min, this.maxHandleElement.position);\n                    this.updateAriaAttributes();\n                    this.currentTrackingPointer = PointerType.Max;\n                    this.minHandleElement.active = false;\n                    this.maxHandleElement.active = true;\n                    if (this.viewOptions.keyboardSupport) {\n                        this.maxHandleElement.focus();\n                    }\n                }\n                else if (this.currentTrackingPointer === PointerType.Max &&\n                    newValue < this.viewLowValue) {\n                    this.viewHighValue = this.viewLowValue;\n                    this.applyViewChange();\n                    this.updateHandles(PointerType.Max, this.minHandleElement.position);\n                    this.updateAriaAttributes();\n                    this.currentTrackingPointer = PointerType.Min;\n                    this.maxHandleElement.active = false;\n                    this.minHandleElement.active = true;\n                    if (this.viewOptions.keyboardSupport) {\n                        this.minHandleElement.focus();\n                    }\n                }\n            }\n        }\n        if (this.getCurrentTrackingValue() !== newValue) {\n            if (this.currentTrackingPointer === PointerType.Min) {\n                this.viewLowValue = newValue;\n                this.applyViewChange();\n            }\n            else if (this.currentTrackingPointer === PointerType.Max) {\n                this.viewHighValue = newValue;\n                this.applyViewChange();\n            }\n            this.updateHandles(this.currentTrackingPointer, this.valueToPosition(newValue));\n            this.updateAriaAttributes();\n        }\n    }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    applyMinMaxLimit(newValue) {\n        if (!ValueHelper.isNullOrUndefined(this.viewOptions.minLimit) && newValue < this.viewOptions.minLimit) {\n            return this.viewOptions.minLimit;\n        }\n        if (!ValueHelper.isNullOrUndefined(this.viewOptions.maxLimit) && newValue > this.viewOptions.maxLimit) {\n            return this.viewOptions.maxLimit;\n        }\n        return newValue;\n    }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    applyMinMaxRange(newValue) {\n        const /** @type {?} */ oppositeValue = (this.currentTrackingPointer === PointerType.Min)\n            ? this.viewHighValue\n            : this.viewLowValue;\n        const /** @type {?} */ difference = Math.abs(newValue - oppositeValue);\n        if (!ValueHelper.isNullOrUndefined(this.viewOptions.minRange)) {\n            if (difference < this.viewOptions.minRange) {\n                if (this.currentTrackingPointer === PointerType.Min) {\n                    return MathHelper.roundToPrecisionLimit(this.viewHighValue - this.viewOptions.minRange, this.viewOptions.precisionLimit);\n                }\n                else if (this.currentTrackingPointer === PointerType.Max) {\n                    return MathHelper.roundToPrecisionLimit(this.viewLowValue + this.viewOptions.minRange, this.viewOptions.precisionLimit);\n                }\n            }\n        }\n        if (!ValueHelper.isNullOrUndefined(this.viewOptions.maxRange)) {\n            if (difference > this.viewOptions.maxRange) {\n                if (this.currentTrackingPointer === PointerType.Min) {\n                    return MathHelper.roundToPrecisionLimit(this.viewHighValue - this.viewOptions.maxRange, this.viewOptions.precisionLimit);\n                }\n                else if (this.currentTrackingPointer === PointerType.Max) {\n                    return MathHelper.roundToPrecisionLimit(this.viewLowValue + this.viewOptions.maxRange, this.viewOptions.precisionLimit);\n                }\n            }\n        }\n        return newValue;\n    }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    applyPushRange(newValue) {\n        const /** @type {?} */ difference = (this.currentTrackingPointer === PointerType.Min)\n            ? this.viewHighValue - newValue\n            : newValue - this.viewLowValue;\n        const /** @type {?} */ minRange = (!ValueHelper.isNullOrUndefined(this.viewOptions.minRange))\n            ? this.viewOptions.minRange\n            : this.viewOptions.step;\n        const /** @type {?} */ maxRange = this.viewOptions.maxRange;\n        // if smaller than minRange\n        if (difference < minRange) {\n            if (this.currentTrackingPointer === PointerType.Min) {\n                this.viewHighValue = MathHelper.roundToPrecisionLimit(Math.min(newValue + minRange, this.viewOptions.ceil), this.viewOptions.precisionLimit);\n                newValue = MathHelper.roundToPrecisionLimit(this.viewHighValue - minRange, this.viewOptions.precisionLimit);\n                this.applyViewChange();\n                this.updateHandles(PointerType.Max, this.valueToPosition(this.viewHighValue));\n            }\n            else if (this.currentTrackingPointer === PointerType.Max) {\n                this.viewLowValue = MathHelper.roundToPrecisionLimit(Math.max(newValue - minRange, this.viewOptions.floor), this.viewOptions.precisionLimit);\n                newValue = MathHelper.roundToPrecisionLimit(this.viewLowValue + minRange, this.viewOptions.precisionLimit);\n                this.applyViewChange();\n                this.updateHandles(PointerType.Min, this.valueToPosition(this.viewLowValue));\n            }\n            this.updateAriaAttributes();\n        }\n        else if (!ValueHelper.isNullOrUndefined(maxRange) && difference > maxRange) {\n            // if greater than maxRange\n            if (this.currentTrackingPointer === PointerType.Min) {\n                this.viewHighValue = MathHelper.roundToPrecisionLimit(newValue + maxRange, this.viewOptions.precisionLimit);\n                this.applyViewChange();\n                this.updateHandles(PointerType.Max, this.valueToPosition(this.viewHighValue));\n            }\n            else if (this.currentTrackingPointer === PointerType.Max) {\n                this.viewLowValue = MathHelper.roundToPrecisionLimit(newValue - maxRange, this.viewOptions.precisionLimit);\n                this.applyViewChange();\n                this.updateHandles(PointerType.Min, this.valueToPosition(this.viewLowValue));\n            }\n            this.updateAriaAttributes();\n        }\n        return newValue;\n    }\n    /**\n     * @return {?}\n     */\n    getChangeContext() {\n        const /** @type {?} */ changeContext = new ChangeContext();\n        changeContext.pointerType = this.currentTrackingPointer;\n        changeContext.value = +this.value;\n        if (this.range) {\n            changeContext.highValue = +this.highValue;\n        }\n        return changeContext;\n    }\n}\nSliderComponent.ɵfac = function SliderComponent_Factory(t) { return new (t || SliderComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nSliderComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SliderComponent, selectors: [[\"ng5-slider\"]], contentQueries: function SliderComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, _c0, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    } }, viewQuery: function SliderComponent_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c1, 5, SliderElementDirective);\n        ɵngcc0.ɵɵviewQuery(_c2, 5, SliderElementDirective);\n        ɵngcc0.ɵɵviewQuery(_c3, 5, SliderElementDirective);\n        ɵngcc0.ɵɵviewQuery(_c4, 5, SliderElementDirective);\n        ɵngcc0.ɵɵviewQuery(_c5, 5, SliderHandleDirective);\n        ɵngcc0.ɵɵviewQuery(_c6, 5, SliderHandleDirective);\n        ɵngcc0.ɵɵviewQuery(_c7, 5, SliderLabelDirective);\n        ɵngcc0.ɵɵviewQuery(_c8, 5, SliderLabelDirective);\n        ɵngcc0.ɵɵviewQuery(_c9, 5, SliderLabelDirective);\n        ɵngcc0.ɵɵviewQuery(_c10, 5, SliderLabelDirective);\n        ɵngcc0.ɵɵviewQuery(_c11, 5, SliderLabelDirective);\n        ɵngcc0.ɵɵviewQuery(_c12, 5, SliderElementDirective);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.leftOuterSelectionBarElement = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.rightOuterSelectionBarElement = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.fullBarElement = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.selectionBarElement = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.minHandleElement = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.maxHandleElement = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.floorLabelElement = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.ceilLabelElement = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.minHandleLabelElement = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.maxHandleLabelElement = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.combinedLabelElement = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.ticksElement = _t.first);\n    } }, hostAttrs: [1, \"ng5-slider\"], hostVars: 5, hostBindings: function SliderComponent_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"resize\", function SliderComponent_resize_HostBindingHandler($event) { return ctx.onResize($event); }, false, ɵngcc0.ɵɵresolveWindow);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"disabled\", ctx.sliderElementDisabledAttr);\n        ɵngcc0.ɵɵclassProp(\"vertical\", ctx.sliderElementVerticalClass)(\"animate\", ctx.sliderElementAnimateClass);\n    } }, inputs: { value: \"value\", highValue: \"highValue\", options: \"options\", manualRefresh: \"manualRefresh\", triggerFocus: \"triggerFocus\" }, outputs: { valueChange: \"valueChange\", highValueChange: \"highValueChange\", userChangeStart: \"userChangeStart\", userChange: \"userChange\", userChangeEnd: \"userChangeEnd\" }, features: [ɵngcc0.ɵɵProvidersFeature([NG5_SLIDER_CONTROL_VALUE_ACCESSOR]), ɵngcc0.ɵɵNgOnChangesFeature], decls: 29, vars: 13, consts: [[\"ng5SliderElement\", \"\", 1, \"ng5-slider-span\", \"ng5-slider-bar-wrapper\", \"ng5-slider-left-out-selection\"], [\"leftOuterSelectionBar\", \"\"], [1, \"ng5-slider-span\", \"ng5-slider-bar\"], [\"ng5SliderElement\", \"\", 1, \"ng5-slider-span\", \"ng5-slider-bar-wrapper\", \"ng5-slider-right-out-selection\"], [\"rightOuterSelectionBar\", \"\"], [\"ng5SliderElement\", \"\", 1, \"ng5-slider-span\", \"ng5-slider-bar-wrapper\", \"ng5-slider-full-bar\"], [\"fullBar\", \"\"], [\"ng5SliderElement\", \"\", 1, \"ng5-slider-span\", \"ng5-slider-bar-wrapper\", \"ng5-slider-selection-bar\"], [\"selectionBar\", \"\"], [1, \"ng5-slider-span\", \"ng5-slider-bar\", \"ng5-slider-selection\", 3, \"ngStyle\"], [\"ng5SliderHandle\", \"\", 1, \"ng5-slider-span\", \"ng5-slider-pointer\", \"ng5-slider-pointer-min\", 3, \"ngStyle\"], [\"minHandle\", \"\"], [\"ng5SliderHandle\", \"\", 1, \"ng5-slider-span\", \"ng5-slider-pointer\", \"ng5-slider-pointer-max\", 3, \"ngStyle\"], [\"maxHandle\", \"\"], [\"ng5SliderLabel\", \"\", 1, \"ng5-slider-span\", \"ng5-slider-bubble\", \"ng5-slider-limit\", \"ng5-slider-floor\"], [\"floorLabel\", \"\"], [\"ng5SliderLabel\", \"\", 1, \"ng5-slider-span\", \"ng5-slider-bubble\", \"ng5-slider-limit\", \"ng5-slider-ceil\"], [\"ceilLabel\", \"\"], [\"ng5SliderLabel\", \"\", 1, \"ng5-slider-span\", \"ng5-slider-bubble\", \"ng5-slider-model-value\"], [\"minHandleLabel\", \"\"], [\"ng5SliderLabel\", \"\", 1, \"ng5-slider-span\", \"ng5-slider-bubble\", \"ng5-slider-model-high\"], [\"maxHandleLabel\", \"\"], [\"ng5SliderLabel\", \"\", 1, \"ng5-slider-span\", \"ng5-slider-bubble\", \"ng5-slider-combined\"], [\"combinedLabel\", \"\"], [\"ng5SliderElement\", \"\", 1, \"ng5-slider-ticks\", 3, \"hidden\"], [\"ticksElement\", \"\"], [\"class\", \"ng5-slider-tick\", 3, \"ngClass\", \"ngStyle\", 4, \"ngFor\", \"ngForOf\"], [1, \"ng5-slider-tick\", 3, \"ngClass\", \"ngStyle\"], [3, \"template\", \"tooltip\", \"placement\"], [\"class\", \"ng5-slider-span ng5-slider-tick-value\", 3, \"template\", \"tooltip\", \"placement\", \"content\", 4, \"ngIf\"], [\"class\", \"ng5-slider-span ng5-slider-tick-legend\", 3, \"innerHTML\", 4, \"ngIf\"], [1, \"ng5-slider-span\", \"ng5-slider-tick-value\", 3, \"template\", \"tooltip\", \"placement\", \"content\"], [1, \"ng5-slider-span\", \"ng5-slider-tick-legend\", 3, \"innerHTML\"]], template: function SliderComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"span\", 0, 1);\n        ɵngcc0.ɵɵelement(2, \"span\", 2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(3, \"span\", 3, 4);\n        ɵngcc0.ɵɵelement(5, \"span\", 2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(6, \"span\", 5, 6);\n        ɵngcc0.ɵɵelement(8, \"span\", 2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(9, \"span\", 7, 8);\n        ɵngcc0.ɵɵelement(11, \"span\", 9);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(12, \"span\", 10, 11);\n        ɵngcc0.ɵɵelement(14, \"span\", 12, 13);\n        ɵngcc0.ɵɵelement(16, \"span\", 14, 15);\n        ɵngcc0.ɵɵelement(18, \"span\", 16, 17);\n        ɵngcc0.ɵɵelement(20, \"span\", 18, 19);\n        ɵngcc0.ɵɵelement(22, \"span\", 20, 21);\n        ɵngcc0.ɵɵelement(24, \"span\", 22, 23);\n        ɵngcc0.ɵɵelementStart(26, \"span\", 24, 25);\n        ɵngcc0.ɵɵtemplate(28, SliderComponent_span_28_Template, 4, 9, \"span\", 26);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(6);\n        ɵngcc0.ɵɵclassProp(\"ng5-slider-transparent\", ctx.fullBarTransparentClass);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵclassProp(\"ng5-slider-draggable\", ctx.selectionBarDraggableClass);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx.barStyle);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx.minPointerStyle);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵstyleProp(\"display\", ctx.range ? \"inherit\" : \"none\");\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx.maxPointerStyle);\n        ɵngcc0.ɵɵadvance(12);\n        ɵngcc0.ɵɵclassProp(\"ng5-slider-ticks-values-under\", ctx.ticksUnderValuesClass);\n        ɵngcc0.ɵɵproperty(\"hidden\", !ctx.showTicks);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.ticks);\n    } }, directives: function () { return [SliderElementDirective, ɵngcc1.NgStyle, SliderHandleDirective, SliderLabelDirective, ɵngcc1.NgForOf, ɵngcc1.NgClass, TooltipWrapperComponent, ɵngcc1.NgIf]; }, styles: [\".ng5-slider{display:inline-block;position:relative;height:4px;width:100%;margin:35px 0 15px;vertical-align:middle;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-ms-touch-action:pan-y;touch-action:pan-y}  .ng5-slider.with-legend{margin-bottom:40px}  .ng5-slider[disabled]{cursor:not-allowed}  .ng5-slider[disabled] .ng5-slider-pointer{cursor:not-allowed;background-color:#d8e0f3}  .ng5-slider[disabled] .ng5-slider-draggable{cursor:not-allowed}  .ng5-slider[disabled] .ng5-slider-selection{background:#8b91a2}  .ng5-slider[disabled] .ng5-slider-tick{cursor:not-allowed}  .ng5-slider[disabled] .ng5-slider-tick.ng5-slider-selected{background:#8b91a2}  .ng5-slider .ng5-slider-span{white-space:nowrap;position:absolute;display:inline-block}  .ng5-slider .ng5-slider-base{width:100%;height:100%;padding:0}  .ng5-slider .ng5-slider-bar-wrapper{left:0;-webkit-box-sizing:border-box;box-sizing:border-box;margin-top:-16px;padding-top:16px;width:100%;height:32px;z-index:1}  .ng5-slider .ng5-slider-draggable{cursor:move}  .ng5-slider .ng5-slider-bar{left:0;width:100%;height:4px;z-index:1;background:#d8e0f3;border-radius:2px}  .ng5-slider .ng5-slider-bar-wrapper.ng5-slider-transparent .ng5-slider-bar{background:0 0}  .ng5-slider .ng5-slider-bar-wrapper.ng5-slider-left-out-selection .ng5-slider-bar{background:#df002d}  .ng5-slider .ng5-slider-bar-wrapper.ng5-slider-right-out-selection .ng5-slider-bar{background:#03a688}  .ng5-slider .ng5-slider-selection{z-index:2;background:#0db9f0;border-radius:2px}  .ng5-slider .ng5-slider-pointer{cursor:pointer;width:32px;height:32px;top:-14px;background-color:#0db9f0;z-index:3;border-radius:16px}  .ng5-slider .ng5-slider-pointer:after{content:'';width:8px;height:8px;position:absolute;top:12px;left:12px;border-radius:4px;background:#fff}  .ng5-slider .ng5-slider-pointer:hover:after{background-color:#fff}  .ng5-slider .ng5-slider-pointer.ng5-slider-active{z-index:4}  .ng5-slider .ng5-slider-pointer.ng5-slider-active:after{background-color:#451aff}  .ng5-slider .ng5-slider-bubble{cursor:default;bottom:16px;padding:1px 3px;color:#55637d;font-size:16px}  .ng5-slider .ng5-slider-bubble.ng5-slider-limit{color:#55637d}  .ng5-slider .ng5-slider-ticks{-webkit-box-sizing:border-box;box-sizing:border-box;width:100%;height:0;position:absolute;left:0;top:-3px;margin:0;z-index:1;list-style:none}  .ng5-slider .ng5-slider-ticks-values-under .ng5-slider-tick-value{top:auto;bottom:-36px}  .ng5-slider .ng5-slider-tick{text-align:center;cursor:pointer;width:10px;height:10px;background:#d8e0f3;border-radius:50%;position:absolute;top:0;left:0;margin-left:11px}  .ng5-slider .ng5-slider-tick.ng5-slider-selected{background:#0db9f0}  .ng5-slider .ng5-slider-tick-value{position:absolute;top:-34px;-webkit-transform:translate(-50%,0);transform:translate(-50%,0)}  .ng5-slider .ng5-slider-tick-legend{position:absolute;top:24px;-webkit-transform:translate(-50%,0);transform:translate(-50%,0);max-width:50px;white-space:normal}  .ng5-slider.vertical{position:relative;width:4px;height:100%;margin:0 20px;padding:0;vertical-align:baseline;-ms-touch-action:pan-x;touch-action:pan-x}  .ng5-slider.vertical .ng5-slider-base{width:100%;height:100%;padding:0}  .ng5-slider.vertical .ng5-slider-bar-wrapper{top:auto;left:0;margin:0 0 0 -16px;padding:0 0 0 16px;height:100%;width:32px}  .ng5-slider.vertical .ng5-slider-bar{bottom:0;left:auto;width:4px;height:100%}  .ng5-slider.vertical .ng5-slider-pointer{left:-14px!important;top:auto;bottom:0}  .ng5-slider.vertical .ng5-slider-bubble{left:16px!important;bottom:0}  .ng5-slider.vertical .ng5-slider-ticks{height:100%;width:0;left:-3px;top:0;z-index:1}  .ng5-slider.vertical .ng5-slider-tick{vertical-align:middle;margin-left:auto;margin-top:11px}  .ng5-slider.vertical .ng5-slider-tick-value{left:24px;top:auto;-webkit-transform:translate(0,-28%);transform:translate(0,-28%)}  .ng5-slider.vertical .ng5-slider-tick-legend{top:auto;right:24px;-webkit-transform:translate(0,-28%);transform:translate(0,-28%);max-width:none;white-space:nowrap}  .ng5-slider.vertical .ng5-slider-ticks-values-under .ng5-slider-tick-value{bottom:auto;left:auto;right:24px}  .ng5-slider *{-webkit-transition:none;transition:none}  .ng5-slider.animate .ng5-slider-bar-wrapper{-webkit-transition:all linear .3s;transition:all linear .3s}  .ng5-slider.animate .ng5-slider-selection{-webkit-transition:background-color linear .3s;transition:background-color linear .3s}  .ng5-slider.animate .ng5-slider-pointer{-webkit-transition:all linear .3s;transition:all linear .3s}  .ng5-slider.animate .ng5-slider-bubble{-webkit-transition:all linear .3s;transition:all linear .3s}  .ng5-slider.animate .ng5-slider-bubble.ng5-slider-limit{-webkit-transition:opacity linear .3s;transition:opacity linear .3s}  .ng5-slider.animate .ng5-slider-bubble.ng5-slider-combined{-webkit-transition:opacity linear .3s;transition:opacity linear .3s}  .ng5-slider.animate .ng5-slider-tick{-webkit-transition:background-color linear .3s;transition:background-color linear .3s}\"] });\n/** @nocollapse */\nSliderComponent.ctorParameters = () => [\n    { type: Renderer2, },\n    { type: ElementRef, },\n    { type: ChangeDetectorRef, },\n    { type: NgZone, },\n];\nSliderComponent.propDecorators = {\n    \"value\": [{ type: Input },],\n    \"valueChange\": [{ type: Output },],\n    \"highValue\": [{ type: Input },],\n    \"highValueChange\": [{ type: Output },],\n    \"options\": [{ type: Input },],\n    \"userChangeStart\": [{ type: Output },],\n    \"userChange\": [{ type: Output },],\n    \"userChangeEnd\": [{ type: Output },],\n    \"manualRefresh\": [{ type: Input },],\n    \"triggerFocus\": [{ type: Input },],\n    \"leftOuterSelectionBarElement\": [{ type: ViewChild, args: ['leftOuterSelectionBar', { read: SliderElementDirective },] },],\n    \"rightOuterSelectionBarElement\": [{ type: ViewChild, args: ['rightOuterSelectionBar', { read: SliderElementDirective },] },],\n    \"fullBarElement\": [{ type: ViewChild, args: ['fullBar', { read: SliderElementDirective },] },],\n    \"selectionBarElement\": [{ type: ViewChild, args: ['selectionBar', { read: SliderElementDirective },] },],\n    \"minHandleElement\": [{ type: ViewChild, args: ['minHandle', { read: SliderHandleDirective },] },],\n    \"maxHandleElement\": [{ type: ViewChild, args: ['maxHandle', { read: SliderHandleDirective },] },],\n    \"floorLabelElement\": [{ type: ViewChild, args: ['floorLabel', { read: SliderLabelDirective },] },],\n    \"ceilLabelElement\": [{ type: ViewChild, args: ['ceilLabel', { read: SliderLabelDirective },] },],\n    \"minHandleLabelElement\": [{ type: ViewChild, args: ['minHandleLabel', { read: SliderLabelDirective },] },],\n    \"maxHandleLabelElement\": [{ type: ViewChild, args: ['maxHandleLabel', { read: SliderLabelDirective },] },],\n    \"combinedLabelElement\": [{ type: ViewChild, args: ['combinedLabel', { read: SliderLabelDirective },] },],\n    \"ticksElement\": [{ type: ViewChild, args: ['ticksElement', { read: SliderElementDirective },] },],\n    \"tooltipTemplate\": [{ type: ContentChild, args: ['tooltipTemplate',] },],\n    \"sliderElementVerticalClass\": [{ type: HostBinding, args: ['class.vertical',] },],\n    \"sliderElementAnimateClass\": [{ type: HostBinding, args: ['class.animate',] },],\n    \"sliderElementDisabledAttr\": [{ type: HostBinding, args: ['attr.disabled',] },],\n    \"onResize\": [{ type: HostListener, args: ['window:resize', ['$event'],] },],\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SliderComponent, [{\n        type: Component,\n        args: [{\n                selector: 'ng5-slider',\n                template: `<!-- // 0 Left selection bar outside two handles -->\n<span ng5SliderElement #leftOuterSelectionBar class=\"ng5-slider-span ng5-slider-bar-wrapper ng5-slider-left-out-selection\">\n  <span class=\"ng5-slider-span ng5-slider-bar\"></span>\n</span>\n<!-- // 1 Right selection bar outside two handles -->\n<span ng5SliderElement #rightOuterSelectionBar class=\"ng5-slider-span ng5-slider-bar-wrapper ng5-slider-right-out-selection\">\n  <span class=\"ng5-slider-span ng5-slider-bar\"></span>\n</span>\n<!-- // 2 The whole slider bar -->\n<span ng5SliderElement #fullBar [class.ng5-slider-transparent]=\"fullBarTransparentClass\" class=\"ng5-slider-span ng5-slider-bar-wrapper ng5-slider-full-bar\">\n  <span class=\"ng5-slider-span ng5-slider-bar\"></span>\n</span>\n<!-- // 3 Selection bar between two handles -->\n<span ng5SliderElement #selectionBar [class.ng5-slider-draggable]=\"selectionBarDraggableClass\" class=\"ng5-slider-span ng5-slider-bar-wrapper ng5-slider-selection-bar\">\n  <span class=\"ng5-slider-span ng5-slider-bar ng5-slider-selection\" [ngStyle]=\"barStyle\"></span>\n</span>\n<!-- // 4 Low slider handle -->\n<span ng5SliderHandle #minHandle class=\"ng5-slider-span ng5-slider-pointer ng5-slider-pointer-min\" [ngStyle]=minPointerStyle></span>\n<!-- // 5 High slider handle -->\n<span ng5SliderHandle #maxHandle [style.display]=\"range ? 'inherit' : 'none'\" class=\"ng5-slider-span ng5-slider-pointer ng5-slider-pointer-max\" [ngStyle]=maxPointerStyle></span>\n<!-- // 6 Floor label -->\n<span ng5SliderLabel #floorLabel class=\"ng5-slider-span ng5-slider-bubble ng5-slider-limit ng5-slider-floor\"></span>\n<!-- // 7 Ceiling label -->\n<span ng5SliderLabel #ceilLabel class=\"ng5-slider-span ng5-slider-bubble ng5-slider-limit ng5-slider-ceil\"></span>\n<!-- // 8 Label above the low slider handle -->\n<span ng5SliderLabel #minHandleLabel class=\"ng5-slider-span ng5-slider-bubble ng5-slider-model-value\"></span>\n<!-- // 9 Label above the high slider handle -->\n<span ng5SliderLabel #maxHandleLabel class=\"ng5-slider-span ng5-slider-bubble ng5-slider-model-high\"></span>\n<!-- // 10 Combined range label when the slider handles are close ex. 15 - 17 -->\n<span ng5SliderLabel #combinedLabel class=\"ng5-slider-span ng5-slider-bubble ng5-slider-combined\"></span>\n<!-- // 11 The ticks -->\n<span ng5SliderElement #ticksElement [hidden]=\"!showTicks\" [class.ng5-slider-ticks-values-under]=\"ticksUnderValuesClass\" class=\"ng5-slider-ticks\">\n  <span *ngFor=\"let t of ticks\" class=\"ng5-slider-tick\" [ngClass]=\"{'ng5-slider-selected': t.selected}\" [ngStyle]=\"t.style\">\n    <ng5-slider-tooltip-wrapper [template]=\"tooltipTemplate\" [tooltip]=\"t.tooltip\" [placement]=\"t.tooltipPlacement\"></ng5-slider-tooltip-wrapper>\n    <ng5-slider-tooltip-wrapper *ngIf=\"t.value != null\" class=\"ng5-slider-span ng5-slider-tick-value\"\n        [template]=\"tooltipTemplate\" [tooltip]=\"t.valueTooltip\" [placement]=\"t.valueTooltipPlacement\" [content]=\"t.value\"></ng5-slider-tooltip-wrapper>\n    <span *ngIf=\"t.legend != null\" class=\"ng5-slider-span ng5-slider-tick-legend\" [innerHTML]=\"t.legend\"></span>\n  </span>\n</span>`,\n                styles: [`::ng-deep .ng5-slider{display:inline-block;position:relative;height:4px;width:100%;margin:35px 0 15px;vertical-align:middle;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-ms-touch-action:pan-y;touch-action:pan-y}::ng-deep .ng5-slider.with-legend{margin-bottom:40px}::ng-deep .ng5-slider[disabled]{cursor:not-allowed}::ng-deep .ng5-slider[disabled] .ng5-slider-pointer{cursor:not-allowed;background-color:#d8e0f3}::ng-deep .ng5-slider[disabled] .ng5-slider-draggable{cursor:not-allowed}::ng-deep .ng5-slider[disabled] .ng5-slider-selection{background:#8b91a2}::ng-deep .ng5-slider[disabled] .ng5-slider-tick{cursor:not-allowed}::ng-deep .ng5-slider[disabled] .ng5-slider-tick.ng5-slider-selected{background:#8b91a2}::ng-deep .ng5-slider .ng5-slider-span{white-space:nowrap;position:absolute;display:inline-block}::ng-deep .ng5-slider .ng5-slider-base{width:100%;height:100%;padding:0}::ng-deep .ng5-slider .ng5-slider-bar-wrapper{left:0;-webkit-box-sizing:border-box;box-sizing:border-box;margin-top:-16px;padding-top:16px;width:100%;height:32px;z-index:1}::ng-deep .ng5-slider .ng5-slider-draggable{cursor:move}::ng-deep .ng5-slider .ng5-slider-bar{left:0;width:100%;height:4px;z-index:1;background:#d8e0f3;border-radius:2px}::ng-deep .ng5-slider .ng5-slider-bar-wrapper.ng5-slider-transparent .ng5-slider-bar{background:0 0}::ng-deep .ng5-slider .ng5-slider-bar-wrapper.ng5-slider-left-out-selection .ng5-slider-bar{background:#df002d}::ng-deep .ng5-slider .ng5-slider-bar-wrapper.ng5-slider-right-out-selection .ng5-slider-bar{background:#03a688}::ng-deep .ng5-slider .ng5-slider-selection{z-index:2;background:#0db9f0;border-radius:2px}::ng-deep .ng5-slider .ng5-slider-pointer{cursor:pointer;width:32px;height:32px;top:-14px;background-color:#0db9f0;z-index:3;border-radius:16px}::ng-deep .ng5-slider .ng5-slider-pointer:after{content:'';width:8px;height:8px;position:absolute;top:12px;left:12px;border-radius:4px;background:#fff}::ng-deep .ng5-slider .ng5-slider-pointer:hover:after{background-color:#fff}::ng-deep .ng5-slider .ng5-slider-pointer.ng5-slider-active{z-index:4}::ng-deep .ng5-slider .ng5-slider-pointer.ng5-slider-active:after{background-color:#451aff}::ng-deep .ng5-slider .ng5-slider-bubble{cursor:default;bottom:16px;padding:1px 3px;color:#55637d;font-size:16px}::ng-deep .ng5-slider .ng5-slider-bubble.ng5-slider-limit{color:#55637d}::ng-deep .ng5-slider .ng5-slider-ticks{-webkit-box-sizing:border-box;box-sizing:border-box;width:100%;height:0;position:absolute;left:0;top:-3px;margin:0;z-index:1;list-style:none}::ng-deep .ng5-slider .ng5-slider-ticks-values-under .ng5-slider-tick-value{top:auto;bottom:-36px}::ng-deep .ng5-slider .ng5-slider-tick{text-align:center;cursor:pointer;width:10px;height:10px;background:#d8e0f3;border-radius:50%;position:absolute;top:0;left:0;margin-left:11px}::ng-deep .ng5-slider .ng5-slider-tick.ng5-slider-selected{background:#0db9f0}::ng-deep .ng5-slider .ng5-slider-tick-value{position:absolute;top:-34px;-webkit-transform:translate(-50%,0);transform:translate(-50%,0)}::ng-deep .ng5-slider .ng5-slider-tick-legend{position:absolute;top:24px;-webkit-transform:translate(-50%,0);transform:translate(-50%,0);max-width:50px;white-space:normal}::ng-deep .ng5-slider.vertical{position:relative;width:4px;height:100%;margin:0 20px;padding:0;vertical-align:baseline;-ms-touch-action:pan-x;touch-action:pan-x}::ng-deep .ng5-slider.vertical .ng5-slider-base{width:100%;height:100%;padding:0}::ng-deep .ng5-slider.vertical .ng5-slider-bar-wrapper{top:auto;left:0;margin:0 0 0 -16px;padding:0 0 0 16px;height:100%;width:32px}::ng-deep .ng5-slider.vertical .ng5-slider-bar{bottom:0;left:auto;width:4px;height:100%}::ng-deep .ng5-slider.vertical .ng5-slider-pointer{left:-14px!important;top:auto;bottom:0}::ng-deep .ng5-slider.vertical .ng5-slider-bubble{left:16px!important;bottom:0}::ng-deep .ng5-slider.vertical .ng5-slider-ticks{height:100%;width:0;left:-3px;top:0;z-index:1}::ng-deep .ng5-slider.vertical .ng5-slider-tick{vertical-align:middle;margin-left:auto;margin-top:11px}::ng-deep .ng5-slider.vertical .ng5-slider-tick-value{left:24px;top:auto;-webkit-transform:translate(0,-28%);transform:translate(0,-28%)}::ng-deep .ng5-slider.vertical .ng5-slider-tick-legend{top:auto;right:24px;-webkit-transform:translate(0,-28%);transform:translate(0,-28%);max-width:none;white-space:nowrap}::ng-deep .ng5-slider.vertical .ng5-slider-ticks-values-under .ng5-slider-tick-value{bottom:auto;left:auto;right:24px}::ng-deep .ng5-slider *{-webkit-transition:none;transition:none}::ng-deep .ng5-slider.animate .ng5-slider-bar-wrapper{-webkit-transition:all linear .3s;transition:all linear .3s}::ng-deep .ng5-slider.animate .ng5-slider-selection{-webkit-transition:background-color linear .3s;transition:background-color linear .3s}::ng-deep .ng5-slider.animate .ng5-slider-pointer{-webkit-transition:all linear .3s;transition:all linear .3s}::ng-deep .ng5-slider.animate .ng5-slider-bubble{-webkit-transition:all linear .3s;transition:all linear .3s}::ng-deep .ng5-slider.animate .ng5-slider-bubble.ng5-slider-limit{-webkit-transition:opacity linear .3s;transition:opacity linear .3s}::ng-deep .ng5-slider.animate .ng5-slider-bubble.ng5-slider-combined{-webkit-transition:opacity linear .3s;transition:opacity linear .3s}::ng-deep .ng5-slider.animate .ng5-slider-tick{-webkit-transition:background-color linear .3s;transition:background-color linear .3s}`],\n                host: { class: 'ng5-slider' },\n                providers: [NG5_SLIDER_CONTROL_VALUE_ACCESSOR]\n            }]\n    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.NgZone }]; }, { value: [{\n            type: Input\n        }], valueChange: [{\n            type: Output\n        }], highValue: [{\n            type: Input\n        }], highValueChange: [{\n            type: Output\n        }], options: [{\n            type: Input\n        }], userChangeStart: [{\n            type: Output\n        }], userChange: [{\n            type: Output\n        }], userChangeEnd: [{\n            type: Output\n        }], sliderElementVerticalClass: [{\n            type: HostBinding,\n            args: ['class.vertical']\n        }], sliderElementAnimateClass: [{\n            type: HostBinding,\n            args: ['class.animate']\n        }], sliderElementDisabledAttr: [{\n            type: HostBinding,\n            args: ['attr.disabled']\n        }], manualRefresh: [{\n            type: Input\n        }], triggerFocus: [{\n            type: Input\n        }], \n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    onResize: [{\n            type: HostListener,\n            args: ['window:resize', ['$event']]\n        }], leftOuterSelectionBarElement: [{\n            type: ViewChild,\n            args: ['leftOuterSelectionBar', { read: SliderElementDirective }]\n        }], rightOuterSelectionBarElement: [{\n            type: ViewChild,\n            args: ['rightOuterSelectionBar', { read: SliderElementDirective }]\n        }], fullBarElement: [{\n            type: ViewChild,\n            args: ['fullBar', { read: SliderElementDirective }]\n        }], selectionBarElement: [{\n            type: ViewChild,\n            args: ['selectionBar', { read: SliderElementDirective }]\n        }], minHandleElement: [{\n            type: ViewChild,\n            args: ['minHandle', { read: SliderHandleDirective }]\n        }], maxHandleElement: [{\n            type: ViewChild,\n            args: ['maxHandle', { read: SliderHandleDirective }]\n        }], floorLabelElement: [{\n            type: ViewChild,\n            args: ['floorLabel', { read: SliderLabelDirective }]\n        }], ceilLabelElement: [{\n            type: ViewChild,\n            args: ['ceilLabel', { read: SliderLabelDirective }]\n        }], minHandleLabelElement: [{\n            type: ViewChild,\n            args: ['minHandleLabel', { read: SliderLabelDirective }]\n        }], maxHandleLabelElement: [{\n            type: ViewChild,\n            args: ['maxHandleLabel', { read: SliderLabelDirective }]\n        }], combinedLabelElement: [{\n            type: ViewChild,\n            args: ['combinedLabel', { read: SliderLabelDirective }]\n        }], ticksElement: [{\n            type: ViewChild,\n            args: ['ticksElement', { read: SliderElementDirective }]\n        }], tooltipTemplate: [{\n            type: ContentChild,\n            args: ['tooltipTemplate']\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass TooltipWrapperComponent {\n}\nTooltipWrapperComponent.ɵfac = function TooltipWrapperComponent_Factory(t) { return new (t || TooltipWrapperComponent)(); };\nTooltipWrapperComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TooltipWrapperComponent, selectors: [[\"ng5-slider-tooltip-wrapper\"]], inputs: { template: \"template\", tooltip: \"tooltip\", placement: \"placement\", content: \"content\" }, decls: 2, vars: 2, consts: [[4, \"ngIf\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [1, \"ng5-slider-inner-tooltip\"]], template: function TooltipWrapperComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, TooltipWrapperComponent_ng_container_0_Template, 2, 6, \"ng-container\", 0);\n        ɵngcc0.ɵɵtemplate(1, TooltipWrapperComponent_ng_container_1_Template, 3, 3, \"ng-container\", 0);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.template);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.template);\n    } }, directives: [ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet], styles: [\".ng5-slider-inner-tooltip[_ngcontent-%COMP%]{height:100%}\"] });\n/** @nocollapse */\nTooltipWrapperComponent.ctorParameters = () => [];\nTooltipWrapperComponent.propDecorators = {\n    \"template\": [{ type: Input },],\n    \"tooltip\": [{ type: Input },],\n    \"placement\": [{ type: Input },],\n    \"content\": [{ type: Input },],\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TooltipWrapperComponent, [{\n        type: Component,\n        args: [{\n                selector: 'ng5-slider-tooltip-wrapper',\n                template: `<ng-container *ngIf=\"template\">\n  <ng-template *ngTemplateOutlet=\"template; context: {tooltip: tooltip, placement: placement, content: content}\"></ng-template>\n</ng-container>\n\n<ng-container *ngIf=\"!template\">\n  <div class=\"ng5-slider-inner-tooltip\" [attr.title]=\"tooltip\" [attr.data-tooltip-placement]=\"placement\">\n    {{content}}\n  </div>\n</ng-container>`,\n                styles: [`.ng5-slider-inner-tooltip{height:100%}`]\n            }]\n    }], null, { template: [{\n            type: Input\n        }], tooltip: [{\n            type: Input\n        }], placement: [{\n            type: Input\n        }], content: [{\n            type: Input\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Ng5Slider module\n *\n * The module exports the slider component\n */\nclass Ng5SliderModule {\n}\nNg5SliderModule.ɵfac = function Ng5SliderModule_Factory(t) { return new (t || Ng5SliderModule)(); };\nNg5SliderModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: Ng5SliderModule });\nNg5SliderModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[\n            CommonModule\n        ]] });\n/** @nocollapse */\nNg5SliderModule.ctorParameters = () => [];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Ng5SliderModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule\n                ],\n                declarations: [\n                    SliderComponent,\n                    SliderElementDirective,\n                    SliderHandleDirective,\n                    SliderLabelDirective,\n                    TooltipWrapperComponent\n                ],\n                exports: [\n                    SliderComponent\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(Ng5SliderModule, { declarations: function () { return [SliderComponent, SliderElementDirective, SliderHandleDirective, SliderLabelDirective, TooltipWrapperComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [SliderComponent]; } }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Ng5SliderModule, ChangeContext, PointerType, LabelType, Options, SliderElementDirective as ɵb, SliderHandleDirective as ɵc, SliderLabelDirective as ɵd, SliderComponent as ɵa, TooltipWrapperComponent as ɵe };\n\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('./Subject');\nvar Subscription_1 = require('./Subscription');\n/**\n * @class AsyncSubject<T>\n */\nvar AsyncSubject = (function (_super) {\n    __extends(AsyncSubject, _super);\n    function AsyncSubject() {\n        _super.apply(this, arguments);\n        this.value = null;\n        this.hasNext = false;\n        this.hasCompleted = false;\n    }\n    /** @deprecated internal use only */ AsyncSubject.prototype._subscribe = function (subscriber) {\n        if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription_1.Subscription.EMPTY;\n        }\n        else if (this.hasCompleted && this.hasNext) {\n            subscriber.next(this.value);\n            subscriber.complete();\n            return Subscription_1.Subscription.EMPTY;\n        }\n        return _super.prototype._subscribe.call(this, subscriber);\n    };\n    AsyncSubject.prototype.next = function (value) {\n        if (!this.hasCompleted) {\n            this.value = value;\n            this.hasNext = true;\n        }\n    };\n    AsyncSubject.prototype.error = function (error) {\n        if (!this.hasCompleted) {\n            _super.prototype.error.call(this, error);\n        }\n    };\n    AsyncSubject.prototype.complete = function () {\n        this.hasCompleted = true;\n        if (this.hasNext) {\n            _super.prototype.next.call(this, this.value);\n        }\n        _super.prototype.complete.call(this);\n    };\n    return AsyncSubject;\n}(Subject_1.Subject));\nexports.AsyncSubject = AsyncSubject;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('./Subject');\nvar ObjectUnsubscribedError_1 = require('./util/ObjectUnsubscribedError');\n/**\n * @class BehaviorSubject<T>\n */\nvar BehaviorSubject = (function (_super) {\n    __extends(BehaviorSubject, _super);\n    function BehaviorSubject(_value) {\n        _super.call(this);\n        this._value = _value;\n    }\n    Object.defineProperty(BehaviorSubject.prototype, \"value\", {\n        get: function () {\n            return this.getValue();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** @deprecated internal use only */ BehaviorSubject.prototype._subscribe = function (subscriber) {\n        var subscription = _super.prototype._subscribe.call(this, subscriber);\n        if (subscription && !subscription.closed) {\n            subscriber.next(this._value);\n        }\n        return subscription;\n    };\n    BehaviorSubject.prototype.getValue = function () {\n        if (this.hasError) {\n            throw this.thrownError;\n        }\n        else if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        else {\n            return this._value;\n        }\n    };\n    BehaviorSubject.prototype.next = function (value) {\n        _super.prototype.next.call(this, this._value = value);\n    };\n    return BehaviorSubject;\n}(Subject_1.Subject));\nexports.BehaviorSubject = BehaviorSubject;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('./Subscriber');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar InnerSubscriber = (function (_super) {\n    __extends(InnerSubscriber, _super);\n    function InnerSubscriber(parent, outerValue, outerIndex) {\n        _super.call(this);\n        this.parent = parent;\n        this.outerValue = outerValue;\n        this.outerIndex = outerIndex;\n        this.index = 0;\n    }\n    InnerSubscriber.prototype._next = function (value) {\n        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n    };\n    InnerSubscriber.prototype._error = function (error) {\n        this.parent.notifyError(error, this);\n        this.unsubscribe();\n    };\n    InnerSubscriber.prototype._complete = function () {\n        this.parent.notifyComplete(this);\n        this.unsubscribe();\n    };\n    return InnerSubscriber;\n}(Subscriber_1.Subscriber));\nexports.InnerSubscriber = InnerSubscriber;\n","\"use strict\";\nvar Observable_1 = require('./Observable');\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nvar Notification = (function () {\n    function Notification(kind, value, error) {\n        this.kind = kind;\n        this.value = value;\n        this.error = error;\n        this.hasValue = kind === 'N';\n    }\n    /**\n     * Delivers to the given `observer` the value wrapped by this Notification.\n     * @param {Observer} observer\n     * @return\n     */\n    Notification.prototype.observe = function (observer) {\n        switch (this.kind) {\n            case 'N':\n                return observer.next && observer.next(this.value);\n            case 'E':\n                return observer.error && observer.error(this.error);\n            case 'C':\n                return observer.complete && observer.complete();\n        }\n    };\n    /**\n     * Given some {@link Observer} callbacks, deliver the value represented by the\n     * current Notification to the correctly corresponding callback.\n     * @param {function(value: T): void} next An Observer `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    Notification.prototype.do = function (next, error, complete) {\n        var kind = this.kind;\n        switch (kind) {\n            case 'N':\n                return next && next(this.value);\n            case 'E':\n                return error && error(this.error);\n            case 'C':\n                return complete && complete();\n        }\n    };\n    /**\n     * Takes an Observer or its individual callback functions, and calls `observe`\n     * or `do` methods accordingly.\n     * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n     * the `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    Notification.prototype.accept = function (nextOrObserver, error, complete) {\n        if (nextOrObserver && typeof nextOrObserver.next === 'function') {\n            return this.observe(nextOrObserver);\n        }\n        else {\n            return this.do(nextOrObserver, error, complete);\n        }\n    };\n    /**\n     * Returns a simple Observable that just delivers the notification represented\n     * by this Notification instance.\n     * @return {any}\n     */\n    Notification.prototype.toObservable = function () {\n        var kind = this.kind;\n        switch (kind) {\n            case 'N':\n                return Observable_1.Observable.of(this.value);\n            case 'E':\n                return Observable_1.Observable.throw(this.error);\n            case 'C':\n                return Observable_1.Observable.empty();\n        }\n        throw new Error('unexpected notification kind value');\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `next` from a\n     * given value.\n     * @param {T} value The `next` value.\n     * @return {Notification<T>} The \"next\" Notification representing the\n     * argument.\n     */\n    Notification.createNext = function (value) {\n        if (typeof value !== 'undefined') {\n            return new Notification('N', value);\n        }\n        return Notification.undefinedValueNotification;\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `error` from a\n     * given error.\n     * @param {any} [err] The `error` error.\n     * @return {Notification<T>} The \"error\" Notification representing the\n     * argument.\n     */\n    Notification.createError = function (err) {\n        return new Notification('E', undefined, err);\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `complete`.\n     * @return {Notification<any>} The valueless \"complete\" Notification.\n     */\n    Notification.createComplete = function () {\n        return Notification.completeNotification;\n    };\n    Notification.completeNotification = new Notification('C');\n    Notification.undefinedValueNotification = new Notification('N', undefined);\n    return Notification;\n}());\nexports.Notification = Notification;\n","\"use strict\";\nvar root_1 = require('./util/root');\nvar toSubscriber_1 = require('./util/toSubscriber');\nvar observable_1 = require('./symbol/observable');\nvar pipe_1 = require('./util/pipe');\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nvar Observable = (function () {\n    /**\n     * @constructor\n     * @param {Function} subscribe the function that is called when the Observable is\n     * initially subscribed to. This function is given a Subscriber, to which new values\n     * can be `next`ed, or an `error` method can be called to raise an error, or\n     * `complete` can be called to notify of a successful completion.\n     */\n    function Observable(subscribe) {\n        this._isScalar = false;\n        if (subscribe) {\n            this._subscribe = subscribe;\n        }\n    }\n    /**\n     * Creates a new Observable, with this Observable as the source, and the passed\n     * operator defined as the new observable's operator.\n     * @method lift\n     * @param {Operator} operator the operator defining the operation to take on the observable\n     * @return {Observable} a new observable with the Operator applied\n     */\n    Observable.prototype.lift = function (operator) {\n        var observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    };\n    /**\n     * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n     *\n     * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n     *\n     * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n     * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n     * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n     * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n     * thought.\n     *\n     * Apart from starting the execution of an Observable, this method allows you to listen for values\n     * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n     * following ways.\n     *\n     * The first way is creating an object that implements {@link Observer} interface. It should have methods\n     * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n     * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n     * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n     * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n     * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n     * be left uncaught.\n     *\n     * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n     * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n     * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n     * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n     * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n     * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n     *\n     * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n     * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n     * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n     * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n     *\n     * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n     * It is an Observable itself that decides when these functions will be called. For example {@link of}\n     * by default emits all its values synchronously. Always check documentation for how given Observable\n     * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n     *\n     * @example <caption>Subscribe with an Observer</caption>\n     * const sumObserver = {\n     *   sum: 0,\n     *   next(value) {\n     *     console.log('Adding: ' + value);\n     *     this.sum = this.sum + value;\n     *   },\n     *   error() { // We actually could just remove this method,\n     *   },        // since we do not really care about errors right now.\n     *   complete() {\n     *     console.log('Sum equals: ' + this.sum);\n     *   }\n     * };\n     *\n     * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n     * .subscribe(sumObserver);\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Subscribe with functions</caption>\n     * let sum = 0;\n     *\n     * Rx.Observable.of(1, 2, 3)\n     * .subscribe(\n     *   function(value) {\n     *     console.log('Adding: ' + value);\n     *     sum = sum + value;\n     *   },\n     *   undefined,\n     *   function() {\n     *     console.log('Sum equals: ' + sum);\n     *   }\n     * );\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Cancel a subscription</caption>\n     * const subscription = Rx.Observable.interval(1000).subscribe(\n     *   num => console.log(num),\n     *   undefined,\n     *   () => console.log('completed!') // Will not be called, even\n     * );                                // when cancelling subscription\n     *\n     *\n     * setTimeout(() => {\n     *   subscription.unsubscribe();\n     *   console.log('unsubscribed!');\n     * }, 2500);\n     *\n     * // Logs:\n     * // 0 after 1s\n     * // 1 after 2s\n     * // \"unsubscribed!\" after 2.5s\n     *\n     *\n     * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n     *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n     *  Observable.\n     * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n     *  the error will be thrown as unhandled.\n     * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n     * @return {ISubscription} a subscription reference to the registered handlers\n     * @method subscribe\n     */\n    Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n        var operator = this.operator;\n        var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);\n        if (operator) {\n            operator.call(sink, this.source);\n        }\n        else {\n            sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\n        }\n        if (sink.syncErrorThrowable) {\n            sink.syncErrorThrowable = false;\n            if (sink.syncErrorThrown) {\n                throw sink.syncErrorValue;\n            }\n        }\n        return sink;\n    };\n    Observable.prototype._trySubscribe = function (sink) {\n        try {\n            return this._subscribe(sink);\n        }\n        catch (err) {\n            sink.syncErrorThrown = true;\n            sink.syncErrorValue = err;\n            sink.error(err);\n        }\n    };\n    /**\n     * @method forEach\n     * @param {Function} next a handler for each value emitted by the observable\n     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n     * @return {Promise} a promise that either resolves on observable completion or\n     *  rejects with the handled error\n     */\n    Observable.prototype.forEach = function (next, PromiseCtor) {\n        var _this = this;\n        if (!PromiseCtor) {\n            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\n                PromiseCtor = root_1.root.Rx.config.Promise;\n            }\n            else if (root_1.root.Promise) {\n                PromiseCtor = root_1.root.Promise;\n            }\n        }\n        if (!PromiseCtor) {\n            throw new Error('no Promise impl found');\n        }\n        return new PromiseCtor(function (resolve, reject) {\n            // Must be declared in a separate statement to avoid a RefernceError when\n            // accessing subscription below in the closure due to Temporal Dead Zone.\n            var subscription;\n            subscription = _this.subscribe(function (value) {\n                if (subscription) {\n                    // if there is a subscription, then we can surmise\n                    // the next handling is asynchronous. Any errors thrown\n                    // need to be rejected explicitly and unsubscribe must be\n                    // called manually\n                    try {\n                        next(value);\n                    }\n                    catch (err) {\n                        reject(err);\n                        subscription.unsubscribe();\n                    }\n                }\n                else {\n                    // if there is NO subscription, then we're getting a nexted\n                    // value synchronously during subscription. We can just call it.\n                    // If it errors, Observable's `subscribe` will ensure the\n                    // unsubscription logic is called, then synchronously rethrow the error.\n                    // After that, Promise will trap the error and send it\n                    // down the rejection path.\n                    next(value);\n                }\n            }, reject, resolve);\n        });\n    };\n    /** @deprecated internal use only */ Observable.prototype._subscribe = function (subscriber) {\n        return this.source.subscribe(subscriber);\n    };\n    /**\n     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n     * @method Symbol.observable\n     * @return {Observable} this instance of the observable\n     */\n    Observable.prototype[observable_1.observable] = function () {\n        return this;\n    };\n    /* tslint:enable:max-line-length */\n    /**\n     * Used to stitch together functional operators into a chain.\n     * @method pipe\n     * @return {Observable} the Observable result of all of the operators having\n     * been called in the order they were passed in.\n     *\n     * @example\n     *\n     * import { map, filter, scan } from 'rxjs/operators';\n     *\n     * Rx.Observable.interval(1000)\n     *   .pipe(\n     *     filter(x => x % 2 === 0),\n     *     map(x => x + x),\n     *     scan((acc, x) => acc + x)\n     *   )\n     *   .subscribe(x => console.log(x))\n     */\n    Observable.prototype.pipe = function () {\n        var operations = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            operations[_i - 0] = arguments[_i];\n        }\n        if (operations.length === 0) {\n            return this;\n        }\n        return pipe_1.pipeFromArray(operations)(this);\n    };\n    /* tslint:enable:max-line-length */\n    Observable.prototype.toPromise = function (PromiseCtor) {\n        var _this = this;\n        if (!PromiseCtor) {\n            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\n                PromiseCtor = root_1.root.Rx.config.Promise;\n            }\n            else if (root_1.root.Promise) {\n                PromiseCtor = root_1.root.Promise;\n            }\n        }\n        if (!PromiseCtor) {\n            throw new Error('no Promise impl found');\n        }\n        return new PromiseCtor(function (resolve, reject) {\n            var value;\n            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });\n        });\n    };\n    // HACK: Since TypeScript inherits static properties too, we have to\n    // fight against TypeScript here so Subject can have a different static create signature\n    /**\n     * Creates a new cold Observable by calling the Observable constructor\n     * @static true\n     * @owner Observable\n     * @method create\n     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n     * @return {Observable} a new cold observable\n     */\n    Observable.create = function (subscribe) {\n        return new Observable(subscribe);\n    };\n    return Observable;\n}());\nexports.Observable = Observable;\n","\"use strict\";\nexports.empty = {\n    closed: true,\n    next: function (value) { },\n    error: function (err) { throw err; },\n    complete: function () { }\n};\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('./Subscriber');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar OuterSubscriber = (function (_super) {\n    __extends(OuterSubscriber, _super);\n    function OuterSubscriber() {\n        _super.apply(this, arguments);\n    }\n    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    };\n    OuterSubscriber.prototype.notifyError = function (error, innerSub) {\n        this.destination.error(error);\n    };\n    OuterSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.destination.complete();\n    };\n    return OuterSubscriber;\n}(Subscriber_1.Subscriber));\nexports.OuterSubscriber = OuterSubscriber;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('./Subject');\nvar queue_1 = require('./scheduler/queue');\nvar Subscription_1 = require('./Subscription');\nvar observeOn_1 = require('./operators/observeOn');\nvar ObjectUnsubscribedError_1 = require('./util/ObjectUnsubscribedError');\nvar SubjectSubscription_1 = require('./SubjectSubscription');\n/**\n * @class ReplaySubject<T>\n */\nvar ReplaySubject = (function (_super) {\n    __extends(ReplaySubject, _super);\n    function ReplaySubject(bufferSize, windowTime, scheduler) {\n        if (bufferSize === void 0) { bufferSize = Number.POSITIVE_INFINITY; }\n        if (windowTime === void 0) { windowTime = Number.POSITIVE_INFINITY; }\n        _super.call(this);\n        this.scheduler = scheduler;\n        this._events = [];\n        this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n        this._windowTime = windowTime < 1 ? 1 : windowTime;\n    }\n    ReplaySubject.prototype.next = function (value) {\n        var now = this._getNow();\n        this._events.push(new ReplayEvent(now, value));\n        this._trimBufferThenGetEvents();\n        _super.prototype.next.call(this, value);\n    };\n    /** @deprecated internal use only */ ReplaySubject.prototype._subscribe = function (subscriber) {\n        var _events = this._trimBufferThenGetEvents();\n        var scheduler = this.scheduler;\n        var subscription;\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        else if (this.hasError) {\n            subscription = Subscription_1.Subscription.EMPTY;\n        }\n        else if (this.isStopped) {\n            subscription = Subscription_1.Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            subscription = new SubjectSubscription_1.SubjectSubscription(this, subscriber);\n        }\n        if (scheduler) {\n            subscriber.add(subscriber = new observeOn_1.ObserveOnSubscriber(subscriber, scheduler));\n        }\n        var len = _events.length;\n        for (var i = 0; i < len && !subscriber.closed; i++) {\n            subscriber.next(_events[i].value);\n        }\n        if (this.hasError) {\n            subscriber.error(this.thrownError);\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n        }\n        return subscription;\n    };\n    ReplaySubject.prototype._getNow = function () {\n        return (this.scheduler || queue_1.queue).now();\n    };\n    ReplaySubject.prototype._trimBufferThenGetEvents = function () {\n        var now = this._getNow();\n        var _bufferSize = this._bufferSize;\n        var _windowTime = this._windowTime;\n        var _events = this._events;\n        var eventsCount = _events.length;\n        var spliceCount = 0;\n        // Trim events that fall out of the time window.\n        // Start at the front of the list. Break early once\n        // we encounter an event that falls within the window.\n        while (spliceCount < eventsCount) {\n            if ((now - _events[spliceCount].time) < _windowTime) {\n                break;\n            }\n            spliceCount++;\n        }\n        if (eventsCount > _bufferSize) {\n            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n        }\n        if (spliceCount > 0) {\n            _events.splice(0, spliceCount);\n        }\n        return _events;\n    };\n    return ReplaySubject;\n}(Subject_1.Subject));\nexports.ReplaySubject = ReplaySubject;\nvar ReplayEvent = (function () {\n    function ReplayEvent(time, value) {\n        this.time = time;\n        this.value = value;\n    }\n    return ReplayEvent;\n}());\n","\"use strict\";\n/* tslint:disable:no-unused-variable */\n// Subject imported before Observable to bypass circular dependency issue since\n// Subject extends Observable and Observable references Subject in it's\n// definition\nvar Subject_1 = require('./Subject');\nexports.Subject = Subject_1.Subject;\nexports.AnonymousSubject = Subject_1.AnonymousSubject;\n/* tslint:enable:no-unused-variable */\nvar Observable_1 = require('./Observable');\nexports.Observable = Observable_1.Observable;\n// statics\n/* tslint:disable:no-use-before-declare */\nrequire('./add/observable/bindCallback');\nrequire('./add/observable/bindNodeCallback');\nrequire('./add/observable/combineLatest');\nrequire('./add/observable/concat');\nrequire('./add/observable/defer');\nrequire('./add/observable/empty');\nrequire('./add/observable/forkJoin');\nrequire('./add/observable/from');\nrequire('./add/observable/fromEvent');\nrequire('./add/observable/fromEventPattern');\nrequire('./add/observable/fromPromise');\nrequire('./add/observable/generate');\nrequire('./add/observable/if');\nrequire('./add/observable/interval');\nrequire('./add/observable/merge');\nrequire('./add/observable/race');\nrequire('./add/observable/never');\nrequire('./add/observable/of');\nrequire('./add/observable/onErrorResumeNext');\nrequire('./add/observable/pairs');\nrequire('./add/observable/range');\nrequire('./add/observable/using');\nrequire('./add/observable/throw');\nrequire('./add/observable/timer');\nrequire('./add/observable/zip');\n//dom\nrequire('./add/observable/dom/ajax');\nrequire('./add/observable/dom/webSocket');\n//operators\nrequire('./add/operator/buffer');\nrequire('./add/operator/bufferCount');\nrequire('./add/operator/bufferTime');\nrequire('./add/operator/bufferToggle');\nrequire('./add/operator/bufferWhen');\nrequire('./add/operator/catch');\nrequire('./add/operator/combineAll');\nrequire('./add/operator/combineLatest');\nrequire('./add/operator/concat');\nrequire('./add/operator/concatAll');\nrequire('./add/operator/concatMap');\nrequire('./add/operator/concatMapTo');\nrequire('./add/operator/count');\nrequire('./add/operator/dematerialize');\nrequire('./add/operator/debounce');\nrequire('./add/operator/debounceTime');\nrequire('./add/operator/defaultIfEmpty');\nrequire('./add/operator/delay');\nrequire('./add/operator/delayWhen');\nrequire('./add/operator/distinct');\nrequire('./add/operator/distinctUntilChanged');\nrequire('./add/operator/distinctUntilKeyChanged');\nrequire('./add/operator/do');\nrequire('./add/operator/exhaust');\nrequire('./add/operator/exhaustMap');\nrequire('./add/operator/expand');\nrequire('./add/operator/elementAt');\nrequire('./add/operator/filter');\nrequire('./add/operator/finally');\nrequire('./add/operator/find');\nrequire('./add/operator/findIndex');\nrequire('./add/operator/first');\nrequire('./add/operator/groupBy');\nrequire('./add/operator/ignoreElements');\nrequire('./add/operator/isEmpty');\nrequire('./add/operator/audit');\nrequire('./add/operator/auditTime');\nrequire('./add/operator/last');\nrequire('./add/operator/let');\nrequire('./add/operator/every');\nrequire('./add/operator/map');\nrequire('./add/operator/mapTo');\nrequire('./add/operator/materialize');\nrequire('./add/operator/max');\nrequire('./add/operator/merge');\nrequire('./add/operator/mergeAll');\nrequire('./add/operator/mergeMap');\nrequire('./add/operator/mergeMapTo');\nrequire('./add/operator/mergeScan');\nrequire('./add/operator/min');\nrequire('./add/operator/multicast');\nrequire('./add/operator/observeOn');\nrequire('./add/operator/onErrorResumeNext');\nrequire('./add/operator/pairwise');\nrequire('./add/operator/partition');\nrequire('./add/operator/pluck');\nrequire('./add/operator/publish');\nrequire('./add/operator/publishBehavior');\nrequire('./add/operator/publishReplay');\nrequire('./add/operator/publishLast');\nrequire('./add/operator/race');\nrequire('./add/operator/reduce');\nrequire('./add/operator/repeat');\nrequire('./add/operator/repeatWhen');\nrequire('./add/operator/retry');\nrequire('./add/operator/retryWhen');\nrequire('./add/operator/sample');\nrequire('./add/operator/sampleTime');\nrequire('./add/operator/scan');\nrequire('./add/operator/sequenceEqual');\nrequire('./add/operator/share');\nrequire('./add/operator/shareReplay');\nrequire('./add/operator/single');\nrequire('./add/operator/skip');\nrequire('./add/operator/skipLast');\nrequire('./add/operator/skipUntil');\nrequire('./add/operator/skipWhile');\nrequire('./add/operator/startWith');\nrequire('./add/operator/subscribeOn');\nrequire('./add/operator/switch');\nrequire('./add/operator/switchMap');\nrequire('./add/operator/switchMapTo');\nrequire('./add/operator/take');\nrequire('./add/operator/takeLast');\nrequire('./add/operator/takeUntil');\nrequire('./add/operator/takeWhile');\nrequire('./add/operator/throttle');\nrequire('./add/operator/throttleTime');\nrequire('./add/operator/timeInterval');\nrequire('./add/operator/timeout');\nrequire('./add/operator/timeoutWith');\nrequire('./add/operator/timestamp');\nrequire('./add/operator/toArray');\nrequire('./add/operator/toPromise');\nrequire('./add/operator/window');\nrequire('./add/operator/windowCount');\nrequire('./add/operator/windowTime');\nrequire('./add/operator/windowToggle');\nrequire('./add/operator/windowWhen');\nrequire('./add/operator/withLatestFrom');\nrequire('./add/operator/zip');\nrequire('./add/operator/zipAll');\n/* tslint:disable:no-unused-variable */\nvar Subscription_1 = require('./Subscription');\nexports.Subscription = Subscription_1.Subscription;\nvar Subscriber_1 = require('./Subscriber');\nexports.Subscriber = Subscriber_1.Subscriber;\nvar AsyncSubject_1 = require('./AsyncSubject');\nexports.AsyncSubject = AsyncSubject_1.AsyncSubject;\nvar ReplaySubject_1 = require('./ReplaySubject');\nexports.ReplaySubject = ReplaySubject_1.ReplaySubject;\nvar BehaviorSubject_1 = require('./BehaviorSubject');\nexports.BehaviorSubject = BehaviorSubject_1.BehaviorSubject;\nvar ConnectableObservable_1 = require('./observable/ConnectableObservable');\nexports.ConnectableObservable = ConnectableObservable_1.ConnectableObservable;\nvar Notification_1 = require('./Notification');\nexports.Notification = Notification_1.Notification;\nvar EmptyError_1 = require('./util/EmptyError');\nexports.EmptyError = EmptyError_1.EmptyError;\nvar ArgumentOutOfRangeError_1 = require('./util/ArgumentOutOfRangeError');\nexports.ArgumentOutOfRangeError = ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;\nvar ObjectUnsubscribedError_1 = require('./util/ObjectUnsubscribedError');\nexports.ObjectUnsubscribedError = ObjectUnsubscribedError_1.ObjectUnsubscribedError;\nvar TimeoutError_1 = require('./util/TimeoutError');\nexports.TimeoutError = TimeoutError_1.TimeoutError;\nvar UnsubscriptionError_1 = require('./util/UnsubscriptionError');\nexports.UnsubscriptionError = UnsubscriptionError_1.UnsubscriptionError;\nvar timeInterval_1 = require('./operator/timeInterval');\nexports.TimeInterval = timeInterval_1.TimeInterval;\nvar timestamp_1 = require('./operators/timestamp');\nexports.Timestamp = timestamp_1.Timestamp;\nvar TestScheduler_1 = require('./testing/TestScheduler');\nexports.TestScheduler = TestScheduler_1.TestScheduler;\nvar VirtualTimeScheduler_1 = require('./scheduler/VirtualTimeScheduler');\nexports.VirtualTimeScheduler = VirtualTimeScheduler_1.VirtualTimeScheduler;\nvar AjaxObservable_1 = require('./observable/dom/AjaxObservable');\nexports.AjaxResponse = AjaxObservable_1.AjaxResponse;\nexports.AjaxError = AjaxObservable_1.AjaxError;\nexports.AjaxTimeoutError = AjaxObservable_1.AjaxTimeoutError;\nvar pipe_1 = require('./util/pipe');\nexports.pipe = pipe_1.pipe;\nvar asap_1 = require('./scheduler/asap');\nvar async_1 = require('./scheduler/async');\nvar queue_1 = require('./scheduler/queue');\nvar animationFrame_1 = require('./scheduler/animationFrame');\nvar rxSubscriber_1 = require('./symbol/rxSubscriber');\nvar iterator_1 = require('./symbol/iterator');\nvar observable_1 = require('./symbol/observable');\nvar _operators = require('./operators');\nexports.operators = _operators;\n/* tslint:enable:no-unused-variable */\n/**\n * @typedef {Object} Rx.Scheduler\n * @property {Scheduler} queue Schedules on a queue in the current event frame\n * (trampoline scheduler). Use this for iteration operations.\n * @property {Scheduler} asap Schedules on the micro task queue, which uses the\n * fastest transport mechanism available, either Node.js' `process.nextTick()`\n * or Web Worker MessageChannel or setTimeout or others. Use this for\n * asynchronous conversions.\n * @property {Scheduler} async Schedules work with `setInterval`. Use this for\n * time-based operations.\n * @property {Scheduler} animationFrame Schedules work with `requestAnimationFrame`.\n * Use this for synchronizing with the platform's painting\n */\nvar Scheduler = {\n    asap: asap_1.asap,\n    queue: queue_1.queue,\n    animationFrame: animationFrame_1.animationFrame,\n    async: async_1.async\n};\nexports.Scheduler = Scheduler;\n/**\n * @typedef {Object} Rx.Symbol\n * @property {Symbol|string} rxSubscriber A symbol to use as a property name to\n * retrieve an \"Rx safe\" Observer from an object. \"Rx safety\" can be defined as\n * an object that has all of the traits of an Rx Subscriber, including the\n * ability to add and remove subscriptions to the subscription chain and\n * guarantees involving event triggering (can't \"next\" after unsubscription,\n * etc).\n * @property {Symbol|string} observable A symbol to use as a property name to\n * retrieve an Observable as defined by the [ECMAScript \"Observable\" spec](https://github.com/zenparsing/es-observable).\n * @property {Symbol|string} iterator The ES6 symbol to use as a property name\n * to retrieve an iterator from an object.\n */\nvar Symbol = {\n    rxSubscriber: rxSubscriber_1.rxSubscriber,\n    observable: observable_1.observable,\n    iterator: iterator_1.iterator\n};\nexports.Symbol = Symbol;\n","\"use strict\";\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nvar Scheduler = (function () {\n    function Scheduler(SchedulerAction, now) {\n        if (now === void 0) { now = Scheduler.now; }\n        this.SchedulerAction = SchedulerAction;\n        this.now = now;\n    }\n    /**\n     * Schedules a function, `work`, for execution. May happen at some point in\n     * the future, according to the `delay` parameter, if specified. May be passed\n     * some context object, `state`, which will be passed to the `work` function.\n     *\n     * The given arguments will be processed an stored as an Action object in a\n     * queue of actions.\n     *\n     * @param {function(state: ?T): ?Subscription} work A function representing a\n     * task, or some unit of work to be executed by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler itself.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @return {Subscription} A subscription in order to be able to unsubscribe\n     * the scheduled work.\n     */\n    Scheduler.prototype.schedule = function (work, delay, state) {\n        if (delay === void 0) { delay = 0; }\n        return new this.SchedulerAction(this, work).schedule(state, delay);\n    };\n    Scheduler.now = Date.now ? Date.now : function () { return +new Date(); };\n    return Scheduler;\n}());\nexports.Scheduler = Scheduler;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('./Observable');\nvar Subscriber_1 = require('./Subscriber');\nvar Subscription_1 = require('./Subscription');\nvar ObjectUnsubscribedError_1 = require('./util/ObjectUnsubscribedError');\nvar SubjectSubscription_1 = require('./SubjectSubscription');\nvar rxSubscriber_1 = require('./symbol/rxSubscriber');\n/**\n * @class SubjectSubscriber<T>\n */\nvar SubjectSubscriber = (function (_super) {\n    __extends(SubjectSubscriber, _super);\n    function SubjectSubscriber(destination) {\n        _super.call(this, destination);\n        this.destination = destination;\n    }\n    return SubjectSubscriber;\n}(Subscriber_1.Subscriber));\nexports.SubjectSubscriber = SubjectSubscriber;\n/**\n * @class Subject<T>\n */\nvar Subject = (function (_super) {\n    __extends(Subject, _super);\n    function Subject() {\n        _super.call(this);\n        this.observers = [];\n        this.closed = false;\n        this.isStopped = false;\n        this.hasError = false;\n        this.thrownError = null;\n    }\n    Subject.prototype[rxSubscriber_1.rxSubscriber] = function () {\n        return new SubjectSubscriber(this);\n    };\n    Subject.prototype.lift = function (operator) {\n        var subject = new AnonymousSubject(this, this);\n        subject.operator = operator;\n        return subject;\n    };\n    Subject.prototype.next = function (value) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        if (!this.isStopped) {\n            var observers = this.observers;\n            var len = observers.length;\n            var copy = observers.slice();\n            for (var i = 0; i < len; i++) {\n                copy[i].next(value);\n            }\n        }\n    };\n    Subject.prototype.error = function (err) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        this.hasError = true;\n        this.thrownError = err;\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].error(err);\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.complete = function () {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].complete();\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.unsubscribe = function () {\n        this.isStopped = true;\n        this.closed = true;\n        this.observers = null;\n    };\n    Subject.prototype._trySubscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        else {\n            return _super.prototype._trySubscribe.call(this, subscriber);\n        }\n    };\n    /** @deprecated internal use only */ Subject.prototype._subscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        else if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription_1.Subscription.EMPTY;\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n            return Subscription_1.Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            return new SubjectSubscription_1.SubjectSubscription(this, subscriber);\n        }\n    };\n    Subject.prototype.asObservable = function () {\n        var observable = new Observable_1.Observable();\n        observable.source = this;\n        return observable;\n    };\n    Subject.create = function (destination, source) {\n        return new AnonymousSubject(destination, source);\n    };\n    return Subject;\n}(Observable_1.Observable));\nexports.Subject = Subject;\n/**\n * @class AnonymousSubject<T>\n */\nvar AnonymousSubject = (function (_super) {\n    __extends(AnonymousSubject, _super);\n    function AnonymousSubject(destination, source) {\n        _super.call(this);\n        this.destination = destination;\n        this.source = source;\n    }\n    AnonymousSubject.prototype.next = function (value) {\n        var destination = this.destination;\n        if (destination && destination.next) {\n            destination.next(value);\n        }\n    };\n    AnonymousSubject.prototype.error = function (err) {\n        var destination = this.destination;\n        if (destination && destination.error) {\n            this.destination.error(err);\n        }\n    };\n    AnonymousSubject.prototype.complete = function () {\n        var destination = this.destination;\n        if (destination && destination.complete) {\n            this.destination.complete();\n        }\n    };\n    /** @deprecated internal use only */ AnonymousSubject.prototype._subscribe = function (subscriber) {\n        var source = this.source;\n        if (source) {\n            return this.source.subscribe(subscriber);\n        }\n        else {\n            return Subscription_1.Subscription.EMPTY;\n        }\n    };\n    return AnonymousSubject;\n}(Subject));\nexports.AnonymousSubject = AnonymousSubject;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscription_1 = require('./Subscription');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubjectSubscription = (function (_super) {\n    __extends(SubjectSubscription, _super);\n    function SubjectSubscription(subject, subscriber) {\n        _super.call(this);\n        this.subject = subject;\n        this.subscriber = subscriber;\n        this.closed = false;\n    }\n    SubjectSubscription.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.closed = true;\n        var subject = this.subject;\n        var observers = subject.observers;\n        this.subject = null;\n        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n            return;\n        }\n        var subscriberIndex = observers.indexOf(this.subscriber);\n        if (subscriberIndex !== -1) {\n            observers.splice(subscriberIndex, 1);\n        }\n    };\n    return SubjectSubscription;\n}(Subscription_1.Subscription));\nexports.SubjectSubscription = SubjectSubscription;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isFunction_1 = require('./util/isFunction');\nvar Subscription_1 = require('./Subscription');\nvar Observer_1 = require('./Observer');\nvar rxSubscriber_1 = require('./symbol/rxSubscriber');\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nvar Subscriber = (function (_super) {\n    __extends(Subscriber, _super);\n    /**\n     * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n     * defined Observer or a `next` callback function.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     */\n    function Subscriber(destinationOrNext, error, complete) {\n        _super.call(this);\n        this.syncErrorValue = null;\n        this.syncErrorThrown = false;\n        this.syncErrorThrowable = false;\n        this.isStopped = false;\n        switch (arguments.length) {\n            case 0:\n                this.destination = Observer_1.empty;\n                break;\n            case 1:\n                if (!destinationOrNext) {\n                    this.destination = Observer_1.empty;\n                    break;\n                }\n                if (typeof destinationOrNext === 'object') {\n                    // HACK(benlesh): To resolve an issue where Node users may have multiple\n                    // copies of rxjs in their node_modules directory.\n                    if (isTrustedSubscriber(destinationOrNext)) {\n                        var trustedSubscriber = destinationOrNext[rxSubscriber_1.rxSubscriber]();\n                        this.syncErrorThrowable = trustedSubscriber.syncErrorThrowable;\n                        this.destination = trustedSubscriber;\n                        trustedSubscriber.add(this);\n                    }\n                    else {\n                        this.syncErrorThrowable = true;\n                        this.destination = new SafeSubscriber(this, destinationOrNext);\n                    }\n                    break;\n                }\n            default:\n                this.syncErrorThrowable = true;\n                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);\n                break;\n        }\n    }\n    Subscriber.prototype[rxSubscriber_1.rxSubscriber] = function () { return this; };\n    /**\n     * A static factory for a Subscriber, given a (potentially partial) definition\n     * of an Observer.\n     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n     * Observer represented by the given arguments.\n     */\n    Subscriber.create = function (next, error, complete) {\n        var subscriber = new Subscriber(next, error, complete);\n        subscriber.syncErrorThrowable = false;\n        return subscriber;\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `next` from\n     * the Observable, with a value. The Observable may call this method 0 or more\n     * times.\n     * @param {T} [value] The `next` value.\n     * @return {void}\n     */\n    Subscriber.prototype.next = function (value) {\n        if (!this.isStopped) {\n            this._next(value);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `error` from\n     * the Observable, with an attached {@link Error}. Notifies the Observer that\n     * the Observable has experienced an error condition.\n     * @param {any} [err] The `error` exception.\n     * @return {void}\n     */\n    Subscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._error(err);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive a valueless notification of type\n     * `complete` from the Observable. Notifies the Observer that the Observable\n     * has finished sending push-based notifications.\n     * @return {void}\n     */\n    Subscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._complete();\n        }\n    };\n    Subscriber.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.isStopped = true;\n        _super.prototype.unsubscribe.call(this);\n    };\n    Subscriber.prototype._next = function (value) {\n        this.destination.next(value);\n    };\n    Subscriber.prototype._error = function (err) {\n        this.destination.error(err);\n        this.unsubscribe();\n    };\n    Subscriber.prototype._complete = function () {\n        this.destination.complete();\n        this.unsubscribe();\n    };\n    /** @deprecated internal use only */ Subscriber.prototype._unsubscribeAndRecycle = function () {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        this._parent = null;\n        this._parents = null;\n        this.unsubscribe();\n        this.closed = false;\n        this.isStopped = false;\n        this._parent = _parent;\n        this._parents = _parents;\n        return this;\n    };\n    return Subscriber;\n}(Subscription_1.Subscription));\nexports.Subscriber = Subscriber;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SafeSubscriber = (function (_super) {\n    __extends(SafeSubscriber, _super);\n    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {\n        _super.call(this);\n        this._parentSubscriber = _parentSubscriber;\n        var next;\n        var context = this;\n        if (isFunction_1.isFunction(observerOrNext)) {\n            next = observerOrNext;\n        }\n        else if (observerOrNext) {\n            next = observerOrNext.next;\n            error = observerOrNext.error;\n            complete = observerOrNext.complete;\n            if (observerOrNext !== Observer_1.empty) {\n                context = Object.create(observerOrNext);\n                if (isFunction_1.isFunction(context.unsubscribe)) {\n                    this.add(context.unsubscribe.bind(context));\n                }\n                context.unsubscribe = this.unsubscribe.bind(this);\n            }\n        }\n        this._context = context;\n        this._next = next;\n        this._error = error;\n        this._complete = complete;\n    }\n    SafeSubscriber.prototype.next = function (value) {\n        if (!this.isStopped && this._next) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (!_parentSubscriber.syncErrorThrowable) {\n                this.__tryOrUnsub(this._next, value);\n            }\n            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._error) {\n                if (!_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(this._error, err);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, this._error, err);\n                    this.unsubscribe();\n                }\n            }\n            else if (!_parentSubscriber.syncErrorThrowable) {\n                this.unsubscribe();\n                throw err;\n            }\n            else {\n                _parentSubscriber.syncErrorValue = err;\n                _parentSubscriber.syncErrorThrown = true;\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.complete = function () {\n        var _this = this;\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._complete) {\n                var wrappedComplete = function () { return _this._complete.call(_this._context); };\n                if (!_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(wrappedComplete);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n                    this.unsubscribe();\n                }\n            }\n            else {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            this.unsubscribe();\n            throw err;\n        }\n    };\n    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            parent.syncErrorValue = err;\n            parent.syncErrorThrown = true;\n            return true;\n        }\n        return false;\n    };\n    /** @deprecated internal use only */ SafeSubscriber.prototype._unsubscribe = function () {\n        var _parentSubscriber = this._parentSubscriber;\n        this._context = null;\n        this._parentSubscriber = null;\n        _parentSubscriber.unsubscribe();\n    };\n    return SafeSubscriber;\n}(Subscriber));\nfunction isTrustedSubscriber(obj) {\n    return obj instanceof Subscriber || ('syncErrorThrowable' in obj && obj[rxSubscriber_1.rxSubscriber]);\n}\n","\"use strict\";\nvar isArray_1 = require('./util/isArray');\nvar isObject_1 = require('./util/isObject');\nvar isFunction_1 = require('./util/isFunction');\nvar tryCatch_1 = require('./util/tryCatch');\nvar errorObject_1 = require('./util/errorObject');\nvar UnsubscriptionError_1 = require('./util/UnsubscriptionError');\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nvar Subscription = (function () {\n    /**\n     * @param {function(): void} [unsubscribe] A function describing how to\n     * perform the disposal of resources when the `unsubscribe` method is called.\n     */\n    function Subscription(unsubscribe) {\n        /**\n         * A flag to indicate whether this Subscription has already been unsubscribed.\n         * @type {boolean}\n         */\n        this.closed = false;\n        this._parent = null;\n        this._parents = null;\n        this._subscriptions = null;\n        if (unsubscribe) {\n            this._unsubscribe = unsubscribe;\n        }\n    }\n    /**\n     * Disposes the resources held by the subscription. May, for instance, cancel\n     * an ongoing Observable execution or cancel any other type of work that\n     * started when the Subscription was created.\n     * @return {void}\n     */\n    Subscription.prototype.unsubscribe = function () {\n        var hasErrors = false;\n        var errors;\n        if (this.closed) {\n            return;\n        }\n        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;\n        this.closed = true;\n        this._parent = null;\n        this._parents = null;\n        // null out _subscriptions first so any child subscriptions that attempt\n        // to remove themselves from this subscription will noop\n        this._subscriptions = null;\n        var index = -1;\n        var len = _parents ? _parents.length : 0;\n        // if this._parent is null, then so is this._parents, and we\n        // don't have to remove ourselves from any parent subscriptions.\n        while (_parent) {\n            _parent.remove(this);\n            // if this._parents is null or index >= len,\n            // then _parent is set to null, and the loop exits\n            _parent = ++index < len && _parents[index] || null;\n        }\n        if (isFunction_1.isFunction(_unsubscribe)) {\n            var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);\n            if (trial === errorObject_1.errorObject) {\n                hasErrors = true;\n                errors = errors || (errorObject_1.errorObject.e instanceof UnsubscriptionError_1.UnsubscriptionError ?\n                    flattenUnsubscriptionErrors(errorObject_1.errorObject.e.errors) : [errorObject_1.errorObject.e]);\n            }\n        }\n        if (isArray_1.isArray(_subscriptions)) {\n            index = -1;\n            len = _subscriptions.length;\n            while (++index < len) {\n                var sub = _subscriptions[index];\n                if (isObject_1.isObject(sub)) {\n                    var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);\n                    if (trial === errorObject_1.errorObject) {\n                        hasErrors = true;\n                        errors = errors || [];\n                        var err = errorObject_1.errorObject.e;\n                        if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {\n                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n                        }\n                        else {\n                            errors.push(err);\n                        }\n                    }\n                }\n            }\n        }\n        if (hasErrors) {\n            throw new UnsubscriptionError_1.UnsubscriptionError(errors);\n        }\n    };\n    /**\n     * Adds a tear down to be called during the unsubscribe() of this\n     * Subscription.\n     *\n     * If the tear down being added is a subscription that is already\n     * unsubscribed, is the same reference `add` is being called on, or is\n     * `Subscription.EMPTY`, it will not be added.\n     *\n     * If this subscription is already in an `closed` state, the passed\n     * tear down logic will be executed immediately.\n     *\n     * @param {TeardownLogic} teardown The additional logic to execute on\n     * teardown.\n     * @return {Subscription} Returns the Subscription used or created to be\n     * added to the inner subscriptions list. This Subscription can be used with\n     * `remove()` to remove the passed teardown logic from the inner subscriptions\n     * list.\n     */\n    Subscription.prototype.add = function (teardown) {\n        if (!teardown || (teardown === Subscription.EMPTY)) {\n            return Subscription.EMPTY;\n        }\n        if (teardown === this) {\n            return this;\n        }\n        var subscription = teardown;\n        switch (typeof teardown) {\n            case 'function':\n                subscription = new Subscription(teardown);\n            case 'object':\n                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n                    return subscription;\n                }\n                else if (this.closed) {\n                    subscription.unsubscribe();\n                    return subscription;\n                }\n                else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n                    var tmp = subscription;\n                    subscription = new Subscription();\n                    subscription._subscriptions = [tmp];\n                }\n                break;\n            default:\n                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n        }\n        var subscriptions = this._subscriptions || (this._subscriptions = []);\n        subscriptions.push(subscription);\n        subscription._addParent(this);\n        return subscription;\n    };\n    /**\n     * Removes a Subscription from the internal list of subscriptions that will\n     * unsubscribe during the unsubscribe process of this Subscription.\n     * @param {Subscription} subscription The subscription to remove.\n     * @return {void}\n     */\n    Subscription.prototype.remove = function (subscription) {\n        var subscriptions = this._subscriptions;\n        if (subscriptions) {\n            var subscriptionIndex = subscriptions.indexOf(subscription);\n            if (subscriptionIndex !== -1) {\n                subscriptions.splice(subscriptionIndex, 1);\n            }\n        }\n    };\n    Subscription.prototype._addParent = function (parent) {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        if (!_parent || _parent === parent) {\n            // If we don't have a parent, or the new parent is the same as the\n            // current parent, then set this._parent to the new parent.\n            this._parent = parent;\n        }\n        else if (!_parents) {\n            // If there's already one parent, but not multiple, allocate an Array to\n            // store the rest of the parent Subscriptions.\n            this._parents = [parent];\n        }\n        else if (_parents.indexOf(parent) === -1) {\n            // Only add the new parent to the _parents list if it's not already there.\n            _parents.push(parent);\n        }\n    };\n    Subscription.EMPTY = (function (empty) {\n        empty.closed = true;\n        return empty;\n    }(new Subscription()));\n    return Subscription;\n}());\nexports.Subscription = Subscription;\nfunction flattenUnsubscriptionErrors(errors) {\n    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError_1.UnsubscriptionError) ? err.errors : err); }, []);\n}\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar bindCallback_1 = require('../../observable/bindCallback');\nObservable_1.Observable.bindCallback = bindCallback_1.bindCallback;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar bindNodeCallback_1 = require('../../observable/bindNodeCallback');\nObservable_1.Observable.bindNodeCallback = bindNodeCallback_1.bindNodeCallback;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar combineLatest_1 = require('../../observable/combineLatest');\nObservable_1.Observable.combineLatest = combineLatest_1.combineLatest;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar concat_1 = require('../../observable/concat');\nObservable_1.Observable.concat = concat_1.concat;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar defer_1 = require('../../observable/defer');\nObservable_1.Observable.defer = defer_1.defer;\n","\"use strict\";\nvar Observable_1 = require('../../../Observable');\nvar ajax_1 = require('../../../observable/dom/ajax');\nObservable_1.Observable.ajax = ajax_1.ajax;\n","\"use strict\";\nvar Observable_1 = require('../../../Observable');\nvar webSocket_1 = require('../../../observable/dom/webSocket');\nObservable_1.Observable.webSocket = webSocket_1.webSocket;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar empty_1 = require('../../observable/empty');\nObservable_1.Observable.empty = empty_1.empty;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar forkJoin_1 = require('../../observable/forkJoin');\nObservable_1.Observable.forkJoin = forkJoin_1.forkJoin;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar from_1 = require('../../observable/from');\nObservable_1.Observable.from = from_1.from;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar fromEvent_1 = require('../../observable/fromEvent');\nObservable_1.Observable.fromEvent = fromEvent_1.fromEvent;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar fromEventPattern_1 = require('../../observable/fromEventPattern');\nObservable_1.Observable.fromEventPattern = fromEventPattern_1.fromEventPattern;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar fromPromise_1 = require('../../observable/fromPromise');\nObservable_1.Observable.fromPromise = fromPromise_1.fromPromise;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar generate_1 = require('../../observable/generate');\nObservable_1.Observable.generate = generate_1.generate;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar if_1 = require('../../observable/if');\nObservable_1.Observable.if = if_1._if;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar interval_1 = require('../../observable/interval');\nObservable_1.Observable.interval = interval_1.interval;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar merge_1 = require('../../observable/merge');\nObservable_1.Observable.merge = merge_1.merge;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar never_1 = require('../../observable/never');\nObservable_1.Observable.never = never_1.never;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar of_1 = require('../../observable/of');\nObservable_1.Observable.of = of_1.of;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar onErrorResumeNext_1 = require('../../observable/onErrorResumeNext');\nObservable_1.Observable.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNext;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar pairs_1 = require('../../observable/pairs');\nObservable_1.Observable.pairs = pairs_1.pairs;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar race_1 = require('../../observable/race');\nObservable_1.Observable.race = race_1.race;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar range_1 = require('../../observable/range');\nObservable_1.Observable.range = range_1.range;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar throw_1 = require('../../observable/throw');\nObservable_1.Observable.throw = throw_1._throw;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar timer_1 = require('../../observable/timer');\nObservable_1.Observable.timer = timer_1.timer;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar using_1 = require('../../observable/using');\nObservable_1.Observable.using = using_1.using;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar zip_1 = require('../../observable/zip');\nObservable_1.Observable.zip = zip_1.zip;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar audit_1 = require('../../operator/audit');\nObservable_1.Observable.prototype.audit = audit_1.audit;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar auditTime_1 = require('../../operator/auditTime');\nObservable_1.Observable.prototype.auditTime = auditTime_1.auditTime;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar buffer_1 = require('../../operator/buffer');\nObservable_1.Observable.prototype.buffer = buffer_1.buffer;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar bufferCount_1 = require('../../operator/bufferCount');\nObservable_1.Observable.prototype.bufferCount = bufferCount_1.bufferCount;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar bufferTime_1 = require('../../operator/bufferTime');\nObservable_1.Observable.prototype.bufferTime = bufferTime_1.bufferTime;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar bufferToggle_1 = require('../../operator/bufferToggle');\nObservable_1.Observable.prototype.bufferToggle = bufferToggle_1.bufferToggle;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar bufferWhen_1 = require('../../operator/bufferWhen');\nObservable_1.Observable.prototype.bufferWhen = bufferWhen_1.bufferWhen;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar catch_1 = require('../../operator/catch');\nObservable_1.Observable.prototype.catch = catch_1._catch;\nObservable_1.Observable.prototype._catch = catch_1._catch;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar combineAll_1 = require('../../operator/combineAll');\nObservable_1.Observable.prototype.combineAll = combineAll_1.combineAll;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar combineLatest_1 = require('../../operator/combineLatest');\nObservable_1.Observable.prototype.combineLatest = combineLatest_1.combineLatest;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar concat_1 = require('../../operator/concat');\nObservable_1.Observable.prototype.concat = concat_1.concat;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar concatAll_1 = require('../../operator/concatAll');\nObservable_1.Observable.prototype.concatAll = concatAll_1.concatAll;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar concatMap_1 = require('../../operator/concatMap');\nObservable_1.Observable.prototype.concatMap = concatMap_1.concatMap;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar concatMapTo_1 = require('../../operator/concatMapTo');\nObservable_1.Observable.prototype.concatMapTo = concatMapTo_1.concatMapTo;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar count_1 = require('../../operator/count');\nObservable_1.Observable.prototype.count = count_1.count;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar debounce_1 = require('../../operator/debounce');\nObservable_1.Observable.prototype.debounce = debounce_1.debounce;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar debounceTime_1 = require('../../operator/debounceTime');\nObservable_1.Observable.prototype.debounceTime = debounceTime_1.debounceTime;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar defaultIfEmpty_1 = require('../../operator/defaultIfEmpty');\nObservable_1.Observable.prototype.defaultIfEmpty = defaultIfEmpty_1.defaultIfEmpty;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar delay_1 = require('../../operator/delay');\nObservable_1.Observable.prototype.delay = delay_1.delay;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar delayWhen_1 = require('../../operator/delayWhen');\nObservable_1.Observable.prototype.delayWhen = delayWhen_1.delayWhen;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar dematerialize_1 = require('../../operator/dematerialize');\nObservable_1.Observable.prototype.dematerialize = dematerialize_1.dematerialize;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar distinct_1 = require('../../operator/distinct');\nObservable_1.Observable.prototype.distinct = distinct_1.distinct;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar distinctUntilChanged_1 = require('../../operator/distinctUntilChanged');\nObservable_1.Observable.prototype.distinctUntilChanged = distinctUntilChanged_1.distinctUntilChanged;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar distinctUntilKeyChanged_1 = require('../../operator/distinctUntilKeyChanged');\nObservable_1.Observable.prototype.distinctUntilKeyChanged = distinctUntilKeyChanged_1.distinctUntilKeyChanged;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar do_1 = require('../../operator/do');\nObservable_1.Observable.prototype.do = do_1._do;\nObservable_1.Observable.prototype._do = do_1._do;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar elementAt_1 = require('../../operator/elementAt');\nObservable_1.Observable.prototype.elementAt = elementAt_1.elementAt;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar every_1 = require('../../operator/every');\nObservable_1.Observable.prototype.every = every_1.every;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar exhaust_1 = require('../../operator/exhaust');\nObservable_1.Observable.prototype.exhaust = exhaust_1.exhaust;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar exhaustMap_1 = require('../../operator/exhaustMap');\nObservable_1.Observable.prototype.exhaustMap = exhaustMap_1.exhaustMap;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar expand_1 = require('../../operator/expand');\nObservable_1.Observable.prototype.expand = expand_1.expand;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar filter_1 = require('../../operator/filter');\nObservable_1.Observable.prototype.filter = filter_1.filter;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar finally_1 = require('../../operator/finally');\nObservable_1.Observable.prototype.finally = finally_1._finally;\nObservable_1.Observable.prototype._finally = finally_1._finally;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar find_1 = require('../../operator/find');\nObservable_1.Observable.prototype.find = find_1.find;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar findIndex_1 = require('../../operator/findIndex');\nObservable_1.Observable.prototype.findIndex = findIndex_1.findIndex;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar first_1 = require('../../operator/first');\nObservable_1.Observable.prototype.first = first_1.first;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar groupBy_1 = require('../../operator/groupBy');\nObservable_1.Observable.prototype.groupBy = groupBy_1.groupBy;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar ignoreElements_1 = require('../../operator/ignoreElements');\nObservable_1.Observable.prototype.ignoreElements = ignoreElements_1.ignoreElements;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar isEmpty_1 = require('../../operator/isEmpty');\nObservable_1.Observable.prototype.isEmpty = isEmpty_1.isEmpty;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar last_1 = require('../../operator/last');\nObservable_1.Observable.prototype.last = last_1.last;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar let_1 = require('../../operator/let');\nObservable_1.Observable.prototype.let = let_1.letProto;\nObservable_1.Observable.prototype.letBind = let_1.letProto;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar map_1 = require('../../operator/map');\nObservable_1.Observable.prototype.map = map_1.map;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar mapTo_1 = require('../../operator/mapTo');\nObservable_1.Observable.prototype.mapTo = mapTo_1.mapTo;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar materialize_1 = require('../../operator/materialize');\nObservable_1.Observable.prototype.materialize = materialize_1.materialize;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar max_1 = require('../../operator/max');\nObservable_1.Observable.prototype.max = max_1.max;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar merge_1 = require('../../operator/merge');\nObservable_1.Observable.prototype.merge = merge_1.merge;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar mergeAll_1 = require('../../operator/mergeAll');\nObservable_1.Observable.prototype.mergeAll = mergeAll_1.mergeAll;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar mergeMap_1 = require('../../operator/mergeMap');\nObservable_1.Observable.prototype.mergeMap = mergeMap_1.mergeMap;\nObservable_1.Observable.prototype.flatMap = mergeMap_1.mergeMap;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar mergeMapTo_1 = require('../../operator/mergeMapTo');\nObservable_1.Observable.prototype.flatMapTo = mergeMapTo_1.mergeMapTo;\nObservable_1.Observable.prototype.mergeMapTo = mergeMapTo_1.mergeMapTo;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar mergeScan_1 = require('../../operator/mergeScan');\nObservable_1.Observable.prototype.mergeScan = mergeScan_1.mergeScan;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar min_1 = require('../../operator/min');\nObservable_1.Observable.prototype.min = min_1.min;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar multicast_1 = require('../../operator/multicast');\nObservable_1.Observable.prototype.multicast = multicast_1.multicast;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar observeOn_1 = require('../../operator/observeOn');\nObservable_1.Observable.prototype.observeOn = observeOn_1.observeOn;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar onErrorResumeNext_1 = require('../../operator/onErrorResumeNext');\nObservable_1.Observable.prototype.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNext;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar pairwise_1 = require('../../operator/pairwise');\nObservable_1.Observable.prototype.pairwise = pairwise_1.pairwise;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar partition_1 = require('../../operator/partition');\nObservable_1.Observable.prototype.partition = partition_1.partition;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar pluck_1 = require('../../operator/pluck');\nObservable_1.Observable.prototype.pluck = pluck_1.pluck;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar publish_1 = require('../../operator/publish');\nObservable_1.Observable.prototype.publish = publish_1.publish;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar publishBehavior_1 = require('../../operator/publishBehavior');\nObservable_1.Observable.prototype.publishBehavior = publishBehavior_1.publishBehavior;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar publishLast_1 = require('../../operator/publishLast');\nObservable_1.Observable.prototype.publishLast = publishLast_1.publishLast;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar publishReplay_1 = require('../../operator/publishReplay');\nObservable_1.Observable.prototype.publishReplay = publishReplay_1.publishReplay;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar race_1 = require('../../operator/race');\nObservable_1.Observable.prototype.race = race_1.race;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar reduce_1 = require('../../operator/reduce');\nObservable_1.Observable.prototype.reduce = reduce_1.reduce;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar repeat_1 = require('../../operator/repeat');\nObservable_1.Observable.prototype.repeat = repeat_1.repeat;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar repeatWhen_1 = require('../../operator/repeatWhen');\nObservable_1.Observable.prototype.repeatWhen = repeatWhen_1.repeatWhen;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar retry_1 = require('../../operator/retry');\nObservable_1.Observable.prototype.retry = retry_1.retry;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar retryWhen_1 = require('../../operator/retryWhen');\nObservable_1.Observable.prototype.retryWhen = retryWhen_1.retryWhen;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar sample_1 = require('../../operator/sample');\nObservable_1.Observable.prototype.sample = sample_1.sample;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar sampleTime_1 = require('../../operator/sampleTime');\nObservable_1.Observable.prototype.sampleTime = sampleTime_1.sampleTime;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar scan_1 = require('../../operator/scan');\nObservable_1.Observable.prototype.scan = scan_1.scan;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar sequenceEqual_1 = require('../../operator/sequenceEqual');\nObservable_1.Observable.prototype.sequenceEqual = sequenceEqual_1.sequenceEqual;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar share_1 = require('../../operator/share');\nObservable_1.Observable.prototype.share = share_1.share;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar shareReplay_1 = require('../../operator/shareReplay');\nObservable_1.Observable.prototype.shareReplay = shareReplay_1.shareReplay;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar single_1 = require('../../operator/single');\nObservable_1.Observable.prototype.single = single_1.single;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar skip_1 = require('../../operator/skip');\nObservable_1.Observable.prototype.skip = skip_1.skip;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar skipLast_1 = require('../../operator/skipLast');\nObservable_1.Observable.prototype.skipLast = skipLast_1.skipLast;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar skipUntil_1 = require('../../operator/skipUntil');\nObservable_1.Observable.prototype.skipUntil = skipUntil_1.skipUntil;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar skipWhile_1 = require('../../operator/skipWhile');\nObservable_1.Observable.prototype.skipWhile = skipWhile_1.skipWhile;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar startWith_1 = require('../../operator/startWith');\nObservable_1.Observable.prototype.startWith = startWith_1.startWith;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar subscribeOn_1 = require('../../operator/subscribeOn');\nObservable_1.Observable.prototype.subscribeOn = subscribeOn_1.subscribeOn;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar switch_1 = require('../../operator/switch');\nObservable_1.Observable.prototype.switch = switch_1._switch;\nObservable_1.Observable.prototype._switch = switch_1._switch;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar switchMap_1 = require('../../operator/switchMap');\nObservable_1.Observable.prototype.switchMap = switchMap_1.switchMap;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar switchMapTo_1 = require('../../operator/switchMapTo');\nObservable_1.Observable.prototype.switchMapTo = switchMapTo_1.switchMapTo;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar take_1 = require('../../operator/take');\nObservable_1.Observable.prototype.take = take_1.take;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar takeLast_1 = require('../../operator/takeLast');\nObservable_1.Observable.prototype.takeLast = takeLast_1.takeLast;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar takeUntil_1 = require('../../operator/takeUntil');\nObservable_1.Observable.prototype.takeUntil = takeUntil_1.takeUntil;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar takeWhile_1 = require('../../operator/takeWhile');\nObservable_1.Observable.prototype.takeWhile = takeWhile_1.takeWhile;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar throttle_1 = require('../../operator/throttle');\nObservable_1.Observable.prototype.throttle = throttle_1.throttle;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar throttleTime_1 = require('../../operator/throttleTime');\nObservable_1.Observable.prototype.throttleTime = throttleTime_1.throttleTime;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar timeInterval_1 = require('../../operator/timeInterval');\nObservable_1.Observable.prototype.timeInterval = timeInterval_1.timeInterval;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar timeout_1 = require('../../operator/timeout');\nObservable_1.Observable.prototype.timeout = timeout_1.timeout;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar timeoutWith_1 = require('../../operator/timeoutWith');\nObservable_1.Observable.prototype.timeoutWith = timeoutWith_1.timeoutWith;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar timestamp_1 = require('../../operator/timestamp');\nObservable_1.Observable.prototype.timestamp = timestamp_1.timestamp;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar toArray_1 = require('../../operator/toArray');\nObservable_1.Observable.prototype.toArray = toArray_1.toArray;\n","// HACK: does nothing, because `toPromise` now lives on the `Observable` itself.\n// leaving this module here to prevent breakage.\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar window_1 = require('../../operator/window');\nObservable_1.Observable.prototype.window = window_1.window;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar windowCount_1 = require('../../operator/windowCount');\nObservable_1.Observable.prototype.windowCount = windowCount_1.windowCount;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar windowTime_1 = require('../../operator/windowTime');\nObservable_1.Observable.prototype.windowTime = windowTime_1.windowTime;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar windowToggle_1 = require('../../operator/windowToggle');\nObservable_1.Observable.prototype.windowToggle = windowToggle_1.windowToggle;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar windowWhen_1 = require('../../operator/windowWhen');\nObservable_1.Observable.prototype.windowWhen = windowWhen_1.windowWhen;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar withLatestFrom_1 = require('../../operator/withLatestFrom');\nObservable_1.Observable.prototype.withLatestFrom = withLatestFrom_1.withLatestFrom;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar zip_1 = require('../../operator/zip');\nObservable_1.Observable.prototype.zip = zip_1.zipProto;\n","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar zipAll_1 = require('../../operator/zipAll');\nObservable_1.Observable.prototype.zipAll = zipAll_1.zipAll;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar ScalarObservable_1 = require('./ScalarObservable');\nvar EmptyObservable_1 = require('./EmptyObservable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ArrayLikeObservable = (function (_super) {\n    __extends(ArrayLikeObservable, _super);\n    function ArrayLikeObservable(arrayLike, scheduler) {\n        _super.call(this);\n        this.arrayLike = arrayLike;\n        this.scheduler = scheduler;\n        if (!scheduler && arrayLike.length === 1) {\n            this._isScalar = true;\n            this.value = arrayLike[0];\n        }\n    }\n    ArrayLikeObservable.create = function (arrayLike, scheduler) {\n        var length = arrayLike.length;\n        if (length === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        else if (length === 1) {\n            return new ScalarObservable_1.ScalarObservable(arrayLike[0], scheduler);\n        }\n        else {\n            return new ArrayLikeObservable(arrayLike, scheduler);\n        }\n    };\n    ArrayLikeObservable.dispatch = function (state) {\n        var arrayLike = state.arrayLike, index = state.index, length = state.length, subscriber = state.subscriber;\n        if (subscriber.closed) {\n            return;\n        }\n        if (index >= length) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(arrayLike[index]);\n        state.index = index + 1;\n        this.schedule(state);\n    };\n    /** @deprecated internal use only */ ArrayLikeObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var _a = this, arrayLike = _a.arrayLike, scheduler = _a.scheduler;\n        var length = arrayLike.length;\n        if (scheduler) {\n            return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n                arrayLike: arrayLike, index: index, length: length, subscriber: subscriber\n            });\n        }\n        else {\n            for (var i = 0; i < length && !subscriber.closed; i++) {\n                subscriber.next(arrayLike[i]);\n            }\n            subscriber.complete();\n        }\n    };\n    return ArrayLikeObservable;\n}(Observable_1.Observable));\nexports.ArrayLikeObservable = ArrayLikeObservable;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar ScalarObservable_1 = require('./ScalarObservable');\nvar EmptyObservable_1 = require('./EmptyObservable');\nvar isScheduler_1 = require('../util/isScheduler');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ArrayObservable = (function (_super) {\n    __extends(ArrayObservable, _super);\n    function ArrayObservable(array, scheduler) {\n        _super.call(this);\n        this.array = array;\n        this.scheduler = scheduler;\n        if (!scheduler && array.length === 1) {\n            this._isScalar = true;\n            this.value = array[0];\n        }\n    }\n    ArrayObservable.create = function (array, scheduler) {\n        return new ArrayObservable(array, scheduler);\n    };\n    /**\n     * Creates an Observable that emits some values you specify as arguments,\n     * immediately one after the other, and then emits a complete notification.\n     *\n     * <span class=\"informal\">Emits the arguments you provide, then completes.\n     * </span>\n     *\n     * <img src=\"./img/of.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that only\n     * emits the arguments given, and the complete notification thereafter. It can\n     * be used for composing with other Observables, such as with {@link concat}.\n     * By default, it uses a `null` IScheduler, which means the `next`\n     * notifications are sent synchronously, although with a different IScheduler\n     * it is possible to determine when those notifications will be delivered.\n     *\n     * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n     * var numbers = Rx.Observable.of(10, 20, 30);\n     * var letters = Rx.Observable.of('a', 'b', 'c');\n     * var interval = Rx.Observable.interval(1000);\n     * var result = numbers.concat(letters).concat(interval);\n     * result.subscribe(x => console.log(x));\n     *\n     * @see {@link create}\n     * @see {@link empty}\n     * @see {@link never}\n     * @see {@link throw}\n     *\n     * @param {...T} values Arguments that represent `next` values to be emitted.\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emissions of the `next` notifications.\n     * @return {Observable<T>} An Observable that emits each given input value.\n     * @static true\n     * @name of\n     * @owner Observable\n     */\n    ArrayObservable.of = function () {\n        var array = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            array[_i - 0] = arguments[_i];\n        }\n        var scheduler = array[array.length - 1];\n        if (isScheduler_1.isScheduler(scheduler)) {\n            array.pop();\n        }\n        else {\n            scheduler = null;\n        }\n        var len = array.length;\n        if (len > 1) {\n            return new ArrayObservable(array, scheduler);\n        }\n        else if (len === 1) {\n            return new ScalarObservable_1.ScalarObservable(array[0], scheduler);\n        }\n        else {\n            return new EmptyObservable_1.EmptyObservable(scheduler);\n        }\n    };\n    ArrayObservable.dispatch = function (state) {\n        var array = state.array, index = state.index, count = state.count, subscriber = state.subscriber;\n        if (index >= count) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(array[index]);\n        if (subscriber.closed) {\n            return;\n        }\n        state.index = index + 1;\n        this.schedule(state);\n    };\n    /** @deprecated internal use only */ ArrayObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var array = this.array;\n        var count = array.length;\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(ArrayObservable.dispatch, 0, {\n                array: array, index: index, count: count, subscriber: subscriber\n            });\n        }\n        else {\n            for (var i = 0; i < count && !subscriber.closed; i++) {\n                subscriber.next(array[i]);\n            }\n            subscriber.complete();\n        }\n    };\n    return ArrayObservable;\n}(Observable_1.Observable));\nexports.ArrayObservable = ArrayObservable;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar AsyncSubject_1 = require('../AsyncSubject');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar BoundCallbackObservable = (function (_super) {\n    __extends(BoundCallbackObservable, _super);\n    function BoundCallbackObservable(callbackFunc, selector, args, context, scheduler) {\n        _super.call(this);\n        this.callbackFunc = callbackFunc;\n        this.selector = selector;\n        this.args = args;\n        this.context = context;\n        this.scheduler = scheduler;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * Converts a callback API to a function that returns an Observable.\n     *\n     * <span class=\"informal\">Give it a function `f` of type `f(x, callback)` and\n     * it will return a function `g` that when called as `g(x)` will output an\n     * Observable.</span>\n     *\n     * `bindCallback` is not an operator because its input and output are not\n     * Observables. The input is a function `func` with some parameters, the\n     * last parameter must be a callback function that `func` calls when it is\n     * done.\n     *\n     * The output of `bindCallback` is a function that takes the same parameters\n     * as `func`, except the last one (the callback). When the output function\n     * is called with arguments it will return an Observable. If function `func`\n     * calls its callback with one argument the Observable will emit that value.\n     * If on the other hand the callback is called with multiple values the resulting\n     * Observable will emit an array with said values as arguments.\n     *\n     * It is very important to remember that input function `func` is not called\n     * when the output function is, but rather when the Observable returned by the output\n     * function is subscribed. This means if `func` makes an AJAX request, that request\n     * will be made every time someone subscribes to the resulting Observable, but not before.\n     *\n     * Optionally, a selector function can be passed to `bindObservable`. The selector function\n     * takes the same arguments as the callback and returns the value that will be emitted by the Observable.\n     * Even though by default multiple arguments passed to callback appear in the stream as an array\n     * the selector function will be called with arguments directly, just as the callback would.\n     * This means you can imagine the default selector (when one is not provided explicitly)\n     * as a function that aggregates all its arguments into an array, or simply returns first argument\n     * if there is only one.\n     *\n     * The last optional parameter - {@link Scheduler} - can be used to control when the call\n     * to `func` happens after someone subscribes to Observable, as well as when results\n     * passed to callback will be emitted. By default, the subscription to  an Observable calls `func`\n     * synchronously, but using `Scheduler.async` as the last parameter will defer the call to `func`,\n     * just like wrapping the call in `setTimeout` with a timeout of `0` would. If you use the async Scheduler\n     * and call `subscribe` on the output Observable all function calls that are currently executing\n     * will end before `func` is invoked.\n     *\n     * By default results passed to the callback are emitted immediately after `func` invokes the callback.\n     * In particular, if the callback is called synchronously the subscription of the resulting Observable\n     * will call the `next` function synchronously as well.  If you want to defer that call,\n     * you may use `Scheduler.async` just as before.  This means that by using `Scheduler.async` you can\n     * ensure that `func` always calls its callback asynchronously, thus avoiding terrifying Zalgo.\n     *\n     * Note that the Observable created by the output function will always emit a single value\n     * and then complete immediately. If `func` calls the callback multiple times, values from subsequent\n     * calls will not appear in the stream. If you need to listen for multiple calls,\n     *  you probably want to use {@link fromEvent} or {@link fromEventPattern} instead.\n     *\n     * If `func` depends on some context (`this` property) and is not already bound the context of `func`\n     * will be the context that the output function has at call time. In particular, if `func`\n     * is called as a method of some objec and if `func` is not already bound, in order to preserve the context\n     * it is recommended that the context of the output function is set to that object as well.\n     *\n     * If the input function calls its callback in the \"node style\" (i.e. first argument to callback is\n     * optional error parameter signaling whether the call failed or not), {@link bindNodeCallback}\n     * provides convenient error handling and probably is a better choice.\n     * `bindCallback` will treat such functions the same as any other and error parameters\n     * (whether passed or not) will always be interpreted as regular callback argument.\n     *\n     *\n     * @example <caption>Convert jQuery's getJSON to an Observable API</caption>\n     * // Suppose we have jQuery.getJSON('/my/url', callback)\n     * var getJSONAsObservable = Rx.Observable.bindCallback(jQuery.getJSON);\n     * var result = getJSONAsObservable('/my/url');\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     *\n     * @example <caption>Receive an array of arguments passed to a callback</caption>\n     * someFunction((a, b, c) => {\n     *   console.log(a); // 5\n     *   console.log(b); // 'some string'\n     *   console.log(c); // {someProperty: 'someValue'}\n     * });\n     *\n     * const boundSomeFunction = Rx.Observable.bindCallback(someFunction);\n     * boundSomeFunction().subscribe(values => {\n     *   console.log(values) // [5, 'some string', {someProperty: 'someValue'}]\n     * });\n     *\n     *\n     * @example <caption>Use bindCallback with a selector function</caption>\n     * someFunction((a, b, c) => {\n     *   console.log(a); // 'a'\n     *   console.log(b); // 'b'\n     *   console.log(c); // 'c'\n     * });\n     *\n     * const boundSomeFunction = Rx.Observable.bindCallback(someFunction, (a, b, c) => a + b + c);\n     * boundSomeFunction().subscribe(value => {\n     *   console.log(value) // 'abc'\n     * });\n     *\n     *\n     * @example <caption>Compare behaviour with and without async Scheduler</caption>\n     * function iCallMyCallbackSynchronously(cb) {\n     *   cb();\n     * }\n     *\n     * const boundSyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously);\n     * const boundAsyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously, null, Rx.Scheduler.async);\n     *\n     * boundSyncFn().subscribe(() => console.log('I was sync!'));\n     * boundAsyncFn().subscribe(() => console.log('I was async!'));\n     * console.log('This happened...');\n     *\n     * // Logs:\n     * // I was sync!\n     * // This happened...\n     * // I was async!\n     *\n     *\n     * @example <caption>Use bindCallback on an object method</caption>\n     * const boundMethod = Rx.Observable.bindCallback(someObject.methodWithCallback);\n     * boundMethod.call(someObject) // make sure methodWithCallback has access to someObject\n     * .subscribe(subscriber);\n     *\n     *\n     * @see {@link bindNodeCallback}\n     * @see {@link from}\n     * @see {@link fromPromise}\n     *\n     * @param {function} func A function with a callback as the last parameter.\n     * @param {function} [selector] A function which takes the arguments from the\n     * callback and maps them to a value that is emitted on the output Observable.\n     * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n     * callbacks.\n     * @return {function(...params: *): Observable} A function which returns the\n     * Observable that delivers the same values the callback would deliver.\n     * @static true\n     * @name bindCallback\n     * @owner Observable\n     */\n    BoundCallbackObservable.create = function (func, selector, scheduler) {\n        if (selector === void 0) { selector = undefined; }\n        return function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            return new BoundCallbackObservable(func, selector, args, this, scheduler);\n        };\n    };\n    /** @deprecated internal use only */ BoundCallbackObservable.prototype._subscribe = function (subscriber) {\n        var callbackFunc = this.callbackFunc;\n        var args = this.args;\n        var scheduler = this.scheduler;\n        var subject = this.subject;\n        if (!scheduler) {\n            if (!subject) {\n                subject = this.subject = new AsyncSubject_1.AsyncSubject();\n                var handler = function handlerFn() {\n                    var innerArgs = [];\n                    for (var _i = 0; _i < arguments.length; _i++) {\n                        innerArgs[_i - 0] = arguments[_i];\n                    }\n                    var source = handlerFn.source;\n                    var selector = source.selector, subject = source.subject;\n                    if (selector) {\n                        var result_1 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n                        if (result_1 === errorObject_1.errorObject) {\n                            subject.error(errorObject_1.errorObject.e);\n                        }\n                        else {\n                            subject.next(result_1);\n                            subject.complete();\n                        }\n                    }\n                    else {\n                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n                        subject.complete();\n                    }\n                };\n                // use named function instance to avoid closure.\n                handler.source = this;\n                var result = tryCatch_1.tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n                if (result === errorObject_1.errorObject) {\n                    subject.error(errorObject_1.errorObject.e);\n                }\n            }\n            return subject.subscribe(subscriber);\n        }\n        else {\n            return scheduler.schedule(BoundCallbackObservable.dispatch, 0, { source: this, subscriber: subscriber, context: this.context });\n        }\n    };\n    BoundCallbackObservable.dispatch = function (state) {\n        var self = this;\n        var source = state.source, subscriber = state.subscriber, context = state.context;\n        var callbackFunc = source.callbackFunc, args = source.args, scheduler = source.scheduler;\n        var subject = source.subject;\n        if (!subject) {\n            subject = source.subject = new AsyncSubject_1.AsyncSubject();\n            var handler = function handlerFn() {\n                var innerArgs = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    innerArgs[_i - 0] = arguments[_i];\n                }\n                var source = handlerFn.source;\n                var selector = source.selector, subject = source.subject;\n                if (selector) {\n                    var result_2 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n                    if (result_2 === errorObject_1.errorObject) {\n                        self.add(scheduler.schedule(dispatchError, 0, { err: errorObject_1.errorObject.e, subject: subject }));\n                    }\n                    else {\n                        self.add(scheduler.schedule(dispatchNext, 0, { value: result_2, subject: subject }));\n                    }\n                }\n                else {\n                    var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n                    self.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));\n                }\n            };\n            // use named function to pass values in without closure\n            handler.source = source;\n            var result = tryCatch_1.tryCatch(callbackFunc).apply(context, args.concat(handler));\n            if (result === errorObject_1.errorObject) {\n                subject.error(errorObject_1.errorObject.e);\n            }\n        }\n        self.add(subject.subscribe(subscriber));\n    };\n    return BoundCallbackObservable;\n}(Observable_1.Observable));\nexports.BoundCallbackObservable = BoundCallbackObservable;\nfunction dispatchNext(arg) {\n    var value = arg.value, subject = arg.subject;\n    subject.next(value);\n    subject.complete();\n}\nfunction dispatchError(arg) {\n    var err = arg.err, subject = arg.subject;\n    subject.error(err);\n}\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar AsyncSubject_1 = require('../AsyncSubject');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar BoundNodeCallbackObservable = (function (_super) {\n    __extends(BoundNodeCallbackObservable, _super);\n    function BoundNodeCallbackObservable(callbackFunc, selector, args, context, scheduler) {\n        _super.call(this);\n        this.callbackFunc = callbackFunc;\n        this.selector = selector;\n        this.args = args;\n        this.context = context;\n        this.scheduler = scheduler;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * Converts a Node.js-style callback API to a function that returns an\n     * Observable.\n     *\n     * <span class=\"informal\">It's just like {@link bindCallback}, but the\n     * callback is expected to be of type `callback(error, result)`.</span>\n     *\n     * `bindNodeCallback` is not an operator because its input and output are not\n     * Observables. The input is a function `func` with some parameters, but the\n     * last parameter must be a callback function that `func` calls when it is\n     * done. The callback function is expected to follow Node.js conventions,\n     * where the first argument to the callback is an error object, signaling\n     * whether call was successful. If that object is passed to callback, it means\n     * something went wrong.\n     *\n     * The output of `bindNodeCallback` is a function that takes the same\n     * parameters as `func`, except the last one (the callback). When the output\n     * function is called with arguments, it will return an Observable.\n     * If `func` calls its callback with error parameter present, Observable will\n     * error with that value as well. If error parameter is not passed, Observable will emit\n     * second parameter. If there are more parameters (third and so on),\n     * Observable will emit an array with all arguments, except first error argument.\n     *\n     * Optionally `bindNodeCallback` accepts selector function, which allows you to\n     * make resulting Observable emit value computed by selector, instead of regular\n     * callback arguments. It works similarly to {@link bindCallback} selector, but\n     * Node.js-style error argument will never be passed to that function.\n     *\n     * Note that `func` will not be called at the same time output function is,\n     * but rather whenever resulting Observable is subscribed. By default call to\n     * `func` will happen synchronously after subscription, but that can be changed\n     * with proper {@link Scheduler} provided as optional third parameter. Scheduler\n     * can also control when values from callback will be emitted by Observable.\n     * To find out more, check out documentation for {@link bindCallback}, where\n     * Scheduler works exactly the same.\n     *\n     * As in {@link bindCallback}, context (`this` property) of input function will be set to context\n     * of returned function, when it is called.\n     *\n     * After Observable emits value, it will complete immediately. This means\n     * even if `func` calls callback again, values from second and consecutive\n     * calls will never appear on the stream. If you need to handle functions\n     * that call callbacks multiple times, check out {@link fromEvent} or\n     * {@link fromEventPattern} instead.\n     *\n     * Note that `bindNodeCallback` can be used in non-Node.js environments as well.\n     * \"Node.js-style\" callbacks are just a convention, so if you write for\n     * browsers or any other environment and API you use implements that callback style,\n     * `bindNodeCallback` can be safely used on that API functions as well.\n     *\n     * Remember that Error object passed to callback does not have to be an instance\n     * of JavaScript built-in `Error` object. In fact, it does not even have to an object.\n     * Error parameter of callback function is interpreted as \"present\", when value\n     * of that parameter is truthy. It could be, for example, non-zero number, non-empty\n     * string or boolean `true`. In all of these cases resulting Observable would error\n     * with that value. This means usually regular style callbacks will fail very often when\n     * `bindNodeCallback` is used. If your Observable errors much more often then you\n     * would expect, check if callback really is called in Node.js-style and, if not,\n     * switch to {@link bindCallback} instead.\n     *\n     * Note that even if error parameter is technically present in callback, but its value\n     * is falsy, it still won't appear in array emitted by Observable or in selector function.\n     *\n     *\n     * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>\n     * import * as fs from 'fs';\n     * var readFileAsObservable = Rx.Observable.bindNodeCallback(fs.readFile);\n     * var result = readFileAsObservable('./roadNames.txt', 'utf8');\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     *\n     * @example <caption>Use on function calling callback with multiple arguments</caption>\n     * someFunction((err, a, b) => {\n     *   console.log(err); // null\n     *   console.log(a); // 5\n     *   console.log(b); // \"some string\"\n     * });\n     * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n     * boundSomeFunction()\n     * .subscribe(value => {\n     *   console.log(value); // [5, \"some string\"]\n     * });\n     *\n     *\n     * @example <caption>Use with selector function</caption>\n     * someFunction((err, a, b) => {\n     *   console.log(err); // undefined\n     *   console.log(a); // \"abc\"\n     *   console.log(b); // \"DEF\"\n     * });\n     * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction, (a, b) => a + b);\n     * boundSomeFunction()\n     * .subscribe(value => {\n     *   console.log(value); // \"abcDEF\"\n     * });\n     *\n     *\n     * @example <caption>Use on function calling callback in regular style</caption>\n     * someFunction(a => {\n     *   console.log(a); // 5\n     * });\n     * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n     * boundSomeFunction()\n     * .subscribe(\n     *   value => {}             // never gets called\n     *   err => console.log(err) // 5\n     *);\n     *\n     *\n     * @see {@link bindCallback}\n     * @see {@link from}\n     * @see {@link fromPromise}\n     *\n     * @param {function} func Function with a Node.js-style callback as the last parameter.\n     * @param {function} [selector] A function which takes the arguments from the\n     * callback and maps those to a value to emit on the output Observable.\n     * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n     * callbacks.\n     * @return {function(...params: *): Observable} A function which returns the\n     * Observable that delivers the same values the Node.js callback would\n     * deliver.\n     * @static true\n     * @name bindNodeCallback\n     * @owner Observable\n     */\n    BoundNodeCallbackObservable.create = function (func, selector, scheduler) {\n        if (selector === void 0) { selector = undefined; }\n        return function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            return new BoundNodeCallbackObservable(func, selector, args, this, scheduler);\n        };\n    };\n    /** @deprecated internal use only */ BoundNodeCallbackObservable.prototype._subscribe = function (subscriber) {\n        var callbackFunc = this.callbackFunc;\n        var args = this.args;\n        var scheduler = this.scheduler;\n        var subject = this.subject;\n        if (!scheduler) {\n            if (!subject) {\n                subject = this.subject = new AsyncSubject_1.AsyncSubject();\n                var handler = function handlerFn() {\n                    var innerArgs = [];\n                    for (var _i = 0; _i < arguments.length; _i++) {\n                        innerArgs[_i - 0] = arguments[_i];\n                    }\n                    var source = handlerFn.source;\n                    var selector = source.selector, subject = source.subject;\n                    var err = innerArgs.shift();\n                    if (err) {\n                        subject.error(err);\n                    }\n                    else if (selector) {\n                        var result_1 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n                        if (result_1 === errorObject_1.errorObject) {\n                            subject.error(errorObject_1.errorObject.e);\n                        }\n                        else {\n                            subject.next(result_1);\n                            subject.complete();\n                        }\n                    }\n                    else {\n                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n                        subject.complete();\n                    }\n                };\n                // use named function instance to avoid closure.\n                handler.source = this;\n                var result = tryCatch_1.tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n                if (result === errorObject_1.errorObject) {\n                    subject.error(errorObject_1.errorObject.e);\n                }\n            }\n            return subject.subscribe(subscriber);\n        }\n        else {\n            return scheduler.schedule(dispatch, 0, { source: this, subscriber: subscriber, context: this.context });\n        }\n    };\n    return BoundNodeCallbackObservable;\n}(Observable_1.Observable));\nexports.BoundNodeCallbackObservable = BoundNodeCallbackObservable;\nfunction dispatch(state) {\n    var self = this;\n    var source = state.source, subscriber = state.subscriber, context = state.context;\n    // XXX: cast to `any` to access to the private field in `source`.\n    var _a = source, callbackFunc = _a.callbackFunc, args = _a.args, scheduler = _a.scheduler;\n    var subject = source.subject;\n    if (!subject) {\n        subject = source.subject = new AsyncSubject_1.AsyncSubject();\n        var handler = function handlerFn() {\n            var innerArgs = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                innerArgs[_i - 0] = arguments[_i];\n            }\n            var source = handlerFn.source;\n            var selector = source.selector, subject = source.subject;\n            var err = innerArgs.shift();\n            if (err) {\n                self.add(scheduler.schedule(dispatchError, 0, { err: err, subject: subject }));\n            }\n            else if (selector) {\n                var result_2 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n                if (result_2 === errorObject_1.errorObject) {\n                    self.add(scheduler.schedule(dispatchError, 0, { err: errorObject_1.errorObject.e, subject: subject }));\n                }\n                else {\n                    self.add(scheduler.schedule(dispatchNext, 0, { value: result_2, subject: subject }));\n                }\n            }\n            else {\n                var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n                self.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));\n            }\n        };\n        // use named function to pass values in without closure\n        handler.source = source;\n        var result = tryCatch_1.tryCatch(callbackFunc).apply(context, args.concat(handler));\n        if (result === errorObject_1.errorObject) {\n            self.add(scheduler.schedule(dispatchError, 0, { err: errorObject_1.errorObject.e, subject: subject }));\n        }\n    }\n    self.add(subject.subscribe(subscriber));\n}\nfunction dispatchNext(arg) {\n    var value = arg.value, subject = arg.subject;\n    subject.next(value);\n    subject.complete();\n}\nfunction dispatchError(arg) {\n    var err = arg.err, subject = arg.subject;\n    subject.error(err);\n}\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar Observable_1 = require('../Observable');\nvar Subscriber_1 = require('../Subscriber');\nvar Subscription_1 = require('../Subscription');\nvar refCount_1 = require('../operators/refCount');\n/**\n * @class ConnectableObservable<T>\n */\nvar ConnectableObservable = (function (_super) {\n    __extends(ConnectableObservable, _super);\n    function ConnectableObservable(/** @deprecated internal use only */ source, \n        /** @deprecated internal use only */ subjectFactory) {\n        _super.call(this);\n        this.source = source;\n        this.subjectFactory = subjectFactory;\n        /** @deprecated internal use only */ this._refCount = 0;\n        this._isComplete = false;\n    }\n    /** @deprecated internal use only */ ConnectableObservable.prototype._subscribe = function (subscriber) {\n        return this.getSubject().subscribe(subscriber);\n    };\n    /** @deprecated internal use only */ ConnectableObservable.prototype.getSubject = function () {\n        var subject = this._subject;\n        if (!subject || subject.isStopped) {\n            this._subject = this.subjectFactory();\n        }\n        return this._subject;\n    };\n    ConnectableObservable.prototype.connect = function () {\n        var connection = this._connection;\n        if (!connection) {\n            this._isComplete = false;\n            connection = this._connection = new Subscription_1.Subscription();\n            connection.add(this.source\n                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n            if (connection.closed) {\n                this._connection = null;\n                connection = Subscription_1.Subscription.EMPTY;\n            }\n            else {\n                this._connection = connection;\n            }\n        }\n        return connection;\n    };\n    ConnectableObservable.prototype.refCount = function () {\n        return refCount_1.refCount()(this);\n    };\n    return ConnectableObservable;\n}(Observable_1.Observable));\nexports.ConnectableObservable = ConnectableObservable;\nvar connectableProto = ConnectableObservable.prototype;\nexports.connectableObservableDescriptor = {\n    operator: { value: null },\n    _refCount: { value: 0, writable: true },\n    _subject: { value: null, writable: true },\n    _connection: { value: null, writable: true },\n    _subscribe: { value: connectableProto._subscribe },\n    _isComplete: { value: connectableProto._isComplete, writable: true },\n    getSubject: { value: connectableProto.getSubject },\n    connect: { value: connectableProto.connect },\n    refCount: { value: connectableProto.refCount }\n};\nvar ConnectableSubscriber = (function (_super) {\n    __extends(ConnectableSubscriber, _super);\n    function ConnectableSubscriber(destination, connectable) {\n        _super.call(this, destination);\n        this.connectable = connectable;\n    }\n    ConnectableSubscriber.prototype._error = function (err) {\n        this._unsubscribe();\n        _super.prototype._error.call(this, err);\n    };\n    ConnectableSubscriber.prototype._complete = function () {\n        this.connectable._isComplete = true;\n        this._unsubscribe();\n        _super.prototype._complete.call(this);\n    };\n    /** @deprecated internal use only */ ConnectableSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (connectable) {\n            this.connectable = null;\n            var connection = connectable._connection;\n            connectable._refCount = 0;\n            connectable._subject = null;\n            connectable._connection = null;\n            if (connection) {\n                connection.unsubscribe();\n            }\n        }\n    };\n    return ConnectableSubscriber;\n}(Subject_1.SubjectSubscriber));\nvar RefCountOperator = (function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}());\nvar RefCountSubscriber = (function (_super) {\n    __extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        _super.call(this, destination);\n        this.connectable = connectable;\n    }\n    /** @deprecated internal use only */ RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        ///\n        // Compare the local RefCountSubscriber's connection Subscription to the\n        // connection Subscription on the shared ConnectableObservable. In cases\n        // where the ConnectableObservable source synchronously emits values, and\n        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n        // execution continues to here before the RefCountOperator has a chance to\n        // supply the RefCountSubscriber with the shared connection Subscription.\n        // For example:\n        // ```\n        // Observable.range(0, 10)\n        //   .publish()\n        //   .refCount()\n        //   .take(5)\n        //   .subscribe();\n        // ```\n        // In order to account for this case, RefCountSubscriber should only dispose\n        // the ConnectableObservable's shared connection Subscription if the\n        // connection Subscription exists, *and* either:\n        //   a. RefCountSubscriber doesn't have a reference to the shared connection\n        //      Subscription yet, or,\n        //   b. RefCountSubscriber's connection Subscription reference is identical\n        //      to the shared connection Subscription\n        ///\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar DeferObservable = (function (_super) {\n    __extends(DeferObservable, _super);\n    function DeferObservable(observableFactory) {\n        _super.call(this);\n        this.observableFactory = observableFactory;\n    }\n    /**\n     * Creates an Observable that, on subscribe, calls an Observable factory to\n     * make an Observable for each new Observer.\n     *\n     * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n     * is subscribed.\n     * </span>\n     *\n     * <img src=\"./img/defer.png\" width=\"100%\">\n     *\n     * `defer` allows you to create the Observable only when the Observer\n     * subscribes, and create a fresh Observable for each Observer. It waits until\n     * an Observer subscribes to it, and then it generates an Observable,\n     * typically with an Observable factory function. It does this afresh for each\n     * subscriber, so although each subscriber may think it is subscribing to the\n     * same Observable, in fact each subscriber gets its own individual\n     * Observable.\n     *\n     * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>\n     * var clicksOrInterval = Rx.Observable.defer(function () {\n     *   if (Math.random() > 0.5) {\n     *     return Rx.Observable.fromEvent(document, 'click');\n     *   } else {\n     *     return Rx.Observable.interval(1000);\n     *   }\n     * });\n     * clicksOrInterval.subscribe(x => console.log(x));\n     *\n     * // Results in the following behavior:\n     * // If the result of Math.random() is greater than 0.5 it will listen\n     * // for clicks anywhere on the \"document\"; when document is clicked it\n     * // will log a MouseEvent object to the console. If the result is less\n     * // than 0.5 it will emit ascending numbers, one every second(1000ms).\n     *\n     * @see {@link create}\n     *\n     * @param {function(): SubscribableOrPromise} observableFactory The Observable\n     * factory function to invoke for each Observer that subscribes to the output\n     * Observable. May also return a Promise, which will be converted on the fly\n     * to an Observable.\n     * @return {Observable} An Observable whose Observers' subscriptions trigger\n     * an invocation of the given Observable factory function.\n     * @static true\n     * @name defer\n     * @owner Observable\n     */\n    DeferObservable.create = function (observableFactory) {\n        return new DeferObservable(observableFactory);\n    };\n    /** @deprecated internal use only */ DeferObservable.prototype._subscribe = function (subscriber) {\n        return new DeferSubscriber(subscriber, this.observableFactory);\n    };\n    return DeferObservable;\n}(Observable_1.Observable));\nexports.DeferObservable = DeferObservable;\nvar DeferSubscriber = (function (_super) {\n    __extends(DeferSubscriber, _super);\n    function DeferSubscriber(destination, factory) {\n        _super.call(this, destination);\n        this.factory = factory;\n        this.tryDefer();\n    }\n    DeferSubscriber.prototype.tryDefer = function () {\n        try {\n            this._callFactory();\n        }\n        catch (err) {\n            this._error(err);\n        }\n    };\n    DeferSubscriber.prototype._callFactory = function () {\n        var result = this.factory();\n        if (result) {\n            this.add(subscribeToResult_1.subscribeToResult(this, result));\n        }\n    };\n    return DeferSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar EmptyObservable = (function (_super) {\n    __extends(EmptyObservable, _super);\n    function EmptyObservable(scheduler) {\n        _super.call(this);\n        this.scheduler = scheduler;\n    }\n    /**\n     * Creates an Observable that emits no items to the Observer and immediately\n     * emits a complete notification.\n     *\n     * <span class=\"informal\">Just emits 'complete', and nothing else.\n     * </span>\n     *\n     * <img src=\"./img/empty.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that only\n     * emits the complete notification. It can be used for composing with other\n     * Observables, such as in a {@link mergeMap}.\n     *\n     * @example <caption>Emit the number 7, then complete.</caption>\n     * var result = Rx.Observable.empty().startWith(7);\n     * result.subscribe(x => console.log(x));\n     *\n     * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n     * var interval = Rx.Observable.interval(1000);\n     * var result = interval.mergeMap(x =>\n     *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n     * );\n     * result.subscribe(x => console.log(x));\n     *\n     * // Results in the following to the console:\n     * // x is equal to the count on the interval eg(0,1,2,3,...)\n     * // x will occur every 1000ms\n     * // if x % 2 is equal to 1 print abc\n     * // if x % 2 is not equal to 1 nothing will be output\n     *\n     * @see {@link create}\n     * @see {@link never}\n     * @see {@link of}\n     * @see {@link throw}\n     *\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emission of the complete notification.\n     * @return {Observable} An \"empty\" Observable: emits only the complete\n     * notification.\n     * @static true\n     * @name empty\n     * @owner Observable\n     */\n    EmptyObservable.create = function (scheduler) {\n        return new EmptyObservable(scheduler);\n    };\n    EmptyObservable.dispatch = function (arg) {\n        var subscriber = arg.subscriber;\n        subscriber.complete();\n    };\n    /** @deprecated internal use only */ EmptyObservable.prototype._subscribe = function (subscriber) {\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber: subscriber });\n        }\n        else {\n            subscriber.complete();\n        }\n    };\n    return EmptyObservable;\n}(Observable_1.Observable));\nexports.EmptyObservable = EmptyObservable;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ErrorObservable = (function (_super) {\n    __extends(ErrorObservable, _super);\n    function ErrorObservable(error, scheduler) {\n        _super.call(this);\n        this.error = error;\n        this.scheduler = scheduler;\n    }\n    /**\n     * Creates an Observable that emits no items to the Observer and immediately\n     * emits an error notification.\n     *\n     * <span class=\"informal\">Just emits 'error', and nothing else.\n     * </span>\n     *\n     * <img src=\"./img/throw.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that only\n     * emits the error notification. It can be used for composing with other\n     * Observables, such as in a {@link mergeMap}.\n     *\n     * @example <caption>Emit the number 7, then emit an error.</caption>\n     * var result = Rx.Observable.throw(new Error('oops!')).startWith(7);\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     * @example <caption>Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>\n     * var interval = Rx.Observable.interval(1000);\n     * var result = interval.mergeMap(x =>\n     *   x === 13 ?\n     *     Rx.Observable.throw('Thirteens are bad') :\n     *     Rx.Observable.of('a', 'b', 'c')\n     * );\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     * @see {@link create}\n     * @see {@link empty}\n     * @see {@link never}\n     * @see {@link of}\n     *\n     * @param {any} error The particular Error to pass to the error notification.\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emission of the error notification.\n     * @return {Observable} An error Observable: emits only the error notification\n     * using the given error argument.\n     * @static true\n     * @name throw\n     * @owner Observable\n     */\n    ErrorObservable.create = function (error, scheduler) {\n        return new ErrorObservable(error, scheduler);\n    };\n    ErrorObservable.dispatch = function (arg) {\n        var error = arg.error, subscriber = arg.subscriber;\n        subscriber.error(error);\n    };\n    /** @deprecated internal use only */ ErrorObservable.prototype._subscribe = function (subscriber) {\n        var error = this.error;\n        var scheduler = this.scheduler;\n        subscriber.syncErrorThrowable = true;\n        if (scheduler) {\n            return scheduler.schedule(ErrorObservable.dispatch, 0, {\n                error: error, subscriber: subscriber\n            });\n        }\n        else {\n            subscriber.error(error);\n        }\n    };\n    return ErrorObservable;\n}(Observable_1.Observable));\nexports.ErrorObservable = ErrorObservable;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar EmptyObservable_1 = require('./EmptyObservable');\nvar isArray_1 = require('../util/isArray');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ForkJoinObservable = (function (_super) {\n    __extends(ForkJoinObservable, _super);\n    function ForkJoinObservable(sources, resultSelector) {\n        _super.call(this);\n        this.sources = sources;\n        this.resultSelector = resultSelector;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * Joins last values emitted by passed Observables.\n     *\n     * <span class=\"informal\">Wait for Observables to complete and then combine last values they emitted.</span>\n     *\n     * <img src=\"./img/forkJoin.png\" width=\"100%\">\n     *\n     * `forkJoin` is an operator that takes any number of Observables which can be passed either as an array\n     * or directly as arguments. If no input Observables are provided, resulting stream will complete\n     * immediately.\n     *\n     * `forkJoin` will wait for all passed Observables to complete and then it will emit an array with last\n     * values from corresponding Observables. So if you pass `n` Observables to the operator, resulting\n     * array will have `n` values, where first value is the last thing emitted by the first Observable,\n     * second value is the last thing emitted by the second Observable and so on. That means `forkJoin` will\n     * not emit more than once and it will complete after that. If you need to emit combined values not only\n     * at the end of lifecycle of passed Observables, but also throughout it, try out {@link combineLatest}\n     * or {@link zip} instead.\n     *\n     * In order for resulting array to have the same length as the number of input Observables, whenever any of\n     * that Observables completes without emitting any value, `forkJoin` will complete at that moment as well\n     * and it will not emit anything either, even if it already has some last values from other Observables.\n     * Conversely, if there is an Observable that never completes, `forkJoin` will never complete as well,\n     * unless at any point some other Observable completes without emitting value, which brings us back to\n     * the previous case. Overall, in order for `forkJoin` to emit a value, all Observables passed as arguments\n     * have to emit something at least once and complete.\n     *\n     * If any input Observable errors at some point, `forkJoin` will error as well and all other Observables\n     * will be immediately unsubscribed.\n     *\n     * Optionally `forkJoin` accepts project function, that will be called with values which normally\n     * would land in emitted array. Whatever is returned by project function, will appear in output\n     * Observable instead. This means that default project can be thought of as a function that takes\n     * all its arguments and puts them into an array. Note that project function will be called only\n     * when output Observable is supposed to emit a result.\n     *\n     * @example <caption>Use forkJoin with operator emitting immediately</caption>\n     * const observable = Rx.Observable.forkJoin(\n     *   Rx.Observable.of(1, 2, 3, 4),\n     *   Rx.Observable.of(5, 6, 7, 8)\n     * );\n     * observable.subscribe(\n     *   value => console.log(value),\n     *   err => {},\n     *   () => console.log('This is how it ends!')\n     * );\n     *\n     * // Logs:\n     * // [4, 8]\n     * // \"This is how it ends!\"\n     *\n     *\n     * @example <caption>Use forkJoin with operator emitting after some time</caption>\n     * const observable = Rx.Observable.forkJoin(\n     *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n     *   Rx.Observable.interval(500).take(4) // emit 0, 1, 2, 3 every half a second and complete\n     * );\n     * observable.subscribe(\n     *   value => console.log(value),\n     *   err => {},\n     *   () => console.log('This is how it ends!')\n     * );\n     *\n     * // Logs:\n     * // [2, 3] after 3 seconds\n     * // \"This is how it ends!\" immediately after\n     *\n     *\n     * @example <caption>Use forkJoin with project function</caption>\n     * const observable = Rx.Observable.forkJoin(\n     *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n     *   Rx.Observable.interval(500).take(4), // emit 0, 1, 2, 3 every half a second and complete\n     *   (n, m) => n + m\n     * );\n     * observable.subscribe(\n     *   value => console.log(value),\n     *   err => {},\n     *   () => console.log('This is how it ends!')\n     * );\n     *\n     * // Logs:\n     * // 5 after 3 seconds\n     * // \"This is how it ends!\" immediately after\n     *\n     * @see {@link combineLatest}\n     * @see {@link zip}\n     *\n     * @param {...SubscribableOrPromise} sources Any number of Observables provided either as an array or as an arguments\n     * passed directly to the operator.\n     * @param {function} [project] Function that takes values emitted by input Observables and returns value\n     * that will appear in resulting Observable instead of default array.\n     * @return {Observable} Observable emitting either an array of last values emitted by passed Observables\n     * or value from project function.\n     * @static true\n     * @name forkJoin\n     * @owner Observable\n     */\n    ForkJoinObservable.create = function () {\n        var sources = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            sources[_i - 0] = arguments[_i];\n        }\n        if (sources === null || arguments.length === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        var resultSelector = null;\n        if (typeof sources[sources.length - 1] === 'function') {\n            resultSelector = sources.pop();\n        }\n        // if the first and only other argument besides the resultSelector is an array\n        // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`\n        if (sources.length === 1 && isArray_1.isArray(sources[0])) {\n            sources = sources[0];\n        }\n        if (sources.length === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        return new ForkJoinObservable(sources, resultSelector);\n    };\n    /** @deprecated internal use only */ ForkJoinObservable.prototype._subscribe = function (subscriber) {\n        return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);\n    };\n    return ForkJoinObservable;\n}(Observable_1.Observable));\nexports.ForkJoinObservable = ForkJoinObservable;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ForkJoinSubscriber = (function (_super) {\n    __extends(ForkJoinSubscriber, _super);\n    function ForkJoinSubscriber(destination, sources, resultSelector) {\n        _super.call(this, destination);\n        this.sources = sources;\n        this.resultSelector = resultSelector;\n        this.completed = 0;\n        this.haveValues = 0;\n        var len = sources.length;\n        this.total = len;\n        this.values = new Array(len);\n        for (var i = 0; i < len; i++) {\n            var source = sources[i];\n            var innerSubscription = subscribeToResult_1.subscribeToResult(this, source, null, i);\n            if (innerSubscription) {\n                innerSubscription.outerIndex = i;\n                this.add(innerSubscription);\n            }\n        }\n    }\n    ForkJoinSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values[outerIndex] = innerValue;\n        if (!innerSub._hasValue) {\n            innerSub._hasValue = true;\n            this.haveValues++;\n        }\n    };\n    ForkJoinSubscriber.prototype.notifyComplete = function (innerSub) {\n        var destination = this.destination;\n        var _a = this, haveValues = _a.haveValues, resultSelector = _a.resultSelector, values = _a.values;\n        var len = values.length;\n        if (!innerSub._hasValue) {\n            destination.complete();\n            return;\n        }\n        this.completed++;\n        if (this.completed !== len) {\n            return;\n        }\n        if (haveValues === len) {\n            var value = resultSelector ? resultSelector.apply(this, values) : values;\n            destination.next(value);\n        }\n        destination.complete();\n    };\n    return ForkJoinSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar tryCatch_1 = require('../util/tryCatch');\nvar isFunction_1 = require('../util/isFunction');\nvar errorObject_1 = require('../util/errorObject');\nvar Subscription_1 = require('../Subscription');\nvar toString = Object.prototype.toString;\nfunction isNodeStyleEventEmitter(sourceObj) {\n    return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\nfunction isJQueryStyleEventEmitter(sourceObj) {\n    return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\nfunction isNodeList(sourceObj) {\n    return !!sourceObj && toString.call(sourceObj) === '[object NodeList]';\n}\nfunction isHTMLCollection(sourceObj) {\n    return !!sourceObj && toString.call(sourceObj) === '[object HTMLCollection]';\n}\nfunction isEventTarget(sourceObj) {\n    return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar FromEventObservable = (function (_super) {\n    __extends(FromEventObservable, _super);\n    function FromEventObservable(sourceObj, eventName, selector, options) {\n        _super.call(this);\n        this.sourceObj = sourceObj;\n        this.eventName = eventName;\n        this.selector = selector;\n        this.options = options;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * Creates an Observable that emits events of a specific type coming from the\n     * given event target.\n     *\n     * <span class=\"informal\">Creates an Observable from DOM events, or Node.js\n     * EventEmitter events or others.</span>\n     *\n     * <img src=\"./img/fromEvent.png\" width=\"100%\">\n     *\n     * `fromEvent` accepts as a first argument event target, which is an object with methods\n     * for registering event handler functions. As a second argument it takes string that indicates\n     * type of event we want to listen for. `fromEvent` supports selected types of event targets,\n     * which are described in detail below. If your event target does not match any of the ones listed,\n     * you should use {@link fromEventPattern}, which can be used on arbitrary APIs.\n     * When it comes to APIs supported by `fromEvent`, their methods for adding and removing event\n     * handler functions have different names, but they all accept a string describing event type\n     * and function itself, which will be called whenever said event happens.\n     *\n     * Every time resulting Observable is subscribed, event handler function will be registered\n     * to event target on given event type. When that event fires, value\n     * passed as a first argument to registered function will be emitted by output Observable.\n     * When Observable is unsubscribed, function will be unregistered from event target.\n     *\n     * Note that if event target calls registered function with more than one argument, second\n     * and following arguments will not appear in resulting stream. In order to get access to them,\n     * you can pass to `fromEvent` optional project function, which will be called with all arguments\n     * passed to event handler. Output Observable will then emit value returned by project function,\n     * instead of the usual value.\n     *\n     * Remember that event targets listed below are checked via duck typing. It means that\n     * no matter what kind of object you have and no matter what environment you work in,\n     * you can safely use `fromEvent` on that object if it exposes described methods (provided\n     * of course they behave as was described above). So for example if Node.js library exposes\n     * event target which has the same method names as DOM EventTarget, `fromEvent` is still\n     * a good choice.\n     *\n     * If the API you use is more callback then event handler oriented (subscribed\n     * callback function fires only once and thus there is no need to manually\n     * unregister it), you should use {@link bindCallback} or {@link bindNodeCallback}\n     * instead.\n     *\n     * `fromEvent` supports following types of event targets:\n     *\n     * **DOM EventTarget**\n     *\n     * This is an object with `addEventListener` and `removeEventListener` methods.\n     *\n     * In the browser, `addEventListener` accepts - apart from event type string and event\n     * handler function arguments - optional third parameter, which is either an object or boolean,\n     * both used for additional configuration how and when passed function will be called. When\n     * `fromEvent` is used with event target of that type, you can provide this values\n     * as third parameter as well.\n     *\n     * **Node.js EventEmitter**\n     *\n     * An object with `addListener` and `removeListener` methods.\n     *\n     * **JQuery-style event target**\n     *\n     * An object with `on` and `off` methods\n     *\n     * **DOM NodeList**\n     *\n     * List of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.\n     *\n     * Although this collection is not event target in itself, `fromEvent` will iterate over all Nodes\n     * it contains and install event handler function in every of them. When returned Observable\n     * is unsubscribed, function will be removed from all Nodes.\n     *\n     * **DOM HtmlCollection**\n     *\n     * Just as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is\n     * installed and removed in each of elements.\n     *\n     *\n     * @example <caption>Emits clicks happening on the DOM document</caption>\n     * var clicks = Rx.Observable.fromEvent(document, 'click');\n     * clicks.subscribe(x => console.log(x));\n     *\n     * // Results in:\n     * // MouseEvent object logged to console every time a click\n     * // occurs on the document.\n     *\n     *\n     * @example <caption>Use addEventListener with capture option</caption>\n     * var clicksInDocument = Rx.Observable.fromEvent(document, 'click', true); // note optional configuration parameter\n     *                                                                          // which will be passed to addEventListener\n     * var clicksInDiv = Rx.Observable.fromEvent(someDivInDocument, 'click');\n     *\n     * clicksInDocument.subscribe(() => console.log('document'));\n     * clicksInDiv.subscribe(() => console.log('div'));\n     *\n     * // By default events bubble UP in DOM tree, so normally\n     * // when we would click on div in document\n     * // \"div\" would be logged first and then \"document\".\n     * // Since we specified optional `capture` option, document\n     * // will catch event when it goes DOWN DOM tree, so console\n     * // will log \"document\" and then \"div\".\n     *\n     * @see {@link bindCallback}\n     * @see {@link bindNodeCallback}\n     * @see {@link fromEventPattern}\n     *\n     * @param {EventTargetLike} target The DOM EventTarget, Node.js\n     * EventEmitter, JQuery-like event target, NodeList or HTMLCollection to attach the event handler to.\n     * @param {string} eventName The event name of interest, being emitted by the\n     * `target`.\n     * @param {EventListenerOptions} [options] Options to pass through to addEventListener\n     * @param {SelectorMethodSignature<T>} [selector] An optional function to\n     * post-process results. It takes the arguments from the event handler and\n     * should return a single value.\n     * @return {Observable<T>}\n     * @static true\n     * @name fromEvent\n     * @owner Observable\n     */\n    FromEventObservable.create = function (target, eventName, options, selector) {\n        if (isFunction_1.isFunction(options)) {\n            selector = options;\n            options = undefined;\n        }\n        return new FromEventObservable(target, eventName, selector, options);\n    };\n    FromEventObservable.setupSubscription = function (sourceObj, eventName, handler, subscriber, options) {\n        var unsubscribe;\n        if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {\n            for (var i = 0, len = sourceObj.length; i < len; i++) {\n                FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n            }\n        }\n        else if (isEventTarget(sourceObj)) {\n            var source_1 = sourceObj;\n            sourceObj.addEventListener(eventName, handler, options);\n            unsubscribe = function () { return source_1.removeEventListener(eventName, handler, options); };\n        }\n        else if (isJQueryStyleEventEmitter(sourceObj)) {\n            var source_2 = sourceObj;\n            sourceObj.on(eventName, handler);\n            unsubscribe = function () { return source_2.off(eventName, handler); };\n        }\n        else if (isNodeStyleEventEmitter(sourceObj)) {\n            var source_3 = sourceObj;\n            sourceObj.addListener(eventName, handler);\n            unsubscribe = function () { return source_3.removeListener(eventName, handler); };\n        }\n        else {\n            throw new TypeError('Invalid event target');\n        }\n        subscriber.add(new Subscription_1.Subscription(unsubscribe));\n    };\n    /** @deprecated internal use only */ FromEventObservable.prototype._subscribe = function (subscriber) {\n        var sourceObj = this.sourceObj;\n        var eventName = this.eventName;\n        var options = this.options;\n        var selector = this.selector;\n        var handler = selector ? function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            var result = tryCatch_1.tryCatch(selector).apply(void 0, args);\n            if (result === errorObject_1.errorObject) {\n                subscriber.error(errorObject_1.errorObject.e);\n            }\n            else {\n                subscriber.next(result);\n            }\n        } : function (e) { return subscriber.next(e); };\n        FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);\n    };\n    return FromEventObservable;\n}(Observable_1.Observable));\nexports.FromEventObservable = FromEventObservable;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isFunction_1 = require('../util/isFunction');\nvar Observable_1 = require('../Observable');\nvar Subscription_1 = require('../Subscription');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar FromEventPatternObservable = (function (_super) {\n    __extends(FromEventPatternObservable, _super);\n    function FromEventPatternObservable(addHandler, removeHandler, selector) {\n        _super.call(this);\n        this.addHandler = addHandler;\n        this.removeHandler = removeHandler;\n        this.selector = selector;\n    }\n    /**\n     * Creates an Observable from an API based on addHandler/removeHandler\n     * functions.\n     *\n     * <span class=\"informal\">Converts any addHandler/removeHandler API to an\n     * Observable.</span>\n     *\n     * <img src=\"./img/fromEventPattern.png\" width=\"100%\">\n     *\n     * Creates an Observable by using the `addHandler` and `removeHandler`\n     * functions to add and remove the handlers, with an optional selector\n     * function to project the event arguments to a result. The `addHandler` is\n     * called when the output Observable is subscribed, and `removeHandler` is\n     * called when the Subscription is unsubscribed.\n     *\n     * @example <caption>Emits clicks happening on the DOM document</caption>\n     * function addClickHandler(handler) {\n     *   document.addEventListener('click', handler);\n     * }\n     *\n     * function removeClickHandler(handler) {\n     *   document.removeEventListener('click', handler);\n     * }\n     *\n     * var clicks = Rx.Observable.fromEventPattern(\n     *   addClickHandler,\n     *   removeClickHandler\n     * );\n     * clicks.subscribe(x => console.log(x));\n     *\n     * @see {@link from}\n     * @see {@link fromEvent}\n     *\n     * @param {function(handler: Function): any} addHandler A function that takes\n     * a `handler` function as argument and attaches it somehow to the actual\n     * source of events.\n     * @param {function(handler: Function, signal?: any): void} [removeHandler] An optional function that\n     * takes a `handler` function as argument and removes it in case it was\n     * previously attached using `addHandler`. if addHandler returns signal to teardown when remove,\n     * removeHandler function will forward it.\n     * @param {function(...args: any): T} [selector] An optional function to\n     * post-process results. It takes the arguments from the event handler and\n     * should return a single value.\n     * @return {Observable<T>}\n     * @static true\n     * @name fromEventPattern\n     * @owner Observable\n     */\n    FromEventPatternObservable.create = function (addHandler, removeHandler, selector) {\n        return new FromEventPatternObservable(addHandler, removeHandler, selector);\n    };\n    /** @deprecated internal use only */ FromEventPatternObservable.prototype._subscribe = function (subscriber) {\n        var _this = this;\n        var removeHandler = this.removeHandler;\n        var handler = !!this.selector ? function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            _this._callSelector(subscriber, args);\n        } : function (e) { subscriber.next(e); };\n        var retValue = this._callAddHandler(handler, subscriber);\n        if (!isFunction_1.isFunction(removeHandler)) {\n            return;\n        }\n        subscriber.add(new Subscription_1.Subscription(function () {\n            //TODO: determine whether or not to forward to error handler\n            removeHandler(handler, retValue);\n        }));\n    };\n    FromEventPatternObservable.prototype._callSelector = function (subscriber, args) {\n        try {\n            var result = this.selector.apply(this, args);\n            subscriber.next(result);\n        }\n        catch (e) {\n            subscriber.error(e);\n        }\n    };\n    FromEventPatternObservable.prototype._callAddHandler = function (handler, errorSubscriber) {\n        try {\n            return this.addHandler(handler) || null;\n        }\n        catch (e) {\n            errorSubscriber.error(e);\n        }\n    };\n    return FromEventPatternObservable;\n}(Observable_1.Observable));\nexports.FromEventPatternObservable = FromEventPatternObservable;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isArray_1 = require('../util/isArray');\nvar isArrayLike_1 = require('../util/isArrayLike');\nvar isPromise_1 = require('../util/isPromise');\nvar PromiseObservable_1 = require('./PromiseObservable');\nvar IteratorObservable_1 = require('./IteratorObservable');\nvar ArrayObservable_1 = require('./ArrayObservable');\nvar ArrayLikeObservable_1 = require('./ArrayLikeObservable');\nvar iterator_1 = require('../symbol/iterator');\nvar Observable_1 = require('../Observable');\nvar observeOn_1 = require('../operators/observeOn');\nvar observable_1 = require('../symbol/observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar FromObservable = (function (_super) {\n    __extends(FromObservable, _super);\n    function FromObservable(ish, scheduler) {\n        _super.call(this, null);\n        this.ish = ish;\n        this.scheduler = scheduler;\n    }\n    /**\n     * Creates an Observable from an Array, an array-like object, a Promise, an\n     * iterable object, or an Observable-like object.\n     *\n     * <span class=\"informal\">Converts almost anything to an Observable.</span>\n     *\n     * <img src=\"./img/from.png\" width=\"100%\">\n     *\n     * Convert various other objects and data types into Observables. `from`\n     * converts a Promise or an array-like or an\n     * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n     * object into an Observable that emits the items in that promise or array or\n     * iterable. A String, in this context, is treated as an array of characters.\n     * Observable-like objects (contains a function named with the ES2015 Symbol\n     * for Observable) can also be converted through this operator.\n     *\n     * @example <caption>Converts an array to an Observable</caption>\n     * var array = [10, 20, 30];\n     * var result = Rx.Observable.from(array);\n     * result.subscribe(x => console.log(x));\n     *\n     * // Results in the following:\n     * // 10 20 30\n     *\n     * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n     * function* generateDoubles(seed) {\n     *   var i = seed;\n     *   while (true) {\n     *     yield i;\n     *     i = 2 * i; // double it\n     *   }\n     * }\n     *\n     * var iterator = generateDoubles(3);\n     * var result = Rx.Observable.from(iterator).take(10);\n     * result.subscribe(x => console.log(x));\n     *\n     * // Results in the following:\n     * // 3 6 12 24 48 96 192 384 768 1536\n     *\n     * @see {@link create}\n     * @see {@link fromEvent}\n     * @see {@link fromEventPattern}\n     * @see {@link fromPromise}\n     *\n     * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n     * Observable-like, an Array, an iterable or an array-like object to be\n     * converted.\n     * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n     * emissions of values.\n     * @return {Observable<T>} The Observable whose values are originally from the\n     * input object that was converted.\n     * @static true\n     * @name from\n     * @owner Observable\n     */\n    FromObservable.create = function (ish, scheduler) {\n        if (ish != null) {\n            if (typeof ish[observable_1.observable] === 'function') {\n                if (ish instanceof Observable_1.Observable && !scheduler) {\n                    return ish;\n                }\n                return new FromObservable(ish, scheduler);\n            }\n            else if (isArray_1.isArray(ish)) {\n                return new ArrayObservable_1.ArrayObservable(ish, scheduler);\n            }\n            else if (isPromise_1.isPromise(ish)) {\n                return new PromiseObservable_1.PromiseObservable(ish, scheduler);\n            }\n            else if (typeof ish[iterator_1.iterator] === 'function' || typeof ish === 'string') {\n                return new IteratorObservable_1.IteratorObservable(ish, scheduler);\n            }\n            else if (isArrayLike_1.isArrayLike(ish)) {\n                return new ArrayLikeObservable_1.ArrayLikeObservable(ish, scheduler);\n            }\n        }\n        throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n    };\n    /** @deprecated internal use only */ FromObservable.prototype._subscribe = function (subscriber) {\n        var ish = this.ish;\n        var scheduler = this.scheduler;\n        if (scheduler == null) {\n            return ish[observable_1.observable]().subscribe(subscriber);\n        }\n        else {\n            return ish[observable_1.observable]().subscribe(new observeOn_1.ObserveOnSubscriber(subscriber, scheduler, 0));\n        }\n    };\n    return FromObservable;\n}(Observable_1.Observable));\nexports.FromObservable = FromObservable;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar isScheduler_1 = require('../util/isScheduler');\nvar selfSelector = function (value) { return value; };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar GenerateObservable = (function (_super) {\n    __extends(GenerateObservable, _super);\n    function GenerateObservable(initialState, condition, iterate, resultSelector, scheduler) {\n        _super.call(this);\n        this.initialState = initialState;\n        this.condition = condition;\n        this.iterate = iterate;\n        this.resultSelector = resultSelector;\n        this.scheduler = scheduler;\n    }\n    GenerateObservable.create = function (initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler) {\n        if (arguments.length == 1) {\n            return new GenerateObservable(initialStateOrOptions.initialState, initialStateOrOptions.condition, initialStateOrOptions.iterate, initialStateOrOptions.resultSelector || selfSelector, initialStateOrOptions.scheduler);\n        }\n        if (resultSelectorOrObservable === undefined || isScheduler_1.isScheduler(resultSelectorOrObservable)) {\n            return new GenerateObservable(initialStateOrOptions, condition, iterate, selfSelector, resultSelectorOrObservable);\n        }\n        return new GenerateObservable(initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler);\n    };\n    /** @deprecated internal use only */ GenerateObservable.prototype._subscribe = function (subscriber) {\n        var state = this.initialState;\n        if (this.scheduler) {\n            return this.scheduler.schedule(GenerateObservable.dispatch, 0, {\n                subscriber: subscriber,\n                iterate: this.iterate,\n                condition: this.condition,\n                resultSelector: this.resultSelector,\n                state: state });\n        }\n        var _a = this, condition = _a.condition, resultSelector = _a.resultSelector, iterate = _a.iterate;\n        do {\n            if (condition) {\n                var conditionResult = void 0;\n                try {\n                    conditionResult = condition(state);\n                }\n                catch (err) {\n                    subscriber.error(err);\n                    return;\n                }\n                if (!conditionResult) {\n                    subscriber.complete();\n                    break;\n                }\n            }\n            var value = void 0;\n            try {\n                value = resultSelector(state);\n            }\n            catch (err) {\n                subscriber.error(err);\n                return;\n            }\n            subscriber.next(value);\n            if (subscriber.closed) {\n                break;\n            }\n            try {\n                state = iterate(state);\n            }\n            catch (err) {\n                subscriber.error(err);\n                return;\n            }\n        } while (true);\n    };\n    GenerateObservable.dispatch = function (state) {\n        var subscriber = state.subscriber, condition = state.condition;\n        if (subscriber.closed) {\n            return;\n        }\n        if (state.needIterate) {\n            try {\n                state.state = state.iterate(state.state);\n            }\n            catch (err) {\n                subscriber.error(err);\n                return;\n            }\n        }\n        else {\n            state.needIterate = true;\n        }\n        if (condition) {\n            var conditionResult = void 0;\n            try {\n                conditionResult = condition(state.state);\n            }\n            catch (err) {\n                subscriber.error(err);\n                return;\n            }\n            if (!conditionResult) {\n                subscriber.complete();\n                return;\n            }\n            if (subscriber.closed) {\n                return;\n            }\n        }\n        var value;\n        try {\n            value = state.resultSelector(state.state);\n        }\n        catch (err) {\n            subscriber.error(err);\n            return;\n        }\n        if (subscriber.closed) {\n            return;\n        }\n        subscriber.next(value);\n        if (subscriber.closed) {\n            return;\n        }\n        return this.schedule(state);\n    };\n    return GenerateObservable;\n}(Observable_1.Observable));\nexports.GenerateObservable = GenerateObservable;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar IfObservable = (function (_super) {\n    __extends(IfObservable, _super);\n    function IfObservable(condition, thenSource, elseSource) {\n        _super.call(this);\n        this.condition = condition;\n        this.thenSource = thenSource;\n        this.elseSource = elseSource;\n    }\n    IfObservable.create = function (condition, thenSource, elseSource) {\n        return new IfObservable(condition, thenSource, elseSource);\n    };\n    /** @deprecated internal use only */ IfObservable.prototype._subscribe = function (subscriber) {\n        var _a = this, condition = _a.condition, thenSource = _a.thenSource, elseSource = _a.elseSource;\n        return new IfSubscriber(subscriber, condition, thenSource, elseSource);\n    };\n    return IfObservable;\n}(Observable_1.Observable));\nexports.IfObservable = IfObservable;\nvar IfSubscriber = (function (_super) {\n    __extends(IfSubscriber, _super);\n    function IfSubscriber(destination, condition, thenSource, elseSource) {\n        _super.call(this, destination);\n        this.condition = condition;\n        this.thenSource = thenSource;\n        this.elseSource = elseSource;\n        this.tryIf();\n    }\n    IfSubscriber.prototype.tryIf = function () {\n        var _a = this, condition = _a.condition, thenSource = _a.thenSource, elseSource = _a.elseSource;\n        var result;\n        try {\n            result = condition();\n            var source = result ? thenSource : elseSource;\n            if (source) {\n                this.add(subscribeToResult_1.subscribeToResult(this, source));\n            }\n            else {\n                this._complete();\n            }\n        }\n        catch (err) {\n            this._error(err);\n        }\n    };\n    return IfSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isNumeric_1 = require('../util/isNumeric');\nvar Observable_1 = require('../Observable');\nvar async_1 = require('../scheduler/async');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar IntervalObservable = (function (_super) {\n    __extends(IntervalObservable, _super);\n    function IntervalObservable(period, scheduler) {\n        if (period === void 0) { period = 0; }\n        if (scheduler === void 0) { scheduler = async_1.async; }\n        _super.call(this);\n        this.period = period;\n        this.scheduler = scheduler;\n        if (!isNumeric_1.isNumeric(period) || period < 0) {\n            this.period = 0;\n        }\n        if (!scheduler || typeof scheduler.schedule !== 'function') {\n            this.scheduler = async_1.async;\n        }\n    }\n    /**\n     * Creates an Observable that emits sequential numbers every specified\n     * interval of time, on a specified IScheduler.\n     *\n     * <span class=\"informal\">Emits incremental numbers periodically in time.\n     * </span>\n     *\n     * <img src=\"./img/interval.png\" width=\"100%\">\n     *\n     * `interval` returns an Observable that emits an infinite sequence of\n     * ascending integers, with a constant interval of time of your choosing\n     * between those emissions. The first emission is not sent immediately, but\n     * only after the first period has passed. By default, this operator uses the\n     * `async` IScheduler to provide a notion of time, but you may pass any\n     * IScheduler to it.\n     *\n     * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>\n     * var numbers = Rx.Observable.interval(1000);\n     * numbers.subscribe(x => console.log(x));\n     *\n     * @see {@link timer}\n     * @see {@link delay}\n     *\n     * @param {number} [period=0] The interval size in milliseconds (by default)\n     * or the time unit determined by the scheduler's clock.\n     * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n     * the emission of values, and providing a notion of \"time\".\n     * @return {Observable} An Observable that emits a sequential number each time\n     * interval.\n     * @static true\n     * @name interval\n     * @owner Observable\n     */\n    IntervalObservable.create = function (period, scheduler) {\n        if (period === void 0) { period = 0; }\n        if (scheduler === void 0) { scheduler = async_1.async; }\n        return new IntervalObservable(period, scheduler);\n    };\n    IntervalObservable.dispatch = function (state) {\n        var index = state.index, subscriber = state.subscriber, period = state.period;\n        subscriber.next(index);\n        if (subscriber.closed) {\n            return;\n        }\n        state.index += 1;\n        this.schedule(state, period);\n    };\n    /** @deprecated internal use only */ IntervalObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var period = this.period;\n        var scheduler = this.scheduler;\n        subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {\n            index: index, subscriber: subscriber, period: period\n        }));\n    };\n    return IntervalObservable;\n}(Observable_1.Observable));\nexports.IntervalObservable = IntervalObservable;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar root_1 = require('../util/root');\nvar Observable_1 = require('../Observable');\nvar iterator_1 = require('../symbol/iterator');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar IteratorObservable = (function (_super) {\n    __extends(IteratorObservable, _super);\n    function IteratorObservable(iterator, scheduler) {\n        _super.call(this);\n        this.scheduler = scheduler;\n        if (iterator == null) {\n            throw new Error('iterator cannot be null.');\n        }\n        this.iterator = getIterator(iterator);\n    }\n    IteratorObservable.create = function (iterator, scheduler) {\n        return new IteratorObservable(iterator, scheduler);\n    };\n    IteratorObservable.dispatch = function (state) {\n        var index = state.index, hasError = state.hasError, iterator = state.iterator, subscriber = state.subscriber;\n        if (hasError) {\n            subscriber.error(state.error);\n            return;\n        }\n        var result = iterator.next();\n        if (result.done) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(result.value);\n        state.index = index + 1;\n        if (subscriber.closed) {\n            if (typeof iterator.return === 'function') {\n                iterator.return();\n            }\n            return;\n        }\n        this.schedule(state);\n    };\n    /** @deprecated internal use only */ IteratorObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var _a = this, iterator = _a.iterator, scheduler = _a.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(IteratorObservable.dispatch, 0, {\n                index: index, iterator: iterator, subscriber: subscriber\n            });\n        }\n        else {\n            do {\n                var result = iterator.next();\n                if (result.done) {\n                    subscriber.complete();\n                    break;\n                }\n                else {\n                    subscriber.next(result.value);\n                }\n                if (subscriber.closed) {\n                    if (typeof iterator.return === 'function') {\n                        iterator.return();\n                    }\n                    break;\n                }\n            } while (true);\n        }\n    };\n    return IteratorObservable;\n}(Observable_1.Observable));\nexports.IteratorObservable = IteratorObservable;\nvar StringIterator = (function () {\n    function StringIterator(str, idx, len) {\n        if (idx === void 0) { idx = 0; }\n        if (len === void 0) { len = str.length; }\n        this.str = str;\n        this.idx = idx;\n        this.len = len;\n    }\n    StringIterator.prototype[iterator_1.iterator] = function () { return (this); };\n    StringIterator.prototype.next = function () {\n        return this.idx < this.len ? {\n            done: false,\n            value: this.str.charAt(this.idx++)\n        } : {\n            done: true,\n            value: undefined\n        };\n    };\n    return StringIterator;\n}());\nvar ArrayIterator = (function () {\n    function ArrayIterator(arr, idx, len) {\n        if (idx === void 0) { idx = 0; }\n        if (len === void 0) { len = toLength(arr); }\n        this.arr = arr;\n        this.idx = idx;\n        this.len = len;\n    }\n    ArrayIterator.prototype[iterator_1.iterator] = function () { return this; };\n    ArrayIterator.prototype.next = function () {\n        return this.idx < this.len ? {\n            done: false,\n            value: this.arr[this.idx++]\n        } : {\n            done: true,\n            value: undefined\n        };\n    };\n    return ArrayIterator;\n}());\nfunction getIterator(obj) {\n    var i = obj[iterator_1.iterator];\n    if (!i && typeof obj === 'string') {\n        return new StringIterator(obj);\n    }\n    if (!i && obj.length !== undefined) {\n        return new ArrayIterator(obj);\n    }\n    if (!i) {\n        throw new TypeError('object is not iterable');\n    }\n    return obj[iterator_1.iterator]();\n}\nvar maxSafeInteger = Math.pow(2, 53) - 1;\nfunction toLength(o) {\n    var len = +o.length;\n    if (isNaN(len)) {\n        return 0;\n    }\n    if (len === 0 || !numberIsFinite(len)) {\n        return len;\n    }\n    len = sign(len) * Math.floor(Math.abs(len));\n    if (len <= 0) {\n        return 0;\n    }\n    if (len > maxSafeInteger) {\n        return maxSafeInteger;\n    }\n    return len;\n}\nfunction numberIsFinite(value) {\n    return typeof value === 'number' && root_1.root.isFinite(value);\n}\nfunction sign(value) {\n    var valueAsNumber = +value;\n    if (valueAsNumber === 0) {\n        return valueAsNumber;\n    }\n    if (isNaN(valueAsNumber)) {\n        return valueAsNumber;\n    }\n    return valueAsNumber < 0 ? -1 : 1;\n}\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar noop_1 = require('../util/noop');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar NeverObservable = (function (_super) {\n    __extends(NeverObservable, _super);\n    function NeverObservable() {\n        _super.call(this);\n    }\n    /**\n     * Creates an Observable that emits no items to the Observer.\n     *\n     * <span class=\"informal\">An Observable that never emits anything.</span>\n     *\n     * <img src=\"./img/never.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that emits\n     * neither values nor errors nor the completion notification. It can be used\n     * for testing purposes or for composing with other Observables. Please note\n     * that by never emitting a complete notification, this Observable keeps the\n     * subscription from being disposed automatically. Subscriptions need to be\n     * manually disposed.\n     *\n     * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>\n     * function info() {\n     *   console.log('Will not be called');\n     * }\n     * var result = Rx.Observable.never().startWith(7);\n     * result.subscribe(x => console.log(x), info, info);\n     *\n     * @see {@link create}\n     * @see {@link empty}\n     * @see {@link of}\n     * @see {@link throw}\n     *\n     * @return {Observable} A \"never\" Observable: never emits anything.\n     * @static true\n     * @name never\n     * @owner Observable\n     */\n    NeverObservable.create = function () {\n        return new NeverObservable();\n    };\n    /** @deprecated internal use only */ NeverObservable.prototype._subscribe = function (subscriber) {\n        noop_1.noop();\n    };\n    return NeverObservable;\n}(Observable_1.Observable));\nexports.NeverObservable = NeverObservable;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nfunction dispatch(state) {\n    var obj = state.obj, keys = state.keys, length = state.length, index = state.index, subscriber = state.subscriber;\n    if (index === length) {\n        subscriber.complete();\n        return;\n    }\n    var key = keys[index];\n    subscriber.next([key, obj[key]]);\n    state.index = index + 1;\n    this.schedule(state);\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar PairsObservable = (function (_super) {\n    __extends(PairsObservable, _super);\n    function PairsObservable(obj, scheduler) {\n        _super.call(this);\n        this.obj = obj;\n        this.scheduler = scheduler;\n        this.keys = Object.keys(obj);\n    }\n    /**\n     * Convert an object into an observable sequence of [key, value] pairs\n     * using an optional IScheduler to enumerate the object.\n     *\n     * @example <caption>Converts a javascript object to an Observable</caption>\n     * var obj = {\n     *   foo: 42,\n     *   bar: 56,\n     *   baz: 78\n     * };\n     *\n     * var source = Rx.Observable.pairs(obj);\n     *\n     * var subscription = source.subscribe(\n     *   function (x) {\n     *     console.log('Next: %s', x);\n     *   },\n     *   function (err) {\n     *     console.log('Error: %s', err);\n     *   },\n     *   function () {\n     *     console.log('Completed');\n     *   });\n     *\n     * @param {Object} obj The object to inspect and turn into an\n     * Observable sequence.\n     * @param {Scheduler} [scheduler] An optional IScheduler to run the\n     * enumeration of the input sequence on.\n     * @returns {(Observable<Array<string | T>>)} An observable sequence of\n     * [key, value] pairs from the object.\n     */\n    PairsObservable.create = function (obj, scheduler) {\n        return new PairsObservable(obj, scheduler);\n    };\n    /** @deprecated internal use only */ PairsObservable.prototype._subscribe = function (subscriber) {\n        var _a = this, keys = _a.keys, scheduler = _a.scheduler;\n        var length = keys.length;\n        if (scheduler) {\n            return scheduler.schedule(dispatch, 0, {\n                obj: this.obj, keys: keys, length: length, index: 0, subscriber: subscriber\n            });\n        }\n        else {\n            for (var idx = 0; idx < length; idx++) {\n                var key = keys[idx];\n                subscriber.next([key, this.obj[key]]);\n            }\n            subscriber.complete();\n        }\n    };\n    return PairsObservable;\n}(Observable_1.Observable));\nexports.PairsObservable = PairsObservable;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar root_1 = require('../util/root');\nvar Observable_1 = require('../Observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar PromiseObservable = (function (_super) {\n    __extends(PromiseObservable, _super);\n    function PromiseObservable(promise, scheduler) {\n        _super.call(this);\n        this.promise = promise;\n        this.scheduler = scheduler;\n    }\n    /**\n     * Converts a Promise to an Observable.\n     *\n     * <span class=\"informal\">Returns an Observable that just emits the Promise's\n     * resolved value, then completes.</span>\n     *\n     * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n     * Observable. If the Promise resolves with a value, the output Observable\n     * emits that resolved value as a `next`, and then completes. If the Promise\n     * is rejected, then the output Observable emits the corresponding Error.\n     *\n     * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n     * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     * @see {@link bindCallback}\n     * @see {@link from}\n     *\n     * @param {PromiseLike<T>} promise The promise to be converted.\n     * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling\n     * the delivery of the resolved value (or the rejection).\n     * @return {Observable<T>} An Observable which wraps the Promise.\n     * @static true\n     * @name fromPromise\n     * @owner Observable\n     */\n    PromiseObservable.create = function (promise, scheduler) {\n        return new PromiseObservable(promise, scheduler);\n    };\n    /** @deprecated internal use only */ PromiseObservable.prototype._subscribe = function (subscriber) {\n        var _this = this;\n        var promise = this.promise;\n        var scheduler = this.scheduler;\n        if (scheduler == null) {\n            if (this._isScalar) {\n                if (!subscriber.closed) {\n                    subscriber.next(this.value);\n                    subscriber.complete();\n                }\n            }\n            else {\n                promise.then(function (value) {\n                    _this.value = value;\n                    _this._isScalar = true;\n                    if (!subscriber.closed) {\n                        subscriber.next(value);\n                        subscriber.complete();\n                    }\n                }, function (err) {\n                    if (!subscriber.closed) {\n                        subscriber.error(err);\n                    }\n                })\n                    .then(null, function (err) {\n                    // escape the promise trap, throw unhandled errors\n                    root_1.root.setTimeout(function () { throw err; });\n                });\n            }\n        }\n        else {\n            if (this._isScalar) {\n                if (!subscriber.closed) {\n                    return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber: subscriber });\n                }\n            }\n            else {\n                promise.then(function (value) {\n                    _this.value = value;\n                    _this._isScalar = true;\n                    if (!subscriber.closed) {\n                        subscriber.add(scheduler.schedule(dispatchNext, 0, { value: value, subscriber: subscriber }));\n                    }\n                }, function (err) {\n                    if (!subscriber.closed) {\n                        subscriber.add(scheduler.schedule(dispatchError, 0, { err: err, subscriber: subscriber }));\n                    }\n                })\n                    .then(null, function (err) {\n                    // escape the promise trap, throw unhandled errors\n                    root_1.root.setTimeout(function () { throw err; });\n                });\n            }\n        }\n    };\n    return PromiseObservable;\n}(Observable_1.Observable));\nexports.PromiseObservable = PromiseObservable;\nfunction dispatchNext(arg) {\n    var value = arg.value, subscriber = arg.subscriber;\n    if (!subscriber.closed) {\n        subscriber.next(value);\n        subscriber.complete();\n    }\n}\nfunction dispatchError(arg) {\n    var err = arg.err, subscriber = arg.subscriber;\n    if (!subscriber.closed) {\n        subscriber.error(err);\n    }\n}\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar RangeObservable = (function (_super) {\n    __extends(RangeObservable, _super);\n    function RangeObservable(start, count, scheduler) {\n        _super.call(this);\n        this.start = start;\n        this._count = count;\n        this.scheduler = scheduler;\n    }\n    /**\n     * Creates an Observable that emits a sequence of numbers within a specified\n     * range.\n     *\n     * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\n     *\n     * <img src=\"./img/range.png\" width=\"100%\">\n     *\n     * `range` operator emits a range of sequential integers, in order, where you\n     * select the `start` of the range and its `length`. By default, uses no\n     * IScheduler and just delivers the notifications synchronously, but may use\n     * an optional IScheduler to regulate those deliveries.\n     *\n     * @example <caption>Emits the numbers 1 to 10</caption>\n     * var numbers = Rx.Observable.range(1, 10);\n     * numbers.subscribe(x => console.log(x));\n     *\n     * @see {@link timer}\n     * @see {@link interval}\n     *\n     * @param {number} [start=0] The value of the first integer in the sequence.\n     * @param {number} [count=0] The number of sequential integers to generate.\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emissions of the notifications.\n     * @return {Observable} An Observable of numbers that emits a finite range of\n     * sequential integers.\n     * @static true\n     * @name range\n     * @owner Observable\n     */\n    RangeObservable.create = function (start, count, scheduler) {\n        if (start === void 0) { start = 0; }\n        if (count === void 0) { count = 0; }\n        return new RangeObservable(start, count, scheduler);\n    };\n    RangeObservable.dispatch = function (state) {\n        var start = state.start, index = state.index, count = state.count, subscriber = state.subscriber;\n        if (index >= count) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(start);\n        if (subscriber.closed) {\n            return;\n        }\n        state.index = index + 1;\n        state.start = start + 1;\n        this.schedule(state);\n    };\n    /** @deprecated internal use only */ RangeObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var start = this.start;\n        var count = this._count;\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(RangeObservable.dispatch, 0, {\n                index: index, count: count, start: start, subscriber: subscriber\n            });\n        }\n        else {\n            do {\n                if (index++ >= count) {\n                    subscriber.complete();\n                    break;\n                }\n                subscriber.next(start++);\n                if (subscriber.closed) {\n                    break;\n                }\n            } while (true);\n        }\n    };\n    return RangeObservable;\n}(Observable_1.Observable));\nexports.RangeObservable = RangeObservable;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ScalarObservable = (function (_super) {\n    __extends(ScalarObservable, _super);\n    function ScalarObservable(value, scheduler) {\n        _super.call(this);\n        this.value = value;\n        this.scheduler = scheduler;\n        this._isScalar = true;\n        if (scheduler) {\n            this._isScalar = false;\n        }\n    }\n    ScalarObservable.create = function (value, scheduler) {\n        return new ScalarObservable(value, scheduler);\n    };\n    ScalarObservable.dispatch = function (state) {\n        var done = state.done, value = state.value, subscriber = state.subscriber;\n        if (done) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(value);\n        if (subscriber.closed) {\n            return;\n        }\n        state.done = true;\n        this.schedule(state);\n    };\n    /** @deprecated internal use only */ ScalarObservable.prototype._subscribe = function (subscriber) {\n        var value = this.value;\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(ScalarObservable.dispatch, 0, {\n                done: false, value: value, subscriber: subscriber\n            });\n        }\n        else {\n            subscriber.next(value);\n            if (!subscriber.closed) {\n                subscriber.complete();\n            }\n        }\n    };\n    return ScalarObservable;\n}(Observable_1.Observable));\nexports.ScalarObservable = ScalarObservable;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar asap_1 = require('../scheduler/asap');\nvar isNumeric_1 = require('../util/isNumeric');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar SubscribeOnObservable = (function (_super) {\n    __extends(SubscribeOnObservable, _super);\n    function SubscribeOnObservable(source, delayTime, scheduler) {\n        if (delayTime === void 0) { delayTime = 0; }\n        if (scheduler === void 0) { scheduler = asap_1.asap; }\n        _super.call(this);\n        this.source = source;\n        this.delayTime = delayTime;\n        this.scheduler = scheduler;\n        if (!isNumeric_1.isNumeric(delayTime) || delayTime < 0) {\n            this.delayTime = 0;\n        }\n        if (!scheduler || typeof scheduler.schedule !== 'function') {\n            this.scheduler = asap_1.asap;\n        }\n    }\n    SubscribeOnObservable.create = function (source, delay, scheduler) {\n        if (delay === void 0) { delay = 0; }\n        if (scheduler === void 0) { scheduler = asap_1.asap; }\n        return new SubscribeOnObservable(source, delay, scheduler);\n    };\n    SubscribeOnObservable.dispatch = function (arg) {\n        var source = arg.source, subscriber = arg.subscriber;\n        return this.add(source.subscribe(subscriber));\n    };\n    /** @deprecated internal use only */ SubscribeOnObservable.prototype._subscribe = function (subscriber) {\n        var delay = this.delayTime;\n        var source = this.source;\n        var scheduler = this.scheduler;\n        return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {\n            source: source, subscriber: subscriber\n        });\n    };\n    return SubscribeOnObservable;\n}(Observable_1.Observable));\nexports.SubscribeOnObservable = SubscribeOnObservable;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isNumeric_1 = require('../util/isNumeric');\nvar Observable_1 = require('../Observable');\nvar async_1 = require('../scheduler/async');\nvar isScheduler_1 = require('../util/isScheduler');\nvar isDate_1 = require('../util/isDate');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar TimerObservable = (function (_super) {\n    __extends(TimerObservable, _super);\n    function TimerObservable(dueTime, period, scheduler) {\n        if (dueTime === void 0) { dueTime = 0; }\n        _super.call(this);\n        this.period = -1;\n        this.dueTime = 0;\n        if (isNumeric_1.isNumeric(period)) {\n            this.period = Number(period) < 1 && 1 || Number(period);\n        }\n        else if (isScheduler_1.isScheduler(period)) {\n            scheduler = period;\n        }\n        if (!isScheduler_1.isScheduler(scheduler)) {\n            scheduler = async_1.async;\n        }\n        this.scheduler = scheduler;\n        this.dueTime = isDate_1.isDate(dueTime) ?\n            (+dueTime - this.scheduler.now()) :\n            dueTime;\n    }\n    /**\n     * Creates an Observable that starts emitting after an `initialDelay` and\n     * emits ever increasing numbers after each `period` of time thereafter.\n     *\n     * <span class=\"informal\">Its like {@link interval}, but you can specify when\n     * should the emissions start.</span>\n     *\n     * <img src=\"./img/timer.png\" width=\"100%\">\n     *\n     * `timer` returns an Observable that emits an infinite sequence of ascending\n     * integers, with a constant interval of time, `period` of your choosing\n     * between those emissions. The first emission happens after the specified\n     * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n     * operator uses the `async` IScheduler to provide a notion of time, but you\n     * may pass any IScheduler to it. If `period` is not specified, the output\n     * Observable emits only one value, `0`. Otherwise, it emits an infinite\n     * sequence.\n     *\n     * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n     * var numbers = Rx.Observable.timer(3000, 1000);\n     * numbers.subscribe(x => console.log(x));\n     *\n     * @example <caption>Emits one number after five seconds</caption>\n     * var numbers = Rx.Observable.timer(5000);\n     * numbers.subscribe(x => console.log(x));\n     *\n     * @see {@link interval}\n     * @see {@link delay}\n     *\n     * @param {number|Date} initialDelay The initial delay time to wait before\n     * emitting the first value of `0`.\n     * @param {number} [period] The period of time between emissions of the\n     * subsequent numbers.\n     * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n     * the emission of values, and providing a notion of \"time\".\n     * @return {Observable} An Observable that emits a `0` after the\n     * `initialDelay` and ever increasing numbers after each `period` of time\n     * thereafter.\n     * @static true\n     * @name timer\n     * @owner Observable\n     */\n    TimerObservable.create = function (initialDelay, period, scheduler) {\n        if (initialDelay === void 0) { initialDelay = 0; }\n        return new TimerObservable(initialDelay, period, scheduler);\n    };\n    TimerObservable.dispatch = function (state) {\n        var index = state.index, period = state.period, subscriber = state.subscriber;\n        var action = this;\n        subscriber.next(index);\n        if (subscriber.closed) {\n            return;\n        }\n        else if (period === -1) {\n            return subscriber.complete();\n        }\n        state.index = index + 1;\n        action.schedule(state, period);\n    };\n    /** @deprecated internal use only */ TimerObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var _a = this, period = _a.period, dueTime = _a.dueTime, scheduler = _a.scheduler;\n        return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n            index: index, period: period, subscriber: subscriber\n        });\n    };\n    return TimerObservable;\n}(Observable_1.Observable));\nexports.TimerObservable = TimerObservable;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar UsingObservable = (function (_super) {\n    __extends(UsingObservable, _super);\n    function UsingObservable(resourceFactory, observableFactory) {\n        _super.call(this);\n        this.resourceFactory = resourceFactory;\n        this.observableFactory = observableFactory;\n    }\n    UsingObservable.create = function (resourceFactory, observableFactory) {\n        return new UsingObservable(resourceFactory, observableFactory);\n    };\n    /** @deprecated internal use only */ UsingObservable.prototype._subscribe = function (subscriber) {\n        var _a = this, resourceFactory = _a.resourceFactory, observableFactory = _a.observableFactory;\n        var resource;\n        try {\n            resource = resourceFactory();\n            return new UsingSubscriber(subscriber, resource, observableFactory);\n        }\n        catch (err) {\n            subscriber.error(err);\n        }\n    };\n    return UsingObservable;\n}(Observable_1.Observable));\nexports.UsingObservable = UsingObservable;\nvar UsingSubscriber = (function (_super) {\n    __extends(UsingSubscriber, _super);\n    function UsingSubscriber(destination, resource, observableFactory) {\n        _super.call(this, destination);\n        this.resource = resource;\n        this.observableFactory = observableFactory;\n        destination.add(resource);\n        this.tryUse();\n    }\n    UsingSubscriber.prototype.tryUse = function () {\n        try {\n            var source = this.observableFactory.call(this, this.resource);\n            if (source) {\n                this.add(subscribeToResult_1.subscribeToResult(this, source));\n            }\n        }\n        catch (err) {\n            this._error(err);\n        }\n    };\n    return UsingSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n","\"use strict\";\nvar BoundCallbackObservable_1 = require('./BoundCallbackObservable');\nexports.bindCallback = BoundCallbackObservable_1.BoundCallbackObservable.create;\n","\"use strict\";\nvar BoundNodeCallbackObservable_1 = require('./BoundNodeCallbackObservable');\nexports.bindNodeCallback = BoundNodeCallbackObservable_1.BoundNodeCallbackObservable.create;\n","\"use strict\";\nvar isScheduler_1 = require('../util/isScheduler');\nvar isArray_1 = require('../util/isArray');\nvar ArrayObservable_1 = require('./ArrayObservable');\nvar combineLatest_1 = require('../operators/combineLatest');\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable in order and,\n * whenever any Observable emits, collecting an array of the most recent\n * values from each Observable. So if you pass `n` Observables to operator,\n * returned Observable will always emit an array of `n` values, in order\n * corresponding to order of passed Observables (value from the first Observable\n * on the first place and so on).\n *\n * Static version of `combineLatest` accepts either an array of Observables\n * or each Observable can be put directly as an argument. Note that array of\n * Observables is good choice, if you don't know beforehand how many Observables\n * you will combine. Passing empty array will result in Observable that\n * completes immediately.\n *\n * To ensure output array has always the same length, `combineLatest` will\n * actually wait for all input Observables to emit at least once,\n * before it starts emitting results. This means if some Observable emits\n * values before other Observables started emitting, all that values but last\n * will be lost. On the other hand, is some Observable does not emit value but\n * completes, resulting Observable will complete at the same moment without\n * emitting anything, since it will be now impossible to include value from\n * completed Observable in resulting array. Also, if some input Observable does\n * not emit any value and never completes, `combineLatest` will also never emit\n * and never complete, since, again, it will wait for all streams to emit some\n * value.\n *\n * If at least one Observable was passed to `combineLatest` and all passed Observables\n * emitted something, resulting Observable will complete when all combined\n * streams complete. So even if some Observable completes, result of\n * `combineLatest` will still emit values when other Observables do. In case\n * of completed Observable, its value from now on will always be the last\n * emitted value. On the other hand, if any Observable errors, `combineLatest`\n * will error immediately as well, and all other Observables will be unsubscribed.\n *\n * `combineLatest` accepts as optional parameter `project` function, which takes\n * as arguments all values that would normally be emitted by resulting Observable.\n * `project` can return any kind of value, which will be then emitted by Observable\n * instead of default array. Note that `project` does not take as argument that array\n * of values, but values themselves. That means default `project` can be imagined\n * as function that takes all its arguments and puts them into an array.\n *\n *\n * @example <caption>Combine two timer Observables</caption>\n * const firstTimer = Rx.Observable.timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\n * const secondTimer = Rx.Observable.timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\n * const combinedTimers = Rx.Observable.combineLatest(firstTimer, secondTimer);\n * combinedTimers.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0] after 0.5s\n * // [1, 0] after 1s\n * // [1, 1] after 1.5s\n * // [2, 1] after 2s\n *\n *\n * @example <caption>Combine an array of Observables</caption>\n * const observables = [1, 5, 10].map(\n *   n => Rx.Observable.of(n).delay(n * 1000).startWith(0) // emit 0 and then emit n after n seconds\n * );\n * const combined = Rx.Observable.combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0, 0] immediately\n * // [1, 0, 0] after 1s\n * // [1, 5, 0] after 5s\n * // [1, 5, 10] after 10s\n *\n *\n * @example <caption>Use project function to dynamically calculate the Body-Mass Index</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} observable1 An input Observable to combine with other Observables.\n * @param {ObservableInput} observable2 An input Observable to combine with other Observables.\n * More than one input Observables may be given as arguments\n * or an array of Observables may be given as the first argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @static true\n * @name combineLatest\n * @owner Observable\n */\nfunction combineLatest() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var project = null;\n    var scheduler = null;\n    if (isScheduler_1.isScheduler(observables[observables.length - 1])) {\n        scheduler = observables.pop();\n    }\n    if (typeof observables[observables.length - 1] === 'function') {\n        project = observables.pop();\n    }\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n    if (observables.length === 1 && isArray_1.isArray(observables[0])) {\n        observables = observables[0];\n    }\n    return new ArrayObservable_1.ArrayObservable(observables, scheduler).lift(new combineLatest_1.CombineLatestOperator(project));\n}\nexports.combineLatest = combineLatest;\n","\"use strict\";\nvar isScheduler_1 = require('../util/isScheduler');\nvar of_1 = require('./of');\nvar from_1 = require('./from');\nvar concatAll_1 = require('../operators/concatAll');\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n *\n * @example <caption>Concatenate an array of 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n *\n * @example <caption>Concatenate the same Observable to repeat it</caption>\n * const timer = Rx.Observable.interval(1000).take(2);\n *\n * Rx.Observable.concat(timer, timer) // concating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 An input Observable to concatenate with others.\n * @param {ObservableInput} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nfunction concat() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    if (observables.length === 1 || (observables.length === 2 && isScheduler_1.isScheduler(observables[1]))) {\n        return from_1.from(observables[0]);\n    }\n    return concatAll_1.concatAll()(of_1.of.apply(void 0, observables));\n}\nexports.concat = concat;\n","\"use strict\";\nvar DeferObservable_1 = require('./DeferObservable');\nexports.defer = DeferObservable_1.DeferObservable.create;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar root_1 = require('../../util/root');\nvar tryCatch_1 = require('../../util/tryCatch');\nvar errorObject_1 = require('../../util/errorObject');\nvar Observable_1 = require('../../Observable');\nvar Subscriber_1 = require('../../Subscriber');\nvar map_1 = require('../../operators/map');\nfunction getCORSRequest() {\n    if (root_1.root.XMLHttpRequest) {\n        return new root_1.root.XMLHttpRequest();\n    }\n    else if (!!root_1.root.XDomainRequest) {\n        return new root_1.root.XDomainRequest();\n    }\n    else {\n        throw new Error('CORS is not supported by your browser');\n    }\n}\nfunction getXMLHttpRequest() {\n    if (root_1.root.XMLHttpRequest) {\n        return new root_1.root.XMLHttpRequest();\n    }\n    else {\n        var progId = void 0;\n        try {\n            var progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];\n            for (var i = 0; i < 3; i++) {\n                try {\n                    progId = progIds[i];\n                    if (new root_1.root.ActiveXObject(progId)) {\n                        break;\n                    }\n                }\n                catch (e) {\n                }\n            }\n            return new root_1.root.ActiveXObject(progId);\n        }\n        catch (e) {\n            throw new Error('XMLHttpRequest is not supported by your browser');\n        }\n    }\n}\nfunction ajaxGet(url, headers) {\n    if (headers === void 0) { headers = null; }\n    return new AjaxObservable({ method: 'GET', url: url, headers: headers });\n}\nexports.ajaxGet = ajaxGet;\n;\nfunction ajaxPost(url, body, headers) {\n    return new AjaxObservable({ method: 'POST', url: url, body: body, headers: headers });\n}\nexports.ajaxPost = ajaxPost;\n;\nfunction ajaxDelete(url, headers) {\n    return new AjaxObservable({ method: 'DELETE', url: url, headers: headers });\n}\nexports.ajaxDelete = ajaxDelete;\n;\nfunction ajaxPut(url, body, headers) {\n    return new AjaxObservable({ method: 'PUT', url: url, body: body, headers: headers });\n}\nexports.ajaxPut = ajaxPut;\n;\nfunction ajaxPatch(url, body, headers) {\n    return new AjaxObservable({ method: 'PATCH', url: url, body: body, headers: headers });\n}\nexports.ajaxPatch = ajaxPatch;\n;\nvar mapResponse = map_1.map(function (x, index) { return x.response; });\nfunction ajaxGetJSON(url, headers) {\n    return mapResponse(new AjaxObservable({\n        method: 'GET',\n        url: url,\n        responseType: 'json',\n        headers: headers\n    }));\n}\nexports.ajaxGetJSON = ajaxGetJSON;\n;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar AjaxObservable = (function (_super) {\n    __extends(AjaxObservable, _super);\n    function AjaxObservable(urlOrRequest) {\n        _super.call(this);\n        var request = {\n            async: true,\n            createXHR: function () {\n                return this.crossDomain ? getCORSRequest.call(this) : getXMLHttpRequest();\n            },\n            crossDomain: false,\n            withCredentials: false,\n            headers: {},\n            method: 'GET',\n            responseType: 'json',\n            timeout: 0\n        };\n        if (typeof urlOrRequest === 'string') {\n            request.url = urlOrRequest;\n        }\n        else {\n            for (var prop in urlOrRequest) {\n                if (urlOrRequest.hasOwnProperty(prop)) {\n                    request[prop] = urlOrRequest[prop];\n                }\n            }\n        }\n        this.request = request;\n    }\n    /** @deprecated internal use only */ AjaxObservable.prototype._subscribe = function (subscriber) {\n        return new AjaxSubscriber(subscriber, this.request);\n    };\n    /**\n     * Creates an observable for an Ajax request with either a request object with\n     * url, headers, etc or a string for a URL.\n     *\n     * @example\n     * source = Rx.Observable.ajax('/products');\n     * source = Rx.Observable.ajax({ url: 'products', method: 'GET' });\n     *\n     * @param {string|Object} request Can be one of the following:\n     *   A string of the URL to make the Ajax call.\n     *   An object with the following properties\n     *   - url: URL of the request\n     *   - body: The body of the request\n     *   - method: Method of the request, such as GET, POST, PUT, PATCH, DELETE\n     *   - async: Whether the request is async\n     *   - headers: Optional headers\n     *   - crossDomain: true if a cross domain request, else false\n     *   - createXHR: a function to override if you need to use an alternate\n     *   XMLHttpRequest implementation.\n     *   - resultSelector: a function to use to alter the output value type of\n     *   the Observable. Gets {@link AjaxResponse} as an argument.\n     * @return {Observable} An observable sequence containing the XMLHttpRequest.\n     * @static true\n     * @name ajax\n     * @owner Observable\n    */\n    AjaxObservable.create = (function () {\n        var create = function (urlOrRequest) {\n            return new AjaxObservable(urlOrRequest);\n        };\n        create.get = ajaxGet;\n        create.post = ajaxPost;\n        create.delete = ajaxDelete;\n        create.put = ajaxPut;\n        create.patch = ajaxPatch;\n        create.getJSON = ajaxGetJSON;\n        return create;\n    })();\n    return AjaxObservable;\n}(Observable_1.Observable));\nexports.AjaxObservable = AjaxObservable;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AjaxSubscriber = (function (_super) {\n    __extends(AjaxSubscriber, _super);\n    function AjaxSubscriber(destination, request) {\n        _super.call(this, destination);\n        this.request = request;\n        this.done = false;\n        var headers = request.headers = request.headers || {};\n        // force CORS if requested\n        if (!request.crossDomain && !headers['X-Requested-With']) {\n            headers['X-Requested-With'] = 'XMLHttpRequest';\n        }\n        // ensure content type is set\n        if (!('Content-Type' in headers) && !(root_1.root.FormData && request.body instanceof root_1.root.FormData) && typeof request.body !== 'undefined') {\n            headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';\n        }\n        // properly serialize body\n        request.body = this.serializeBody(request.body, request.headers['Content-Type']);\n        this.send();\n    }\n    AjaxSubscriber.prototype.next = function (e) {\n        this.done = true;\n        var _a = this, xhr = _a.xhr, request = _a.request, destination = _a.destination;\n        var response = new AjaxResponse(e, xhr, request);\n        destination.next(response);\n    };\n    AjaxSubscriber.prototype.send = function () {\n        var _a = this, request = _a.request, _b = _a.request, user = _b.user, method = _b.method, url = _b.url, async = _b.async, password = _b.password, headers = _b.headers, body = _b.body;\n        var createXHR = request.createXHR;\n        var xhr = tryCatch_1.tryCatch(createXHR).call(request);\n        if (xhr === errorObject_1.errorObject) {\n            this.error(errorObject_1.errorObject.e);\n        }\n        else {\n            this.xhr = xhr;\n            // set up the events before open XHR\n            // https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest\n            // You need to add the event listeners before calling open() on the request.\n            // Otherwise the progress events will not fire.\n            this.setupEvents(xhr, request);\n            // open XHR\n            var result = void 0;\n            if (user) {\n                result = tryCatch_1.tryCatch(xhr.open).call(xhr, method, url, async, user, password);\n            }\n            else {\n                result = tryCatch_1.tryCatch(xhr.open).call(xhr, method, url, async);\n            }\n            if (result === errorObject_1.errorObject) {\n                this.error(errorObject_1.errorObject.e);\n                return null;\n            }\n            // timeout, responseType and withCredentials can be set once the XHR is open\n            if (async) {\n                xhr.timeout = request.timeout;\n                xhr.responseType = request.responseType;\n            }\n            if ('withCredentials' in xhr) {\n                xhr.withCredentials = !!request.withCredentials;\n            }\n            // set headers\n            this.setHeaders(xhr, headers);\n            // finally send the request\n            result = body ? tryCatch_1.tryCatch(xhr.send).call(xhr, body) : tryCatch_1.tryCatch(xhr.send).call(xhr);\n            if (result === errorObject_1.errorObject) {\n                this.error(errorObject_1.errorObject.e);\n                return null;\n            }\n        }\n        return xhr;\n    };\n    AjaxSubscriber.prototype.serializeBody = function (body, contentType) {\n        if (!body || typeof body === 'string') {\n            return body;\n        }\n        else if (root_1.root.FormData && body instanceof root_1.root.FormData) {\n            return body;\n        }\n        if (contentType) {\n            var splitIndex = contentType.indexOf(';');\n            if (splitIndex !== -1) {\n                contentType = contentType.substring(0, splitIndex);\n            }\n        }\n        switch (contentType) {\n            case 'application/x-www-form-urlencoded':\n                return Object.keys(body).map(function (key) { return (encodeURIComponent(key) + \"=\" + encodeURIComponent(body[key])); }).join('&');\n            case 'application/json':\n                return JSON.stringify(body);\n            default:\n                return body;\n        }\n    };\n    AjaxSubscriber.prototype.setHeaders = function (xhr, headers) {\n        for (var key in headers) {\n            if (headers.hasOwnProperty(key)) {\n                xhr.setRequestHeader(key, headers[key]);\n            }\n        }\n    };\n    AjaxSubscriber.prototype.setupEvents = function (xhr, request) {\n        var progressSubscriber = request.progressSubscriber;\n        function xhrTimeout(e) {\n            var _a = xhrTimeout, subscriber = _a.subscriber, progressSubscriber = _a.progressSubscriber, request = _a.request;\n            if (progressSubscriber) {\n                progressSubscriber.error(e);\n            }\n            subscriber.error(new AjaxTimeoutError(this, request)); //TODO: Make betterer.\n        }\n        ;\n        xhr.ontimeout = xhrTimeout;\n        xhrTimeout.request = request;\n        xhrTimeout.subscriber = this;\n        xhrTimeout.progressSubscriber = progressSubscriber;\n        if (xhr.upload && 'withCredentials' in xhr) {\n            if (progressSubscriber) {\n                var xhrProgress_1;\n                xhrProgress_1 = function (e) {\n                    var progressSubscriber = xhrProgress_1.progressSubscriber;\n                    progressSubscriber.next(e);\n                };\n                if (root_1.root.XDomainRequest) {\n                    xhr.onprogress = xhrProgress_1;\n                }\n                else {\n                    xhr.upload.onprogress = xhrProgress_1;\n                }\n                xhrProgress_1.progressSubscriber = progressSubscriber;\n            }\n            var xhrError_1;\n            xhrError_1 = function (e) {\n                var _a = xhrError_1, progressSubscriber = _a.progressSubscriber, subscriber = _a.subscriber, request = _a.request;\n                if (progressSubscriber) {\n                    progressSubscriber.error(e);\n                }\n                subscriber.error(new AjaxError('ajax error', this, request));\n            };\n            xhr.onerror = xhrError_1;\n            xhrError_1.request = request;\n            xhrError_1.subscriber = this;\n            xhrError_1.progressSubscriber = progressSubscriber;\n        }\n        function xhrReadyStateChange(e) {\n            var _a = xhrReadyStateChange, subscriber = _a.subscriber, progressSubscriber = _a.progressSubscriber, request = _a.request;\n            if (this.readyState === 4) {\n                // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n                var status_1 = this.status === 1223 ? 204 : this.status;\n                var response = (this.responseType === 'text' ? (this.response || this.responseText) : this.response);\n                // fix status code when it is 0 (0 status is undocumented).\n                // Occurs when accessing file resources or on Android 4.1 stock browser\n                // while retrieving files from application cache.\n                if (status_1 === 0) {\n                    status_1 = response ? 200 : 0;\n                }\n                if (200 <= status_1 && status_1 < 300) {\n                    if (progressSubscriber) {\n                        progressSubscriber.complete();\n                    }\n                    subscriber.next(e);\n                    subscriber.complete();\n                }\n                else {\n                    if (progressSubscriber) {\n                        progressSubscriber.error(e);\n                    }\n                    subscriber.error(new AjaxError('ajax error ' + status_1, this, request));\n                }\n            }\n        }\n        ;\n        xhr.onreadystatechange = xhrReadyStateChange;\n        xhrReadyStateChange.subscriber = this;\n        xhrReadyStateChange.progressSubscriber = progressSubscriber;\n        xhrReadyStateChange.request = request;\n    };\n    AjaxSubscriber.prototype.unsubscribe = function () {\n        var _a = this, done = _a.done, xhr = _a.xhr;\n        if (!done && xhr && xhr.readyState !== 4 && typeof xhr.abort === 'function') {\n            xhr.abort();\n        }\n        _super.prototype.unsubscribe.call(this);\n    };\n    return AjaxSubscriber;\n}(Subscriber_1.Subscriber));\nexports.AjaxSubscriber = AjaxSubscriber;\n/**\n * A normalized AJAX response.\n *\n * @see {@link ajax}\n *\n * @class AjaxResponse\n */\nvar AjaxResponse = (function () {\n    function AjaxResponse(originalEvent, xhr, request) {\n        this.originalEvent = originalEvent;\n        this.xhr = xhr;\n        this.request = request;\n        this.status = xhr.status;\n        this.responseType = xhr.responseType || request.responseType;\n        this.response = parseXhrResponse(this.responseType, xhr);\n    }\n    return AjaxResponse;\n}());\nexports.AjaxResponse = AjaxResponse;\n/**\n * A normalized AJAX error.\n *\n * @see {@link ajax}\n *\n * @class AjaxError\n */\nvar AjaxError = (function (_super) {\n    __extends(AjaxError, _super);\n    function AjaxError(message, xhr, request) {\n        _super.call(this, message);\n        this.message = message;\n        this.xhr = xhr;\n        this.request = request;\n        this.status = xhr.status;\n        this.responseType = xhr.responseType || request.responseType;\n        this.response = parseXhrResponse(this.responseType, xhr);\n    }\n    return AjaxError;\n}(Error));\nexports.AjaxError = AjaxError;\nfunction parseXhrResponse(responseType, xhr) {\n    switch (responseType) {\n        case 'json':\n            if ('response' in xhr) {\n                //IE does not support json as responseType, parse it internally\n                return xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || 'null');\n            }\n            else {\n                // HACK(benlesh): TypeScript shennanigans\n                // tslint:disable-next-line:no-any latest TS seems to think xhr is \"never\" here.\n                return JSON.parse(xhr.responseText || 'null');\n            }\n        case 'xml':\n            return xhr.responseXML;\n        case 'text':\n        default:\n            // HACK(benlesh): TypeScript shennanigans\n            // tslint:disable-next-line:no-any latest TS seems to think xhr is \"never\" here.\n            return ('response' in xhr) ? xhr.response : xhr.responseText;\n    }\n}\n/**\n * @see {@link ajax}\n *\n * @class AjaxTimeoutError\n */\nvar AjaxTimeoutError = (function (_super) {\n    __extends(AjaxTimeoutError, _super);\n    function AjaxTimeoutError(xhr, request) {\n        _super.call(this, 'ajax timeout', xhr, request);\n    }\n    return AjaxTimeoutError;\n}(AjaxError));\nexports.AjaxTimeoutError = AjaxTimeoutError;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../../Subject');\nvar Subscriber_1 = require('../../Subscriber');\nvar Observable_1 = require('../../Observable');\nvar Subscription_1 = require('../../Subscription');\nvar root_1 = require('../../util/root');\nvar ReplaySubject_1 = require('../../ReplaySubject');\nvar tryCatch_1 = require('../../util/tryCatch');\nvar errorObject_1 = require('../../util/errorObject');\nvar assign_1 = require('../../util/assign');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar WebSocketSubject = (function (_super) {\n    __extends(WebSocketSubject, _super);\n    function WebSocketSubject(urlConfigOrSource, destination) {\n        if (urlConfigOrSource instanceof Observable_1.Observable) {\n            _super.call(this, destination, urlConfigOrSource);\n        }\n        else {\n            _super.call(this);\n            this.WebSocketCtor = root_1.root.WebSocket;\n            this._output = new Subject_1.Subject();\n            if (typeof urlConfigOrSource === 'string') {\n                this.url = urlConfigOrSource;\n            }\n            else {\n                // WARNING: config object could override important members here.\n                assign_1.assign(this, urlConfigOrSource);\n            }\n            if (!this.WebSocketCtor) {\n                throw new Error('no WebSocket constructor can be found');\n            }\n            this.destination = new ReplaySubject_1.ReplaySubject();\n        }\n    }\n    WebSocketSubject.prototype.resultSelector = function (e) {\n        return JSON.parse(e.data);\n    };\n    /**\n     * Wrapper around the w3c-compatible WebSocket object provided by the browser.\n     *\n     * @example <caption>Wraps browser WebSocket</caption>\n     *\n     * let socket$ = Observable.webSocket('ws://localhost:8081');\n     *\n     * socket$.subscribe(\n     *    (msg) => console.log('message received: ' + msg),\n     *    (err) => console.log(err),\n     *    () => console.log('complete')\n     *  );\n     *\n     * socket$.next(JSON.stringify({ op: 'hello' }));\n     *\n     * @example <caption>Wraps WebSocket from nodejs-websocket (using node.js)</caption>\n     *\n     * import { w3cwebsocket } from 'websocket';\n     *\n     * let socket$ = Observable.webSocket({\n     *   url: 'ws://localhost:8081',\n     *   WebSocketCtor: w3cwebsocket\n     * });\n     *\n     * socket$.subscribe(\n     *    (msg) => console.log('message received: ' + msg),\n     *    (err) => console.log(err),\n     *    () => console.log('complete')\n     *  );\n     *\n     * socket$.next(JSON.stringify({ op: 'hello' }));\n     *\n     * @param {string | WebSocketSubjectConfig} urlConfigOrSource the source of the websocket as an url or a structure defining the websocket object\n     * @return {WebSocketSubject}\n     * @static true\n     * @name webSocket\n     * @owner Observable\n     */\n    WebSocketSubject.create = function (urlConfigOrSource) {\n        return new WebSocketSubject(urlConfigOrSource);\n    };\n    WebSocketSubject.prototype.lift = function (operator) {\n        var sock = new WebSocketSubject(this, this.destination);\n        sock.operator = operator;\n        return sock;\n    };\n    WebSocketSubject.prototype._resetState = function () {\n        this.socket = null;\n        if (!this.source) {\n            this.destination = new ReplaySubject_1.ReplaySubject();\n        }\n        this._output = new Subject_1.Subject();\n    };\n    // TODO: factor this out to be a proper Operator/Subscriber implementation and eliminate closures\n    WebSocketSubject.prototype.multiplex = function (subMsg, unsubMsg, messageFilter) {\n        var self = this;\n        return new Observable_1.Observable(function (observer) {\n            var result = tryCatch_1.tryCatch(subMsg)();\n            if (result === errorObject_1.errorObject) {\n                observer.error(errorObject_1.errorObject.e);\n            }\n            else {\n                self.next(result);\n            }\n            var subscription = self.subscribe(function (x) {\n                var result = tryCatch_1.tryCatch(messageFilter)(x);\n                if (result === errorObject_1.errorObject) {\n                    observer.error(errorObject_1.errorObject.e);\n                }\n                else if (result) {\n                    observer.next(x);\n                }\n            }, function (err) { return observer.error(err); }, function () { return observer.complete(); });\n            return function () {\n                var result = tryCatch_1.tryCatch(unsubMsg)();\n                if (result === errorObject_1.errorObject) {\n                    observer.error(errorObject_1.errorObject.e);\n                }\n                else {\n                    self.next(result);\n                }\n                subscription.unsubscribe();\n            };\n        });\n    };\n    WebSocketSubject.prototype._connectSocket = function () {\n        var _this = this;\n        var WebSocketCtor = this.WebSocketCtor;\n        var observer = this._output;\n        var socket = null;\n        try {\n            socket = this.protocol ?\n                new WebSocketCtor(this.url, this.protocol) :\n                new WebSocketCtor(this.url);\n            this.socket = socket;\n            if (this.binaryType) {\n                this.socket.binaryType = this.binaryType;\n            }\n        }\n        catch (e) {\n            observer.error(e);\n            return;\n        }\n        var subscription = new Subscription_1.Subscription(function () {\n            _this.socket = null;\n            if (socket && socket.readyState === 1) {\n                socket.close();\n            }\n        });\n        socket.onopen = function (e) {\n            var openObserver = _this.openObserver;\n            if (openObserver) {\n                openObserver.next(e);\n            }\n            var queue = _this.destination;\n            _this.destination = Subscriber_1.Subscriber.create(function (x) { return socket.readyState === 1 && socket.send(x); }, function (e) {\n                var closingObserver = _this.closingObserver;\n                if (closingObserver) {\n                    closingObserver.next(undefined);\n                }\n                if (e && e.code) {\n                    socket.close(e.code, e.reason);\n                }\n                else {\n                    observer.error(new TypeError('WebSocketSubject.error must be called with an object with an error code, ' +\n                        'and an optional reason: { code: number, reason: string }'));\n                }\n                _this._resetState();\n            }, function () {\n                var closingObserver = _this.closingObserver;\n                if (closingObserver) {\n                    closingObserver.next(undefined);\n                }\n                socket.close();\n                _this._resetState();\n            });\n            if (queue && queue instanceof ReplaySubject_1.ReplaySubject) {\n                subscription.add(queue.subscribe(_this.destination));\n            }\n        };\n        socket.onerror = function (e) {\n            _this._resetState();\n            observer.error(e);\n        };\n        socket.onclose = function (e) {\n            _this._resetState();\n            var closeObserver = _this.closeObserver;\n            if (closeObserver) {\n                closeObserver.next(e);\n            }\n            if (e.wasClean) {\n                observer.complete();\n            }\n            else {\n                observer.error(e);\n            }\n        };\n        socket.onmessage = function (e) {\n            var result = tryCatch_1.tryCatch(_this.resultSelector)(e);\n            if (result === errorObject_1.errorObject) {\n                observer.error(errorObject_1.errorObject.e);\n            }\n            else {\n                observer.next(result);\n            }\n        };\n    };\n    /** @deprecated internal use only */ WebSocketSubject.prototype._subscribe = function (subscriber) {\n        var _this = this;\n        var source = this.source;\n        if (source) {\n            return source.subscribe(subscriber);\n        }\n        if (!this.socket) {\n            this._connectSocket();\n        }\n        var subscription = new Subscription_1.Subscription();\n        subscription.add(this._output.subscribe(subscriber));\n        subscription.add(function () {\n            var socket = _this.socket;\n            if (_this._output.observers.length === 0) {\n                if (socket && socket.readyState === 1) {\n                    socket.close();\n                }\n                _this._resetState();\n            }\n        });\n        return subscription;\n    };\n    WebSocketSubject.prototype.unsubscribe = function () {\n        var _a = this, source = _a.source, socket = _a.socket;\n        if (socket && socket.readyState === 1) {\n            socket.close();\n            this._resetState();\n        }\n        _super.prototype.unsubscribe.call(this);\n        if (!source) {\n            this.destination = new ReplaySubject_1.ReplaySubject();\n        }\n    };\n    return WebSocketSubject;\n}(Subject_1.AnonymousSubject));\nexports.WebSocketSubject = WebSocketSubject;\n","\"use strict\";\nvar AjaxObservable_1 = require('./AjaxObservable');\nexports.ajax = AjaxObservable_1.AjaxObservable.create;\n","\"use strict\";\nvar WebSocketSubject_1 = require('./WebSocketSubject');\nexports.webSocket = WebSocketSubject_1.WebSocketSubject.create;\n","\"use strict\";\nvar EmptyObservable_1 = require('./EmptyObservable');\nexports.empty = EmptyObservable_1.EmptyObservable.create;\n","\"use strict\";\nvar ForkJoinObservable_1 = require('./ForkJoinObservable');\nexports.forkJoin = ForkJoinObservable_1.ForkJoinObservable.create;\n","\"use strict\";\nvar FromObservable_1 = require('./FromObservable');\nexports.from = FromObservable_1.FromObservable.create;\n","\"use strict\";\nvar FromEventObservable_1 = require('./FromEventObservable');\nexports.fromEvent = FromEventObservable_1.FromEventObservable.create;\n","\"use strict\";\nvar FromEventPatternObservable_1 = require('./FromEventPatternObservable');\nexports.fromEventPattern = FromEventPatternObservable_1.FromEventPatternObservable.create;\n","\"use strict\";\nvar PromiseObservable_1 = require('./PromiseObservable');\nexports.fromPromise = PromiseObservable_1.PromiseObservable.create;\n","\"use strict\";\nvar GenerateObservable_1 = require('./GenerateObservable');\nexports.generate = GenerateObservable_1.GenerateObservable.create;\n","\"use strict\";\nvar IfObservable_1 = require('./IfObservable');\nexports._if = IfObservable_1.IfObservable.create;\n","\"use strict\";\nvar IntervalObservable_1 = require('./IntervalObservable');\nexports.interval = IntervalObservable_1.IntervalObservable.create;\n","\"use strict\";\nvar Observable_1 = require('../Observable');\nvar ArrayObservable_1 = require('./ArrayObservable');\nvar isScheduler_1 = require('../util/isScheduler');\nvar mergeAll_1 = require('../operators/mergeAll');\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits it's max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits it's max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nfunction merge() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var concurrent = Number.POSITIVE_INFINITY;\n    var scheduler = null;\n    var last = observables[observables.length - 1];\n    if (isScheduler_1.isScheduler(last)) {\n        scheduler = observables.pop();\n        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n            concurrent = observables.pop();\n        }\n    }\n    else if (typeof last === 'number') {\n        concurrent = observables.pop();\n    }\n    if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable_1.Observable) {\n        return observables[0];\n    }\n    return mergeAll_1.mergeAll(concurrent)(new ArrayObservable_1.ArrayObservable(observables, scheduler));\n}\nexports.merge = merge;\n","\"use strict\";\nvar NeverObservable_1 = require('./NeverObservable');\nexports.never = NeverObservable_1.NeverObservable.create;\n","\"use strict\";\nvar ArrayObservable_1 = require('./ArrayObservable');\nexports.of = ArrayObservable_1.ArrayObservable.of;\n","\"use strict\";\nvar onErrorResumeNext_1 = require('../operators/onErrorResumeNext');\nexports.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNextStatic;\n","\"use strict\";\nvar PairsObservable_1 = require('./PairsObservable');\nexports.pairs = PairsObservable_1.PairsObservable.create;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isArray_1 = require('../util/isArray');\nvar ArrayObservable_1 = require('../observable/ArrayObservable');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nfunction race() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    // if the only argument is an array, it was most likely called with\n    // `race([obs1, obs2, ...])`\n    if (observables.length === 1) {\n        if (isArray_1.isArray(observables[0])) {\n            observables = observables[0];\n        }\n        else {\n            return observables[0];\n        }\n    }\n    return new ArrayObservable_1.ArrayObservable(observables).lift(new RaceOperator());\n}\nexports.race = race;\nvar RaceOperator = (function () {\n    function RaceOperator() {\n    }\n    RaceOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RaceSubscriber(subscriber));\n    };\n    return RaceOperator;\n}());\nexports.RaceOperator = RaceOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RaceSubscriber = (function (_super) {\n    __extends(RaceSubscriber, _super);\n    function RaceSubscriber(destination) {\n        _super.call(this, destination);\n        this.hasFirst = false;\n        this.observables = [];\n        this.subscriptions = [];\n    }\n    RaceSubscriber.prototype._next = function (observable) {\n        this.observables.push(observable);\n    };\n    RaceSubscriber.prototype._complete = function () {\n        var observables = this.observables;\n        var len = observables.length;\n        if (len === 0) {\n            this.destination.complete();\n        }\n        else {\n            for (var i = 0; i < len && !this.hasFirst; i++) {\n                var observable = observables[i];\n                var subscription = subscribeToResult_1.subscribeToResult(this, observable, observable, i);\n                if (this.subscriptions) {\n                    this.subscriptions.push(subscription);\n                }\n                this.add(subscription);\n            }\n            this.observables = null;\n        }\n    };\n    RaceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (!this.hasFirst) {\n            this.hasFirst = true;\n            for (var i = 0; i < this.subscriptions.length; i++) {\n                if (i !== outerIndex) {\n                    var subscription = this.subscriptions[i];\n                    subscription.unsubscribe();\n                    this.remove(subscription);\n                }\n            }\n            this.subscriptions = null;\n        }\n        this.destination.next(innerValue);\n    };\n    return RaceSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.RaceSubscriber = RaceSubscriber;\n","\"use strict\";\nvar RangeObservable_1 = require('./RangeObservable');\nexports.range = RangeObservable_1.RangeObservable.create;\n","\"use strict\";\nvar ErrorObservable_1 = require('./ErrorObservable');\nexports._throw = ErrorObservable_1.ErrorObservable.create;\n","\"use strict\";\nvar TimerObservable_1 = require('./TimerObservable');\nexports.timer = TimerObservable_1.TimerObservable.create;\n","\"use strict\";\nvar UsingObservable_1 = require('./UsingObservable');\nexports.using = UsingObservable_1.UsingObservable.create;\n","\"use strict\";\nvar zip_1 = require('../operators/zip');\nexports.zip = zip_1.zipStatic;\n","\"use strict\";\nvar audit_1 = require('../operators/audit');\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nfunction audit(durationSelector) {\n    return audit_1.audit(durationSelector)(this);\n}\nexports.audit = audit;\n","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar auditTime_1 = require('../operators/auditTime');\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nfunction auditTime(duration, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return auditTime_1.auditTime(duration, scheduler)(this);\n}\nexports.auditTime = auditTime;\n","\"use strict\";\nvar buffer_1 = require('../operators/buffer');\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nfunction buffer(closingNotifier) {\n    return buffer_1.buffer(closingNotifier)(this);\n}\nexports.buffer = buffer;\n","\"use strict\";\nvar bufferCount_1 = require('../operators/bufferCount');\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nfunction bufferCount(bufferSize, startBufferEvery) {\n    if (startBufferEvery === void 0) { startBufferEvery = null; }\n    return bufferCount_1.bufferCount(bufferSize, startBufferEvery)(this);\n}\nexports.bufferCount = bufferCount;\n","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar isScheduler_1 = require('../util/isScheduler');\nvar bufferTime_1 = require('../operators/bufferTime');\n/* tslint:enable:max-line-length */\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nfunction bufferTime(bufferTimeSpan) {\n    var length = arguments.length;\n    var scheduler = async_1.async;\n    if (isScheduler_1.isScheduler(arguments[arguments.length - 1])) {\n        scheduler = arguments[arguments.length - 1];\n        length--;\n    }\n    var bufferCreationInterval = null;\n    if (length >= 2) {\n        bufferCreationInterval = arguments[1];\n    }\n    var maxBufferSize = Number.POSITIVE_INFINITY;\n    if (length >= 3) {\n        maxBufferSize = arguments[2];\n    }\n    return bufferTime_1.bufferTime(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler)(this);\n}\nexports.bufferTime = bufferTime;\n","\"use strict\";\nvar bufferToggle_1 = require('../operators/bufferToggle');\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nfunction bufferToggle(openings, closingSelector) {\n    return bufferToggle_1.bufferToggle(openings, closingSelector)(this);\n}\nexports.bufferToggle = bufferToggle;\n","\"use strict\";\nvar bufferWhen_1 = require('../operators/bufferWhen');\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nfunction bufferWhen(closingSelector) {\n    return bufferWhen_1.bufferWhen(closingSelector)(this);\n}\nexports.bufferWhen = bufferWhen;\n","\"use strict\";\nvar catchError_1 = require('../operators/catchError');\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @method catch\n * @name catch\n * @owner Observable\n */\nfunction _catch(selector) {\n    return catchError_1.catchError(selector)(this);\n}\nexports._catch = _catch;\n","\"use strict\";\nvar combineAll_1 = require('../operators/combineAll');\n/**\n * Converts a higher-order Observable into a first-order Observable by waiting\n * for the outer Observable to complete, then applying {@link combineLatest}.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by applying\n * {@link combineLatest} when the Observable-of-Observables completes.</span>\n *\n * <img src=\"./img/combineAll.png\" width=\"100%\">\n *\n * Takes an Observable of Observables, and collects all Observables from it.\n * Once the outer Observable completes, it subscribes to all collected\n * Observables and combines their values using the {@link combineLatest}\n * strategy, such that:\n * - Every time an inner Observable emits, the output Observable emits.\n * - When the returned observable emits, it emits all of the latest values by:\n *   - If a `project` function is provided, it is called with each recent value\n *     from each inner Observable in whatever order they arrived, and the result\n *     of the `project` function is what is emitted by the output Observable.\n *   - If there is no `project` function, an array of all of the most recent\n *     values is emitted by the output Observable.\n *\n * @example <caption>Map two click events to a finite interval Observable, then apply combineAll</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev =>\n *   Rx.Observable.interval(Math.random()*2000).take(3)\n * ).take(2);\n * var result = higherOrder.combineAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n * @see {@link mergeAll}\n *\n * @param {function} [project] An optional function to map the most recent\n * values from each inner Observable into a new result. Takes each of the most\n * recent values from each collected inner Observable as arguments, in order.\n * @return {Observable} An Observable of projected results or arrays of recent\n * values.\n * @method combineAll\n * @owner Observable\n */\nfunction combineAll(project) {\n    return combineAll_1.combineAll(project)(this);\n}\nexports.combineAll = combineAll;\n","\"use strict\";\nvar combineLatest_1 = require('../operators/combineLatest');\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nfunction combineLatest() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return combineLatest_1.combineLatest.apply(void 0, observables)(this);\n}\nexports.combineLatest = combineLatest;\n","\"use strict\";\nvar concat_1 = require('../operators/concat');\nvar concat_2 = require('../observable/concat');\nexports.concatStatic = concat_2.concat;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nfunction concat() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return concat_1.concat.apply(void 0, observables)(this);\n}\nexports.concat = concat;\n","\"use strict\";\nvar concatAll_1 = require('../operators/concatAll');\n/* tslint:enable:max-line-length */\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nfunction concatAll() {\n    return concatAll_1.concatAll()(this);\n}\nexports.concatAll = concatAll;\n","\"use strict\";\nvar concatMap_1 = require('../operators/concatMap');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nfunction concatMap(project, resultSelector) {\n    return concatMap_1.concatMap(project, resultSelector)(this);\n}\nexports.concatMap = concatMap;\n","\"use strict\";\nvar concatMapTo_1 = require('../operators/concatMapTo');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nfunction concatMapTo(innerObservable, resultSelector) {\n    return concatMapTo_1.concatMapTo(innerObservable, resultSelector)(this);\n}\nexports.concatMapTo = concatMapTo;\n","\"use strict\";\nvar count_1 = require('../operators/count');\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nfunction count(predicate) {\n    return count_1.count(predicate)(this);\n}\nexports.count = count;\n","\"use strict\";\nvar debounce_1 = require('../operators/debounce');\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nfunction debounce(durationSelector) {\n    return debounce_1.debounce(durationSelector)(this);\n}\nexports.debounce = debounce;\n","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar debounceTime_1 = require('../operators/debounceTime');\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nfunction debounceTime(dueTime, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return debounceTime_1.debounceTime(dueTime, scheduler)(this);\n}\nexports.debounceTime = debounceTime;\n","\"use strict\";\nvar defaultIfEmpty_1 = require('../operators/defaultIfEmpty');\n/* tslint:enable:max-line-length */\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nfunction defaultIfEmpty(defaultValue) {\n    if (defaultValue === void 0) { defaultValue = null; }\n    return defaultIfEmpty_1.defaultIfEmpty(defaultValue)(this);\n}\nexports.defaultIfEmpty = defaultIfEmpty;\n","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar delay_1 = require('../operators/delay');\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nfunction delay(delay, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return delay_1.delay(delay, scheduler)(this);\n}\nexports.delay = delay;\n","\"use strict\";\nvar delayWhen_1 = require('../operators/delayWhen');\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nfunction delayWhen(delayDurationSelector, subscriptionDelay) {\n    return delayWhen_1.delayWhen(delayDurationSelector, subscriptionDelay)(this);\n}\nexports.delayWhen = delayWhen;\n","\"use strict\";\nvar dematerialize_1 = require('../operators/dematerialize');\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nfunction dematerialize() {\n    return dematerialize_1.dematerialize()(this);\n}\nexports.dematerialize = dematerialize;\n","\"use strict\";\nvar distinct_1 = require('../operators/distinct');\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nfunction distinct(keySelector, flushes) {\n    return distinct_1.distinct(keySelector, flushes)(this);\n}\nexports.distinct = distinct;\n","\"use strict\";\nvar distinctUntilChanged_1 = require('../operators/distinctUntilChanged');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nfunction distinctUntilChanged(compare, keySelector) {\n    return distinctUntilChanged_1.distinctUntilChanged(compare, keySelector)(this);\n}\nexports.distinctUntilChanged = distinctUntilChanged;\n","\"use strict\";\nvar distinctUntilKeyChanged_1 = require('../operators/distinctUntilKeyChanged');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>An example comparing the name of persons</caption>\n *\n *  interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilKeyChanged('name')\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @example <caption>An example comparing the first letters of the name</caption>\n *\n * interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo1'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo2'},\n *     { age: 6, name: 'Foo3'})\n *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo1' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo2' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n *\n * @param {string} key String key for object property lookup on each item.\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nfunction distinctUntilKeyChanged(key, compare) {\n    return distinctUntilKeyChanged_1.distinctUntilKeyChanged(key, compare)(this);\n}\nexports.distinctUntilKeyChanged = distinctUntilKeyChanged;\n","\"use strict\";\nvar tap_1 = require('../operators/tap');\n/* tslint:enable:max-line-length */\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @method do\n * @name do\n * @owner Observable\n */\nfunction _do(nextOrObserver, error, complete) {\n    return tap_1.tap(nextOrObserver, error, complete)(this);\n}\nexports._do = _do;\n","\"use strict\";\nvar elementAt_1 = require('../operators/elementAt');\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nfunction elementAt(index, defaultValue) {\n    return elementAt_1.elementAt(index, defaultValue)(this);\n}\nexports.elementAt = elementAt;\n","\"use strict\";\nvar every_1 = require('../operators/every');\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nfunction every(predicate, thisArg) {\n    return every_1.every(predicate, thisArg)(this);\n}\nexports.every = every;\n","\"use strict\";\nvar exhaust_1 = require('../operators/exhaust');\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nfunction exhaust() {\n    return exhaust_1.exhaust()(this);\n}\nexports.exhaust = exhaust;\n","\"use strict\";\nvar exhaustMap_1 = require('../operators/exhaustMap');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nfunction exhaustMap(project, resultSelector) {\n    return exhaustMap_1.exhaustMap(project, resultSelector)(this);\n}\nexports.exhaustMap = exhaustMap;\n","\"use strict\";\nvar expand_1 = require('../operators/expand');\n/* tslint:enable:max-line-length */\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nfunction expand(project, concurrent, scheduler) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    if (scheduler === void 0) { scheduler = undefined; }\n    concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n    return expand_1.expand(project, concurrent, scheduler)(this);\n}\nexports.expand = expand;\n","\"use strict\";\nvar filter_1 = require('../operators/filter');\n/* tslint:enable:max-line-length */\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nfunction filter(predicate, thisArg) {\n    return filter_1.filter(predicate, thisArg)(this);\n}\nexports.filter = filter;\n","\"use strict\";\nvar finalize_1 = require('../operators/finalize');\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nfunction _finally(callback) {\n    return finalize_1.finalize(callback)(this);\n}\nexports._finally = _finally;\n","\"use strict\";\nvar find_1 = require('../operators/find');\n/* tslint:enable:max-line-length */\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nfunction find(predicate, thisArg) {\n    return find_1.find(predicate, thisArg)(this);\n}\nexports.find = find;\n","\"use strict\";\nvar findIndex_1 = require('../operators/findIndex');\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nfunction findIndex(predicate, thisArg) {\n    return findIndex_1.findIndex(predicate, thisArg)(this);\n}\nexports.findIndex = findIndex;\n","\"use strict\";\nvar first_1 = require('../operators/first');\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nfunction first(predicate, resultSelector, defaultValue) {\n    return first_1.first(predicate, resultSelector, defaultValue)(this);\n}\nexports.first = first;\n","\"use strict\";\nvar groupBy_1 = require('../operators/groupBy');\nexports.GroupedObservable = groupBy_1.GroupedObservable;\n/* tslint:enable:max-line-length */\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nfunction groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {\n    return groupBy_1.groupBy(keySelector, elementSelector, durationSelector, subjectSelector)(this);\n}\nexports.groupBy = groupBy;\n","\"use strict\";\nvar ignoreElements_1 = require('../operators/ignoreElements');\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nfunction ignoreElements() {\n    return ignoreElements_1.ignoreElements()(this);\n}\nexports.ignoreElements = ignoreElements;\n;\n","\"use strict\";\nvar isEmpty_1 = require('../operators/isEmpty');\n/**\n * If the source Observable is empty it returns an Observable that emits true, otherwise it emits false.\n *\n * <img src=\"./img/isEmpty.png\" width=\"100%\">\n *\n * @return {Observable} An Observable that emits a Boolean.\n * @method isEmpty\n * @owner Observable\n */\nfunction isEmpty() {\n    return isEmpty_1.isEmpty()(this);\n}\nexports.isEmpty = isEmpty;\n","\"use strict\";\nvar last_1 = require('../operators/last');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nfunction last(predicate, resultSelector, defaultValue) {\n    return last_1.last(predicate, resultSelector, defaultValue)(this);\n}\nexports.last = last;\n","\"use strict\";\n/**\n * @param func\n * @return {Observable<R>}\n * @method let\n * @owner Observable\n */\nfunction letProto(func) {\n    return func(this);\n}\nexports.letProto = letProto;\n","\"use strict\";\nvar map_1 = require('../operators/map');\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nfunction map(project, thisArg) {\n    return map_1.map(project, thisArg)(this);\n}\nexports.map = map;\n","\"use strict\";\nvar mapTo_1 = require('../operators/mapTo');\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nfunction mapTo(value) {\n    return mapTo_1.mapTo(value)(this);\n}\nexports.mapTo = mapTo;\n","\"use strict\";\nvar materialize_1 = require('../operators/materialize');\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nfunction materialize() {\n    return materialize_1.materialize()(this);\n}\nexports.materialize = materialize;\n","\"use strict\";\nvar max_1 = require('../operators/max');\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the largest value.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @example <caption>Get the maximal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .max()\n *   .subscribe(x => console.log(x)); // -> 8\n *\n * @example <caption>Use a comparer function to get the maximal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\n * }\n *\n * @see {@link min}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable} An Observable that emits item with the largest value.\n * @method max\n * @owner Observable\n */\nfunction max(comparer) {\n    return max_1.max(comparer)(this);\n}\nexports.max = max;\n","\"use strict\";\nvar merge_1 = require('../operators/merge');\nvar merge_2 = require('../observable/merge');\nexports.mergeStatic = merge_2.merge;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {ObservableInput} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} An Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nfunction merge() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return merge_1.merge.apply(void 0, observables)(this);\n}\nexports.merge = merge;\n","\"use strict\";\nvar mergeAll_1 = require('../operators/mergeAll');\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nfunction mergeAll(concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return mergeAll_1.mergeAll(concurrent)(this);\n}\nexports.mergeAll = mergeAll;\n","\"use strict\";\nvar mergeMap_1 = require('../operators/mergeMap');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nfunction mergeMap(project, resultSelector, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return mergeMap_1.mergeMap(project, resultSelector, concurrent)(this);\n}\nexports.mergeMap = mergeMap;\n","\"use strict\";\nvar mergeMapTo_1 = require('../operators/mergeMapTo');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nfunction mergeMapTo(innerObservable, resultSelector, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return mergeMapTo_1.mergeMapTo(innerObservable, resultSelector, concurrent)(this);\n}\nexports.mergeMapTo = mergeMapTo;\n","\"use strict\";\nvar mergeScan_1 = require('../operators/mergeScan');\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nfunction mergeScan(accumulator, seed, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return mergeScan_1.mergeScan(accumulator, seed, concurrent)(this);\n}\nexports.mergeScan = mergeScan;\n","\"use strict\";\nvar min_1 = require('../operators/min');\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @example <caption>Get the minimal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .min()\n *   .subscribe(x => console.log(x)); // -> 2\n *\n * @example <caption>Use a comparer function to get the minimal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n * }\n *\n * @see {@link max}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable<R>} An Observable that emits item with the smallest value.\n * @method min\n * @owner Observable\n */\nfunction min(comparer) {\n    return min_1.min(comparer)(this);\n}\nexports.min = min;\n","\"use strict\";\nvar multicast_1 = require('../operators/multicast');\n/* tslint:enable:max-line-length */\n/**\n * Allows source Observable to be subscribed only once with a Subject of choice,\n * while still sharing its values between multiple subscribers.\n *\n * <span class=\"informal\">Subscribe to Observable once, but send its values to multiple subscribers.</span>\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * `multicast` is an operator that works in two modes.\n *\n * In the first mode you provide a single argument to it, which can be either an initialized Subject or a Subject\n * factory. As a result you will get a special kind of an Observable - a {@link ConnectableObservable}. It can be\n * subscribed multiple times, just as regular Observable, but it won't subscribe to the source Observable at that\n * moment. It will do it only if you call its `connect` method. This means you can essentially control by hand, when\n * source Observable will be actually subscribed. What is more, ConnectableObservable will share this one subscription\n * between all of its subscribers. This means that, for example, `ajax` Observable will only send a request once,\n * even though usually it would send a request per every subscriber. Since it sends a request at the moment of\n * subscription, here request would be sent when the `connect` method of a ConnectableObservable is called.\n *\n * The most common pattern of using ConnectableObservable is calling `connect` when the first consumer subscribes,\n * keeping the subscription alive while several consumers come and go and finally unsubscribing from the source\n * Observable, when the last consumer unsubscribes. To not implement that logic over and over again,\n * ConnectableObservable has a special operator, `refCount`. When called, it returns an Observable, which will count\n * the number of consumers subscribed to it and keep ConnectableObservable connected as long as there is at least\n * one consumer. So if you don't actually need to decide yourself when to connect and disconnect a\n * ConnectableObservable, use `refCount`.\n *\n * The second mode is invoked by calling `multicast` with an additional, second argument - selector function.\n * This function accepts an Observable - which basically mirrors the source Observable - and returns Observable\n * as well, which should be the input stream modified by any operators you want. Note that in this\n * mode you cannot provide initialized Subject as a first argument - it has to be a Subject factory. If\n * you provide selector function, `multicast` returns just a regular Observable, instead of ConnectableObservable.\n * Thus, as usual, each subscription to this stream triggers subscription to the source Observable. However,\n * if inside the selector function you subscribe to the input Observable multiple times, actual source stream\n * will be subscribed only once. So if you have a chain of operators that use some Observable many times,\n * but you want to subscribe to that Observable only once, this is the mode you would use.\n *\n * Subject provided as a first parameter of `multicast` is used as a proxy for the single subscription to the\n * source Observable. It means that all values from the source stream go through that Subject. Thus, if a Subject\n * has some special properties, Observable returned by `multicast` will have them as well. If you want to use\n * `multicast` with a Subject that is one of the ones included in RxJS by default - {@link Subject},\n * {@link AsyncSubject}, {@link BehaviorSubject}, or {@link ReplaySubject} - simply use {@link publish},\n * {@link publishLast}, {@link publishBehavior} or {@link publishReplay} respectively. These are actually\n * just wrappers around `multicast`, with a specific Subject hardcoded inside.\n *\n * Also, if you use {@link publish} or {@link publishReplay} with a ConnectableObservables `refCount` operator,\n * you can simply use {@link share} and {@link shareReplay} respectively, which chain these two.\n *\n * @example <caption>Use ConnectableObservable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const connectableSeconds = seconds.multicast(new Subject());\n *\n * connectableSeconds.subscribe(value => console.log('first: ' + value));\n * connectableSeconds.subscribe(value => console.log('second: ' + value));\n *\n * // At this point still nothing happens, even though we subscribed twice.\n *\n * connectableSeconds.connect();\n *\n * // From now on `seconds` are being logged to the console,\n * // twice per every second. `seconds` Observable was however only subscribed once,\n * // so under the hood Observable.interval had only one clock started.\n *\n * @example <caption>Use selector</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds\n *     .multicast(\n *         () => new Subject(),\n *         seconds => seconds.zip(seconds) // Usually zip would subscribe to `seconds` twice.\n *                                         // Because we are inside selector, `seconds` is subscribed once,\n *     )                                   // thus starting only one clock used internally by Observable.interval.\n *     .subscribe();\n *\n * @see {@link publish}\n * @see {@link publishLast}\n * @see {@link publishBehavior}\n * @see {@link publishReplay}\n * @see {@link share}\n * @see {@link shareReplay}\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate Subject through\n * which the source sequence's elements will be multicast to the selector function input Observable or\n * ConnectableObservable returned by the operator.\n * @param {Function} [selector] - Optional selector function that can use the input stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the input source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable<T>|ConnectableObservable<T>} An Observable that emits the results of invoking the selector\n * on the source stream or a special {@link ConnectableObservable}, if selector was not provided.\n *\n * @method multicast\n * @owner Observable\n */\nfunction multicast(subjectOrSubjectFactory, selector) {\n    return multicast_1.multicast(subjectOrSubjectFactory, selector)(this);\n}\nexports.multicast = multicast;\n","\"use strict\";\nvar observeOn_1 = require('../operators/observeOn');\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nfunction observeOn(scheduler, delay) {\n    if (delay === void 0) { delay = 0; }\n    return observeOn_1.observeOn(scheduler, delay)(this);\n}\nexports.observeOn = observeOn;\n","\"use strict\";\nvar onErrorResumeNext_1 = require('../operators/onErrorResumeNext');\n/* tslint:enable:max-line-length */\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\nfunction onErrorResumeNext() {\n    var nextSources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        nextSources[_i - 0] = arguments[_i];\n    }\n    return onErrorResumeNext_1.onErrorResumeNext.apply(void 0, nextSources)(this);\n}\nexports.onErrorResumeNext = onErrorResumeNext;\n","\"use strict\";\nvar pairwise_1 = require('../operators/pairwise');\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nfunction pairwise() {\n    return pairwise_1.pairwise()(this);\n}\nexports.pairwise = pairwise;\n","\"use strict\";\nvar partition_1 = require('../operators/partition');\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nfunction partition(predicate, thisArg) {\n    return partition_1.partition(predicate, thisArg)(this);\n}\nexports.partition = partition;\n","\"use strict\";\nvar pluck_1 = require('../operators/pluck');\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} A new Observable of property values from the source values.\n * @method pluck\n * @owner Observable\n */\nfunction pluck() {\n    var properties = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        properties[_i - 0] = arguments[_i];\n    }\n    return pluck_1.pluck.apply(void 0, properties)(this);\n}\nexports.pluck = pluck;\n","\"use strict\";\nvar publish_1 = require('../operators/publish');\n/* tslint:enable:max-line-length */\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nfunction publish(selector) {\n    return publish_1.publish(selector)(this);\n}\nexports.publish = publish;\n","\"use strict\";\nvar publishBehavior_1 = require('../operators/publishBehavior');\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nfunction publishBehavior(value) {\n    return publishBehavior_1.publishBehavior(value)(this);\n}\nexports.publishBehavior = publishBehavior;\n","\"use strict\";\nvar publishLast_1 = require('../operators/publishLast');\n/**\n * @return {ConnectableObservable<T>}\n * @method publishLast\n * @owner Observable\n */\nfunction publishLast() {\n    //TODO(benlesh): correct type-flow through here.\n    return publishLast_1.publishLast()(this);\n}\nexports.publishLast = publishLast;\n","\"use strict\";\nvar publishReplay_1 = require('../operators/publishReplay');\n/* tslint:enable:max-line-length */\n/**\n * @param bufferSize\n * @param windowTime\n * @param selectorOrScheduler\n * @param scheduler\n * @return {Observable<T> | ConnectableObservable<T>}\n * @method publishReplay\n * @owner Observable\n */\nfunction publishReplay(bufferSize, windowTime, selectorOrScheduler, scheduler) {\n    return publishReplay_1.publishReplay(bufferSize, windowTime, selectorOrScheduler, scheduler)(this);\n}\nexports.publishReplay = publishReplay;\n","\"use strict\";\nvar race_1 = require('../operators/race');\n// NOTE: to support backwards compatability with 5.4.* and lower\nvar race_2 = require('../observable/race');\nexports.raceStatic = race_2.race;\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables.\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nfunction race() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return race_1.race.apply(void 0, observables)(this);\n}\nexports.race = race;\n","\"use strict\";\nvar reduce_1 = require('../operators/reduce');\n/* tslint:enable:max-line-length */\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nfunction reduce(accumulator, seed) {\n    // providing a seed of `undefined` *should* be valid and trigger\n    // hasSeed! so don't use `seed !== undefined` checks!\n    // For this reason, we have to check it here at the original call site\n    // otherwise inside Operator/Subscriber we won't know if `undefined`\n    // means they didn't provide anything or if they literally provided `undefined`\n    if (arguments.length >= 2) {\n        return reduce_1.reduce(accumulator, seed)(this);\n    }\n    return reduce_1.reduce(accumulator)(this);\n}\nexports.reduce = reduce;\n","\"use strict\";\nvar repeat_1 = require('../operators/repeat');\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nfunction repeat(count) {\n    if (count === void 0) { count = -1; }\n    return repeat_1.repeat(count)(this);\n}\nexports.repeat = repeat;\n","\"use strict\";\nvar repeatWhen_1 = require('../operators/repeatWhen');\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nfunction repeatWhen(notifier) {\n    return repeatWhen_1.repeatWhen(notifier)(this);\n}\nexports.repeatWhen = repeatWhen;\n","\"use strict\";\nvar retry_1 = require('../operators/retry');\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nfunction retry(count) {\n    if (count === void 0) { count = -1; }\n    return retry_1.retry(count)(this);\n}\nexports.retry = retry;\n","\"use strict\";\nvar retryWhen_1 = require('../operators/retryWhen');\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nfunction retryWhen(notifier) {\n    return retryWhen_1.retryWhen(notifier)(this);\n}\nexports.retryWhen = retryWhen;\n","\"use strict\";\nvar sample_1 = require('../operators/sample');\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nfunction sample(notifier) {\n    return sample_1.sample(notifier)(this);\n}\nexports.sample = sample;\n","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar sampleTime_1 = require('../operators/sampleTime');\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nfunction sampleTime(period, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return sampleTime_1.sampleTime(period, scheduler)(this);\n}\nexports.sampleTime = sampleTime;\n","\"use strict\";\nvar scan_1 = require('../operators/scan');\n/* tslint:enable:max-line-length */\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nfunction scan(accumulator, seed) {\n    if (arguments.length >= 2) {\n        return scan_1.scan(accumulator, seed)(this);\n    }\n    return scan_1.scan(accumulator)(this);\n}\nexports.scan = scan;\n","\"use strict\";\nvar sequenceEqual_1 = require('../operators/sequenceEqual');\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nfunction sequenceEqual(compareTo, comparor) {\n    return sequenceEqual_1.sequenceEqual(compareTo, comparor)(this);\n}\nexports.sequenceEqual = sequenceEqual;\n","\"use strict\";\nvar share_1 = require('../operators/share');\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n *\n * This behaves similarly to .publish().refCount(), with a behavior difference when the source observable emits complete.\n * .publish().refCount() will not resubscribe to the original source, however .share() will resubscribe to the original source.\n * Observable.of(\"test\").publish().refCount() will not re-emit \"test\" on new subscriptions, Observable.of(\"test\").share() will\n * re-emit \"test\" to new subscriptions.\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nfunction share() {\n    return share_1.share()(this);\n}\nexports.share = share;\n;\n","\"use strict\";\nvar shareReplay_1 = require('../operators/shareReplay');\n/**\n * @method shareReplay\n * @owner Observable\n */\nfunction shareReplay(bufferSize, windowTime, scheduler) {\n    return shareReplay_1.shareReplay(bufferSize, windowTime, scheduler)(this);\n}\nexports.shareReplay = shareReplay;\n;\n","\"use strict\";\nvar single_1 = require('../operators/single');\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nfunction single(predicate) {\n    return single_1.single(predicate)(this);\n}\nexports.single = single;\n","\"use strict\";\nvar skip_1 = require('../operators/skip');\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nfunction skip(count) {\n    return skip_1.skip(count)(this);\n}\nexports.skip = skip;\n","\"use strict\";\nvar skipLast_1 = require('../operators/skipLast');\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nfunction skipLast(count) {\n    return skipLast_1.skipLast(count)(this);\n}\nexports.skipLast = skipLast;\n","\"use strict\";\nvar skipUntil_1 = require('../operators/skipUntil');\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nfunction skipUntil(notifier) {\n    return skipUntil_1.skipUntil(notifier)(this);\n}\nexports.skipUntil = skipUntil;\n","\"use strict\";\nvar skipWhile_1 = require('../operators/skipWhile');\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nfunction skipWhile(predicate) {\n    return skipWhile_1.skipWhile(predicate)(this);\n}\nexports.skipWhile = skipWhile;\n","\"use strict\";\nvar startWith_1 = require('../operators/startWith');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nfunction startWith() {\n    var array = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        array[_i - 0] = arguments[_i];\n    }\n    return startWith_1.startWith.apply(void 0, array)(this);\n}\nexports.startWith = startWith;\n","\"use strict\";\nvar subscribeOn_1 = require('../operators/subscribeOn');\n/**\n * Asynchronously subscribes Observers to this Observable on the specified IScheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} scheduler - The IScheduler to perform subscription actions on.\n * @return {Observable<T>} The source Observable modified so that its subscriptions happen on the specified IScheduler.\n .\n * @method subscribeOn\n * @owner Observable\n */\nfunction subscribeOn(scheduler, delay) {\n    if (delay === void 0) { delay = 0; }\n    return subscribeOn_1.subscribeOn(scheduler, delay)(this);\n}\nexports.subscribeOn = subscribeOn;\n","\"use strict\";\nvar switchAll_1 = require('../operators/switchAll');\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * subscribing to only the most recently emitted of those inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * previous inner Observable once a new one appears.</span>\n *\n * <img src=\"./img/switch.png\" width=\"100%\">\n *\n * `switch` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable subscribes to the inner Observable and\n * begins emitting the items emitted by that. So far, it behaves\n * like {@link mergeAll}. However, when a new inner Observable is emitted,\n * `switch` unsubscribes from the earlier-emitted inner Observable and\n * subscribes to the new inner Observable and begins emitting items from it. It\n * continues to behave like this for subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * // Each click event is mapped to an Observable that ticks every second\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var switched = higherOrder.switch();\n * // The outcome is that `switched` is essentially a timer that restarts\n * // on every click. The interval Observables from older clicks do not merge\n * // with the current interval Observable.\n * switched.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switchMap}\n * @see {@link switchMapTo}\n * @see {@link zipAll}\n *\n * @return {Observable<T>} An Observable that emits the items emitted by the\n * Observable most recently emitted by the source Observable.\n * @method switch\n * @name switch\n * @owner Observable\n */\nfunction _switch() {\n    return switchAll_1.switchAll()(this);\n}\nexports._switch = _switch;\n","\"use strict\";\nvar switchMap_1 = require('../operators/switchMap');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nfunction switchMap(project, resultSelector) {\n    return switchMap_1.switchMap(project, resultSelector)(this);\n}\nexports.switchMap = switchMap;\n","\"use strict\";\nvar switchMapTo_1 = require('../operators/switchMapTo');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nfunction switchMapTo(innerObservable, resultSelector) {\n    return switchMapTo_1.switchMapTo(innerObservable, resultSelector)(this);\n}\nexports.switchMapTo = switchMapTo;\n","\"use strict\";\nvar take_1 = require('../operators/take');\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nfunction take(count) {\n    return take_1.take(count)(this);\n}\nexports.take = take;\n","\"use strict\";\nvar takeLast_1 = require('../operators/takeLast');\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nfunction takeLast(count) {\n    return takeLast_1.takeLast(count)(this);\n}\nexports.takeLast = takeLast;\n","\"use strict\";\nvar takeUntil_1 = require('../operators/takeUntil');\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value, the output Observable stops mirroring the source Observable\n * and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nfunction takeUntil(notifier) {\n    return takeUntil_1.takeUntil(notifier)(this);\n}\nexports.takeUntil = takeUntil;\n","\"use strict\";\nvar takeWhile_1 = require('../operators/takeWhile');\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nfunction takeWhile(predicate) {\n    return takeWhile_1.takeWhile(predicate)(this);\n}\nexports.takeWhile = takeWhile;\n","\"use strict\";\nvar throttle_1 = require('../operators/throttle');\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nfunction throttle(durationSelector, config) {\n    if (config === void 0) { config = throttle_1.defaultThrottleConfig; }\n    return throttle_1.throttle(durationSelector, config)(this);\n}\nexports.throttle = throttle;\n","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar throttle_1 = require('../operators/throttle');\nvar throttleTime_1 = require('../operators/throttleTime');\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nfunction throttleTime(duration, scheduler, config) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    if (config === void 0) { config = throttle_1.defaultThrottleConfig; }\n    return throttleTime_1.throttleTime(duration, scheduler, config)(this);\n}\nexports.throttleTime = throttleTime;\n","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar timeInterval_1 = require('../operators/timeInterval');\nexports.TimeInterval = timeInterval_1.TimeInterval;\n/**\n * @param scheduler\n * @return {Observable<TimeInterval<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timeInterval\n * @owner Observable\n */\nfunction timeInterval(scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return timeInterval_1.timeInterval(scheduler)(this);\n}\nexports.timeInterval = timeInterval;\n","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar timeout_1 = require('../operators/timeout');\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * <img src=\"./img/timeout.png\" width=\"100%\">\n *\n * `timeout` operator accepts as an argument either a number or a Date.\n *\n * If number was provided, it returns an Observable that behaves like a source\n * Observable, unless there is a period of time where there is no value emitted.\n * So if you provide `100` as argument and first value comes after 50ms from\n * the moment of subscription, this value will be simply re-emitted by the resulting\n * Observable. If however after that 100ms passes without a second value being emitted,\n * stream will end with an error and source Observable will be unsubscribed.\n * These checks are performed throughout whole lifecycle of Observable - from the moment\n * it was subscribed to, until it completes or errors itself. Thus every value must be\n * emitted within specified period since previous value.\n *\n * If provided argument was Date, returned Observable behaves differently. It throws\n * if Observable did not complete before provided Date. This means that periods between\n * emission of particular values do not matter in this case. If Observable did not complete\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\n * stream behaves just as source Observable.\n *\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\n * when returned Observable will check if source stream emitted value or completed.\n *\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\n *                       // since `interval` might fire a bit later then scheduled.\n * .subscribe(\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\n *     err => console.log(err) // Will never be called.\n * );\n *\n * seconds.timeout(900).subscribe(\n *     value => console.log(value), // Will never be called.\n *     err => console.log(err) // Will emit error before even first value is emitted,\n *                             // since it did not arrive within 900ms period.\n * );\n *\n * @example <caption>Use Date to check if Observable completed</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\n * .subscribe(\n *     value => console.log(value), // Will emit values as regular `interval` would\n *                                  // until December 17, 2020 at 03:24:00.\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\n *                             // since Observable did not complete by then.\n * );\n *\n * @see {@link timeoutWith}\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\n * @method timeout\n * @owner Observable\n */\nfunction timeout(due, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return timeout_1.timeout(due, scheduler)(this);\n}\nexports.timeout = timeout;\n","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar timeoutWith_1 = require('../operators/timeoutWith');\n/* tslint:enable:max-line-length */\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nfunction timeoutWith(due, withObservable, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return timeoutWith_1.timeoutWith(due, withObservable, scheduler)(this);\n}\nexports.timeoutWith = timeoutWith;\n","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar timestamp_1 = require('../operators/timestamp');\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nfunction timestamp(scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return timestamp_1.timestamp(scheduler)(this);\n}\nexports.timestamp = timestamp;\n","\"use strict\";\nvar toArray_1 = require('../operators/toArray');\n/**\n * Collects all source emissions and emits them as an array when the source completes.\n *\n * <span class=\"informal\">Get all values inside an array when the source completes</span>\n *\n * <img src=\"./img/toArray.png\" width=\"100%\">\n *\n * `toArray` will wait until the source Observable completes\n * before emitting the array containing all emissions.\n * When the source Observable errors no array will be emitted.\n *\n * @example <caption>Create array from input</caption>\n * const input = Rx.Observable.interval(100).take(4);\n *\n * input.toArray()\n *   .subscribe(arr => console.log(arr)); // [0,1,2,3]\n *\n * @see {@link buffer}\n *\n * @return {Observable<any[]>|WebSocketSubject<T>|Observable<T>}\n * @method toArray\n * @owner Observable\n */\nfunction toArray() {\n    return toArray_1.toArray()(this);\n}\nexports.toArray = toArray;\n","\"use strict\";\nvar window_1 = require('../operators/window');\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nfunction window(windowBoundaries) {\n    return window_1.window(windowBoundaries)(this);\n}\nexports.window = window;\n","\"use strict\";\nvar windowCount_1 = require('../operators/windowCount');\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nfunction windowCount(windowSize, startWindowEvery) {\n    if (startWindowEvery === void 0) { startWindowEvery = 0; }\n    return windowCount_1.windowCount(windowSize, startWindowEvery)(this);\n}\nexports.windowCount = windowCount;\n","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar isNumeric_1 = require('../util/isNumeric');\nvar isScheduler_1 = require('../util/isScheduler');\nvar windowTime_1 = require('../operators/windowTime');\nfunction windowTime(windowTimeSpan) {\n    var scheduler = async_1.async;\n    var windowCreationInterval = null;\n    var maxWindowSize = Number.POSITIVE_INFINITY;\n    if (isScheduler_1.isScheduler(arguments[3])) {\n        scheduler = arguments[3];\n    }\n    if (isScheduler_1.isScheduler(arguments[2])) {\n        scheduler = arguments[2];\n    }\n    else if (isNumeric_1.isNumeric(arguments[2])) {\n        maxWindowSize = arguments[2];\n    }\n    if (isScheduler_1.isScheduler(arguments[1])) {\n        scheduler = arguments[1];\n    }\n    else if (isNumeric_1.isNumeric(arguments[1])) {\n        windowCreationInterval = arguments[1];\n    }\n    return windowTime_1.windowTime(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler)(this);\n}\nexports.windowTime = windowTime;\n","\"use strict\";\nvar windowToggle_1 = require('../operators/windowToggle');\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nfunction windowToggle(openings, closingSelector) {\n    return windowToggle_1.windowToggle(openings, closingSelector)(this);\n}\nexports.windowToggle = windowToggle;\n","\"use strict\";\nvar windowWhen_1 = require('../operators/windowWhen');\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nfunction windowWhen(closingSelector) {\n    return windowWhen_1.windowWhen(closingSelector)(this);\n}\nexports.windowWhen = windowWhen;\n","\"use strict\";\nvar withLatestFrom_1 = require('../operators/withLatestFrom');\n/* tslint:enable:max-line-length */\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nfunction withLatestFrom() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i - 0] = arguments[_i];\n    }\n    return withLatestFrom_1.withLatestFrom.apply(void 0, args)(this);\n}\nexports.withLatestFrom = withLatestFrom;\n","\"use strict\";\nvar zip_1 = require('../operators/zip');\n/* tslint:enable:max-line-length */\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nfunction zipProto() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return zip_1.zip.apply(void 0, observables)(this);\n}\nexports.zipProto = zipProto;\n","\"use strict\";\nvar zipAll_1 = require('../operators/zipAll');\n/**\n * @param project\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method zipAll\n * @owner Observable\n */\nfunction zipAll(project) {\n    return zipAll_1.zipAll(project)(this);\n}\nexports.zipAll = zipAll;\n","\"use strict\";\nvar audit_1 = require('./operators/audit');\nexports.audit = audit_1.audit;\nvar auditTime_1 = require('./operators/auditTime');\nexports.auditTime = auditTime_1.auditTime;\nvar buffer_1 = require('./operators/buffer');\nexports.buffer = buffer_1.buffer;\nvar bufferCount_1 = require('./operators/bufferCount');\nexports.bufferCount = bufferCount_1.bufferCount;\nvar bufferTime_1 = require('./operators/bufferTime');\nexports.bufferTime = bufferTime_1.bufferTime;\nvar bufferToggle_1 = require('./operators/bufferToggle');\nexports.bufferToggle = bufferToggle_1.bufferToggle;\nvar bufferWhen_1 = require('./operators/bufferWhen');\nexports.bufferWhen = bufferWhen_1.bufferWhen;\nvar catchError_1 = require('./operators/catchError');\nexports.catchError = catchError_1.catchError;\nvar combineAll_1 = require('./operators/combineAll');\nexports.combineAll = combineAll_1.combineAll;\nvar combineLatest_1 = require('./operators/combineLatest');\nexports.combineLatest = combineLatest_1.combineLatest;\nvar concat_1 = require('./operators/concat');\nexports.concat = concat_1.concat;\nvar concatAll_1 = require('./operators/concatAll');\nexports.concatAll = concatAll_1.concatAll;\nvar concatMap_1 = require('./operators/concatMap');\nexports.concatMap = concatMap_1.concatMap;\nvar concatMapTo_1 = require('./operators/concatMapTo');\nexports.concatMapTo = concatMapTo_1.concatMapTo;\nvar count_1 = require('./operators/count');\nexports.count = count_1.count;\nvar debounce_1 = require('./operators/debounce');\nexports.debounce = debounce_1.debounce;\nvar debounceTime_1 = require('./operators/debounceTime');\nexports.debounceTime = debounceTime_1.debounceTime;\nvar defaultIfEmpty_1 = require('./operators/defaultIfEmpty');\nexports.defaultIfEmpty = defaultIfEmpty_1.defaultIfEmpty;\nvar delay_1 = require('./operators/delay');\nexports.delay = delay_1.delay;\nvar delayWhen_1 = require('./operators/delayWhen');\nexports.delayWhen = delayWhen_1.delayWhen;\nvar dematerialize_1 = require('./operators/dematerialize');\nexports.dematerialize = dematerialize_1.dematerialize;\nvar distinct_1 = require('./operators/distinct');\nexports.distinct = distinct_1.distinct;\nvar distinctUntilChanged_1 = require('./operators/distinctUntilChanged');\nexports.distinctUntilChanged = distinctUntilChanged_1.distinctUntilChanged;\nvar distinctUntilKeyChanged_1 = require('./operators/distinctUntilKeyChanged');\nexports.distinctUntilKeyChanged = distinctUntilKeyChanged_1.distinctUntilKeyChanged;\nvar elementAt_1 = require('./operators/elementAt');\nexports.elementAt = elementAt_1.elementAt;\nvar every_1 = require('./operators/every');\nexports.every = every_1.every;\nvar exhaust_1 = require('./operators/exhaust');\nexports.exhaust = exhaust_1.exhaust;\nvar exhaustMap_1 = require('./operators/exhaustMap');\nexports.exhaustMap = exhaustMap_1.exhaustMap;\nvar expand_1 = require('./operators/expand');\nexports.expand = expand_1.expand;\nvar filter_1 = require('./operators/filter');\nexports.filter = filter_1.filter;\nvar finalize_1 = require('./operators/finalize');\nexports.finalize = finalize_1.finalize;\nvar find_1 = require('./operators/find');\nexports.find = find_1.find;\nvar findIndex_1 = require('./operators/findIndex');\nexports.findIndex = findIndex_1.findIndex;\nvar first_1 = require('./operators/first');\nexports.first = first_1.first;\nvar groupBy_1 = require('./operators/groupBy');\nexports.groupBy = groupBy_1.groupBy;\nvar ignoreElements_1 = require('./operators/ignoreElements');\nexports.ignoreElements = ignoreElements_1.ignoreElements;\nvar isEmpty_1 = require('./operators/isEmpty');\nexports.isEmpty = isEmpty_1.isEmpty;\nvar last_1 = require('./operators/last');\nexports.last = last_1.last;\nvar map_1 = require('./operators/map');\nexports.map = map_1.map;\nvar mapTo_1 = require('./operators/mapTo');\nexports.mapTo = mapTo_1.mapTo;\nvar materialize_1 = require('./operators/materialize');\nexports.materialize = materialize_1.materialize;\nvar max_1 = require('./operators/max');\nexports.max = max_1.max;\nvar merge_1 = require('./operators/merge');\nexports.merge = merge_1.merge;\nvar mergeAll_1 = require('./operators/mergeAll');\nexports.mergeAll = mergeAll_1.mergeAll;\nvar mergeMap_1 = require('./operators/mergeMap');\nexports.mergeMap = mergeMap_1.mergeMap;\nvar mergeMap_2 = require('./operators/mergeMap');\nexports.flatMap = mergeMap_2.mergeMap;\nvar mergeMapTo_1 = require('./operators/mergeMapTo');\nexports.mergeMapTo = mergeMapTo_1.mergeMapTo;\nvar mergeScan_1 = require('./operators/mergeScan');\nexports.mergeScan = mergeScan_1.mergeScan;\nvar min_1 = require('./operators/min');\nexports.min = min_1.min;\nvar multicast_1 = require('./operators/multicast');\nexports.multicast = multicast_1.multicast;\nvar observeOn_1 = require('./operators/observeOn');\nexports.observeOn = observeOn_1.observeOn;\nvar onErrorResumeNext_1 = require('./operators/onErrorResumeNext');\nexports.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNext;\nvar pairwise_1 = require('./operators/pairwise');\nexports.pairwise = pairwise_1.pairwise;\nvar partition_1 = require('./operators/partition');\nexports.partition = partition_1.partition;\nvar pluck_1 = require('./operators/pluck');\nexports.pluck = pluck_1.pluck;\nvar publish_1 = require('./operators/publish');\nexports.publish = publish_1.publish;\nvar publishBehavior_1 = require('./operators/publishBehavior');\nexports.publishBehavior = publishBehavior_1.publishBehavior;\nvar publishLast_1 = require('./operators/publishLast');\nexports.publishLast = publishLast_1.publishLast;\nvar publishReplay_1 = require('./operators/publishReplay');\nexports.publishReplay = publishReplay_1.publishReplay;\nvar race_1 = require('./operators/race');\nexports.race = race_1.race;\nvar reduce_1 = require('./operators/reduce');\nexports.reduce = reduce_1.reduce;\nvar repeat_1 = require('./operators/repeat');\nexports.repeat = repeat_1.repeat;\nvar repeatWhen_1 = require('./operators/repeatWhen');\nexports.repeatWhen = repeatWhen_1.repeatWhen;\nvar retry_1 = require('./operators/retry');\nexports.retry = retry_1.retry;\nvar retryWhen_1 = require('./operators/retryWhen');\nexports.retryWhen = retryWhen_1.retryWhen;\nvar refCount_1 = require('./operators/refCount');\nexports.refCount = refCount_1.refCount;\nvar sample_1 = require('./operators/sample');\nexports.sample = sample_1.sample;\nvar sampleTime_1 = require('./operators/sampleTime');\nexports.sampleTime = sampleTime_1.sampleTime;\nvar scan_1 = require('./operators/scan');\nexports.scan = scan_1.scan;\nvar sequenceEqual_1 = require('./operators/sequenceEqual');\nexports.sequenceEqual = sequenceEqual_1.sequenceEqual;\nvar share_1 = require('./operators/share');\nexports.share = share_1.share;\nvar shareReplay_1 = require('./operators/shareReplay');\nexports.shareReplay = shareReplay_1.shareReplay;\nvar single_1 = require('./operators/single');\nexports.single = single_1.single;\nvar skip_1 = require('./operators/skip');\nexports.skip = skip_1.skip;\nvar skipLast_1 = require('./operators/skipLast');\nexports.skipLast = skipLast_1.skipLast;\nvar skipUntil_1 = require('./operators/skipUntil');\nexports.skipUntil = skipUntil_1.skipUntil;\nvar skipWhile_1 = require('./operators/skipWhile');\nexports.skipWhile = skipWhile_1.skipWhile;\nvar startWith_1 = require('./operators/startWith');\nexports.startWith = startWith_1.startWith;\n/**\n * TODO(https://github.com/ReactiveX/rxjs/issues/2900): Add back subscribeOn once it can be\n * treeshaken. Currently if this export is added back, it\n * forces apps to bring in asap scheduler along with\n * Immediate, root, and other supporting code.\n */\n// export { subscribeOn } from './operators/subscribeOn';\nvar switchAll_1 = require('./operators/switchAll');\nexports.switchAll = switchAll_1.switchAll;\nvar switchMap_1 = require('./operators/switchMap');\nexports.switchMap = switchMap_1.switchMap;\nvar switchMapTo_1 = require('./operators/switchMapTo');\nexports.switchMapTo = switchMapTo_1.switchMapTo;\nvar take_1 = require('./operators/take');\nexports.take = take_1.take;\nvar takeLast_1 = require('./operators/takeLast');\nexports.takeLast = takeLast_1.takeLast;\nvar takeUntil_1 = require('./operators/takeUntil');\nexports.takeUntil = takeUntil_1.takeUntil;\nvar takeWhile_1 = require('./operators/takeWhile');\nexports.takeWhile = takeWhile_1.takeWhile;\nvar tap_1 = require('./operators/tap');\nexports.tap = tap_1.tap;\nvar throttle_1 = require('./operators/throttle');\nexports.throttle = throttle_1.throttle;\nvar throttleTime_1 = require('./operators/throttleTime');\nexports.throttleTime = throttleTime_1.throttleTime;\nvar timeInterval_1 = require('./operators/timeInterval');\nexports.timeInterval = timeInterval_1.timeInterval;\nvar timeout_1 = require('./operators/timeout');\nexports.timeout = timeout_1.timeout;\nvar timeoutWith_1 = require('./operators/timeoutWith');\nexports.timeoutWith = timeoutWith_1.timeoutWith;\nvar timestamp_1 = require('./operators/timestamp');\nexports.timestamp = timestamp_1.timestamp;\nvar toArray_1 = require('./operators/toArray');\nexports.toArray = toArray_1.toArray;\nvar window_1 = require('./operators/window');\nexports.window = window_1.window;\nvar windowCount_1 = require('./operators/windowCount');\nexports.windowCount = windowCount_1.windowCount;\nvar windowTime_1 = require('./operators/windowTime');\nexports.windowTime = windowTime_1.windowTime;\nvar windowToggle_1 = require('./operators/windowToggle');\nexports.windowToggle = windowToggle_1.windowToggle;\nvar windowWhen_1 = require('./operators/windowWhen');\nexports.windowWhen = windowWhen_1.windowWhen;\nvar withLatestFrom_1 = require('./operators/withLatestFrom');\nexports.withLatestFrom = withLatestFrom_1.withLatestFrom;\nvar zip_1 = require('./operators/zip');\nexports.zip = zip_1.zip;\nvar zipAll_1 = require('./operators/zipAll');\nexports.zipAll = zipAll_1.zipAll;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nfunction audit(durationSelector) {\n    return function auditOperatorFunction(source) {\n        return source.lift(new AuditOperator(durationSelector));\n    };\n}\nexports.audit = audit;\nvar AuditOperator = (function () {\n    function AuditOperator(durationSelector) {\n        this.durationSelector = durationSelector;\n    }\n    AuditOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new AuditSubscriber(subscriber, this.durationSelector));\n    };\n    return AuditOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AuditSubscriber = (function (_super) {\n    __extends(AuditSubscriber, _super);\n    function AuditSubscriber(destination, durationSelector) {\n        _super.call(this, destination);\n        this.durationSelector = durationSelector;\n        this.hasValue = false;\n    }\n    AuditSubscriber.prototype._next = function (value) {\n        this.value = value;\n        this.hasValue = true;\n        if (!this.throttled) {\n            var duration = tryCatch_1.tryCatch(this.durationSelector)(value);\n            if (duration === errorObject_1.errorObject) {\n                this.destination.error(errorObject_1.errorObject.e);\n            }\n            else {\n                var innerSubscription = subscribeToResult_1.subscribeToResult(this, duration);\n                if (innerSubscription.closed) {\n                    this.clearThrottle();\n                }\n                else {\n                    this.add(this.throttled = innerSubscription);\n                }\n            }\n        }\n    };\n    AuditSubscriber.prototype.clearThrottle = function () {\n        var _a = this, value = _a.value, hasValue = _a.hasValue, throttled = _a.throttled;\n        if (throttled) {\n            this.remove(throttled);\n            this.throttled = null;\n            throttled.unsubscribe();\n        }\n        if (hasValue) {\n            this.value = null;\n            this.hasValue = false;\n            this.destination.next(value);\n        }\n    };\n    AuditSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {\n        this.clearThrottle();\n    };\n    AuditSubscriber.prototype.notifyComplete = function () {\n        this.clearThrottle();\n    };\n    return AuditSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar audit_1 = require('./audit');\nvar timer_1 = require('../observable/timer');\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nfunction auditTime(duration, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return audit_1.audit(function () { return timer_1.timer(duration, scheduler); });\n}\nexports.auditTime = auditTime;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nfunction buffer(closingNotifier) {\n    return function bufferOperatorFunction(source) {\n        return source.lift(new BufferOperator(closingNotifier));\n    };\n}\nexports.buffer = buffer;\nvar BufferOperator = (function () {\n    function BufferOperator(closingNotifier) {\n        this.closingNotifier = closingNotifier;\n    }\n    BufferOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n    };\n    return BufferOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferSubscriber = (function (_super) {\n    __extends(BufferSubscriber, _super);\n    function BufferSubscriber(destination, closingNotifier) {\n        _super.call(this, destination);\n        this.buffer = [];\n        this.add(subscribeToResult_1.subscribeToResult(this, closingNotifier));\n    }\n    BufferSubscriber.prototype._next = function (value) {\n        this.buffer.push(value);\n    };\n    BufferSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var buffer = this.buffer;\n        this.buffer = [];\n        this.destination.next(buffer);\n    };\n    return BufferSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nfunction bufferCount(bufferSize, startBufferEvery) {\n    if (startBufferEvery === void 0) { startBufferEvery = null; }\n    return function bufferCountOperatorFunction(source) {\n        return source.lift(new BufferCountOperator(bufferSize, startBufferEvery));\n    };\n}\nexports.bufferCount = bufferCount;\nvar BufferCountOperator = (function () {\n    function BufferCountOperator(bufferSize, startBufferEvery) {\n        this.bufferSize = bufferSize;\n        this.startBufferEvery = startBufferEvery;\n        if (!startBufferEvery || bufferSize === startBufferEvery) {\n            this.subscriberClass = BufferCountSubscriber;\n        }\n        else {\n            this.subscriberClass = BufferSkipCountSubscriber;\n        }\n    }\n    BufferCountOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));\n    };\n    return BufferCountOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferCountSubscriber = (function (_super) {\n    __extends(BufferCountSubscriber, _super);\n    function BufferCountSubscriber(destination, bufferSize) {\n        _super.call(this, destination);\n        this.bufferSize = bufferSize;\n        this.buffer = [];\n    }\n    BufferCountSubscriber.prototype._next = function (value) {\n        var buffer = this.buffer;\n        buffer.push(value);\n        if (buffer.length == this.bufferSize) {\n            this.destination.next(buffer);\n            this.buffer = [];\n        }\n    };\n    BufferCountSubscriber.prototype._complete = function () {\n        var buffer = this.buffer;\n        if (buffer.length > 0) {\n            this.destination.next(buffer);\n        }\n        _super.prototype._complete.call(this);\n    };\n    return BufferCountSubscriber;\n}(Subscriber_1.Subscriber));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferSkipCountSubscriber = (function (_super) {\n    __extends(BufferSkipCountSubscriber, _super);\n    function BufferSkipCountSubscriber(destination, bufferSize, startBufferEvery) {\n        _super.call(this, destination);\n        this.bufferSize = bufferSize;\n        this.startBufferEvery = startBufferEvery;\n        this.buffers = [];\n        this.count = 0;\n    }\n    BufferSkipCountSubscriber.prototype._next = function (value) {\n        var _a = this, bufferSize = _a.bufferSize, startBufferEvery = _a.startBufferEvery, buffers = _a.buffers, count = _a.count;\n        this.count++;\n        if (count % startBufferEvery === 0) {\n            buffers.push([]);\n        }\n        for (var i = buffers.length; i--;) {\n            var buffer = buffers[i];\n            buffer.push(value);\n            if (buffer.length === bufferSize) {\n                buffers.splice(i, 1);\n                this.destination.next(buffer);\n            }\n        }\n    };\n    BufferSkipCountSubscriber.prototype._complete = function () {\n        var _a = this, buffers = _a.buffers, destination = _a.destination;\n        while (buffers.length > 0) {\n            var buffer = buffers.shift();\n            if (buffer.length > 0) {\n                destination.next(buffer);\n            }\n        }\n        _super.prototype._complete.call(this);\n    };\n    return BufferSkipCountSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar async_1 = require('../scheduler/async');\nvar Subscriber_1 = require('../Subscriber');\nvar isScheduler_1 = require('../util/isScheduler');\n/* tslint:enable:max-line-length */\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nfunction bufferTime(bufferTimeSpan) {\n    var length = arguments.length;\n    var scheduler = async_1.async;\n    if (isScheduler_1.isScheduler(arguments[arguments.length - 1])) {\n        scheduler = arguments[arguments.length - 1];\n        length--;\n    }\n    var bufferCreationInterval = null;\n    if (length >= 2) {\n        bufferCreationInterval = arguments[1];\n    }\n    var maxBufferSize = Number.POSITIVE_INFINITY;\n    if (length >= 3) {\n        maxBufferSize = arguments[2];\n    }\n    return function bufferTimeOperatorFunction(source) {\n        return source.lift(new BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n    };\n}\nexports.bufferTime = bufferTime;\nvar BufferTimeOperator = (function () {\n    function BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n        this.bufferTimeSpan = bufferTimeSpan;\n        this.bufferCreationInterval = bufferCreationInterval;\n        this.maxBufferSize = maxBufferSize;\n        this.scheduler = scheduler;\n    }\n    BufferTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferTimeSubscriber(subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler));\n    };\n    return BufferTimeOperator;\n}());\nvar Context = (function () {\n    function Context() {\n        this.buffer = [];\n    }\n    return Context;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferTimeSubscriber = (function (_super) {\n    __extends(BufferTimeSubscriber, _super);\n    function BufferTimeSubscriber(destination, bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n        _super.call(this, destination);\n        this.bufferTimeSpan = bufferTimeSpan;\n        this.bufferCreationInterval = bufferCreationInterval;\n        this.maxBufferSize = maxBufferSize;\n        this.scheduler = scheduler;\n        this.contexts = [];\n        var context = this.openContext();\n        this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n        if (this.timespanOnly) {\n            var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };\n            this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n        }\n        else {\n            var closeState = { subscriber: this, context: context };\n            var creationState = { bufferTimeSpan: bufferTimeSpan, bufferCreationInterval: bufferCreationInterval, subscriber: this, scheduler: scheduler };\n            this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n            this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n        }\n    }\n    BufferTimeSubscriber.prototype._next = function (value) {\n        var contexts = this.contexts;\n        var len = contexts.length;\n        var filledBufferContext;\n        for (var i = 0; i < len; i++) {\n            var context = contexts[i];\n            var buffer = context.buffer;\n            buffer.push(value);\n            if (buffer.length == this.maxBufferSize) {\n                filledBufferContext = context;\n            }\n        }\n        if (filledBufferContext) {\n            this.onBufferFull(filledBufferContext);\n        }\n    };\n    BufferTimeSubscriber.prototype._error = function (err) {\n        this.contexts.length = 0;\n        _super.prototype._error.call(this, err);\n    };\n    BufferTimeSubscriber.prototype._complete = function () {\n        var _a = this, contexts = _a.contexts, destination = _a.destination;\n        while (contexts.length > 0) {\n            var context = contexts.shift();\n            destination.next(context.buffer);\n        }\n        _super.prototype._complete.call(this);\n    };\n    /** @deprecated internal use only */ BufferTimeSubscriber.prototype._unsubscribe = function () {\n        this.contexts = null;\n    };\n    BufferTimeSubscriber.prototype.onBufferFull = function (context) {\n        this.closeContext(context);\n        var closeAction = context.closeAction;\n        closeAction.unsubscribe();\n        this.remove(closeAction);\n        if (!this.closed && this.timespanOnly) {\n            context = this.openContext();\n            var bufferTimeSpan = this.bufferTimeSpan;\n            var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };\n            this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n        }\n    };\n    BufferTimeSubscriber.prototype.openContext = function () {\n        var context = new Context();\n        this.contexts.push(context);\n        return context;\n    };\n    BufferTimeSubscriber.prototype.closeContext = function (context) {\n        this.destination.next(context.buffer);\n        var contexts = this.contexts;\n        var spliceIndex = contexts ? contexts.indexOf(context) : -1;\n        if (spliceIndex >= 0) {\n            contexts.splice(contexts.indexOf(context), 1);\n        }\n    };\n    return BufferTimeSubscriber;\n}(Subscriber_1.Subscriber));\nfunction dispatchBufferTimeSpanOnly(state) {\n    var subscriber = state.subscriber;\n    var prevContext = state.context;\n    if (prevContext) {\n        subscriber.closeContext(prevContext);\n    }\n    if (!subscriber.closed) {\n        state.context = subscriber.openContext();\n        state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n    }\n}\nfunction dispatchBufferCreation(state) {\n    var bufferCreationInterval = state.bufferCreationInterval, bufferTimeSpan = state.bufferTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler;\n    var context = subscriber.openContext();\n    var action = this;\n    if (!subscriber.closed) {\n        subscriber.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, { subscriber: subscriber, context: context }));\n        action.schedule(state, bufferCreationInterval);\n    }\n}\nfunction dispatchBufferClose(arg) {\n    var subscriber = arg.subscriber, context = arg.context;\n    subscriber.closeContext(context);\n}\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscription_1 = require('../Subscription');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nfunction bufferToggle(openings, closingSelector) {\n    return function bufferToggleOperatorFunction(source) {\n        return source.lift(new BufferToggleOperator(openings, closingSelector));\n    };\n}\nexports.bufferToggle = bufferToggle;\nvar BufferToggleOperator = (function () {\n    function BufferToggleOperator(openings, closingSelector) {\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n    }\n    BufferToggleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n    };\n    return BufferToggleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferToggleSubscriber = (function (_super) {\n    __extends(BufferToggleSubscriber, _super);\n    function BufferToggleSubscriber(destination, openings, closingSelector) {\n        _super.call(this, destination);\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n        this.contexts = [];\n        this.add(subscribeToResult_1.subscribeToResult(this, openings));\n    }\n    BufferToggleSubscriber.prototype._next = function (value) {\n        var contexts = this.contexts;\n        var len = contexts.length;\n        for (var i = 0; i < len; i++) {\n            contexts[i].buffer.push(value);\n        }\n    };\n    BufferToggleSubscriber.prototype._error = function (err) {\n        var contexts = this.contexts;\n        while (contexts.length > 0) {\n            var context = contexts.shift();\n            context.subscription.unsubscribe();\n            context.buffer = null;\n            context.subscription = null;\n        }\n        this.contexts = null;\n        _super.prototype._error.call(this, err);\n    };\n    BufferToggleSubscriber.prototype._complete = function () {\n        var contexts = this.contexts;\n        while (contexts.length > 0) {\n            var context = contexts.shift();\n            this.destination.next(context.buffer);\n            context.subscription.unsubscribe();\n            context.buffer = null;\n            context.subscription = null;\n        }\n        this.contexts = null;\n        _super.prototype._complete.call(this);\n    };\n    BufferToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n    };\n    BufferToggleSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.closeBuffer(innerSub.context);\n    };\n    BufferToggleSubscriber.prototype.openBuffer = function (value) {\n        try {\n            var closingSelector = this.closingSelector;\n            var closingNotifier = closingSelector.call(this, value);\n            if (closingNotifier) {\n                this.trySubscribe(closingNotifier);\n            }\n        }\n        catch (err) {\n            this._error(err);\n        }\n    };\n    BufferToggleSubscriber.prototype.closeBuffer = function (context) {\n        var contexts = this.contexts;\n        if (contexts && context) {\n            var buffer = context.buffer, subscription = context.subscription;\n            this.destination.next(buffer);\n            contexts.splice(contexts.indexOf(context), 1);\n            this.remove(subscription);\n            subscription.unsubscribe();\n        }\n    };\n    BufferToggleSubscriber.prototype.trySubscribe = function (closingNotifier) {\n        var contexts = this.contexts;\n        var buffer = [];\n        var subscription = new Subscription_1.Subscription();\n        var context = { buffer: buffer, subscription: subscription };\n        contexts.push(context);\n        var innerSubscription = subscribeToResult_1.subscribeToResult(this, closingNotifier, context);\n        if (!innerSubscription || innerSubscription.closed) {\n            this.closeBuffer(context);\n        }\n        else {\n            innerSubscription.context = context;\n            this.add(innerSubscription);\n            subscription.add(innerSubscription);\n        }\n    };\n    return BufferToggleSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscription_1 = require('../Subscription');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nfunction bufferWhen(closingSelector) {\n    return function (source) {\n        return source.lift(new BufferWhenOperator(closingSelector));\n    };\n}\nexports.bufferWhen = bufferWhen;\nvar BufferWhenOperator = (function () {\n    function BufferWhenOperator(closingSelector) {\n        this.closingSelector = closingSelector;\n    }\n    BufferWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n    };\n    return BufferWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferWhenSubscriber = (function (_super) {\n    __extends(BufferWhenSubscriber, _super);\n    function BufferWhenSubscriber(destination, closingSelector) {\n        _super.call(this, destination);\n        this.closingSelector = closingSelector;\n        this.subscribing = false;\n        this.openBuffer();\n    }\n    BufferWhenSubscriber.prototype._next = function (value) {\n        this.buffer.push(value);\n    };\n    BufferWhenSubscriber.prototype._complete = function () {\n        var buffer = this.buffer;\n        if (buffer) {\n            this.destination.next(buffer);\n        }\n        _super.prototype._complete.call(this);\n    };\n    /** @deprecated internal use only */ BufferWhenSubscriber.prototype._unsubscribe = function () {\n        this.buffer = null;\n        this.subscribing = false;\n    };\n    BufferWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.openBuffer();\n    };\n    BufferWhenSubscriber.prototype.notifyComplete = function () {\n        if (this.subscribing) {\n            this.complete();\n        }\n        else {\n            this.openBuffer();\n        }\n    };\n    BufferWhenSubscriber.prototype.openBuffer = function () {\n        var closingSubscription = this.closingSubscription;\n        if (closingSubscription) {\n            this.remove(closingSubscription);\n            closingSubscription.unsubscribe();\n        }\n        var buffer = this.buffer;\n        if (this.buffer) {\n            this.destination.next(buffer);\n        }\n        this.buffer = [];\n        var closingNotifier = tryCatch_1.tryCatch(this.closingSelector)();\n        if (closingNotifier === errorObject_1.errorObject) {\n            this.error(errorObject_1.errorObject.e);\n        }\n        else {\n            closingSubscription = new Subscription_1.Subscription();\n            this.closingSubscription = closingSubscription;\n            this.add(closingSubscription);\n            this.subscribing = true;\n            closingSubscription.add(subscribeToResult_1.subscribeToResult(this, closingNotifier));\n            this.subscribing = false;\n        }\n    };\n    return BufferWhenSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @name catchError\n */\nfunction catchError(selector) {\n    return function catchErrorOperatorFunction(source) {\n        var operator = new CatchOperator(selector);\n        var caught = source.lift(operator);\n        return (operator.caught = caught);\n    };\n}\nexports.catchError = catchError;\nvar CatchOperator = (function () {\n    function CatchOperator(selector) {\n        this.selector = selector;\n    }\n    CatchOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n    };\n    return CatchOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar CatchSubscriber = (function (_super) {\n    __extends(CatchSubscriber, _super);\n    function CatchSubscriber(destination, selector, caught) {\n        _super.call(this, destination);\n        this.selector = selector;\n        this.caught = caught;\n    }\n    // NOTE: overriding `error` instead of `_error` because we don't want\n    // to have this flag this subscriber as `isStopped`. We can mimic the\n    // behavior of the RetrySubscriber (from the `retry` operator), where\n    // we unsubscribe from our source chain, reset our Subscriber flags,\n    // then subscribe to the selector result.\n    CatchSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var result = void 0;\n            try {\n                result = this.selector(err, this.caught);\n            }\n            catch (err2) {\n                _super.prototype.error.call(this, err2);\n                return;\n            }\n            this._unsubscribeAndRecycle();\n            this.add(subscribeToResult_1.subscribeToResult(this, result));\n        }\n    };\n    return CatchSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n","\"use strict\";\nvar combineLatest_1 = require('../operators/combineLatest');\nfunction combineAll(project) {\n    return function (source) { return source.lift(new combineLatest_1.CombineLatestOperator(project)); };\n}\nexports.combineAll = combineAll;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar ArrayObservable_1 = require('../observable/ArrayObservable');\nvar isArray_1 = require('../util/isArray');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar none = {};\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nfunction combineLatest() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var project = null;\n    if (typeof observables[observables.length - 1] === 'function') {\n        project = observables.pop();\n    }\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n    if (observables.length === 1 && isArray_1.isArray(observables[0])) {\n        observables = observables[0].slice();\n    }\n    return function (source) { return source.lift.call(new ArrayObservable_1.ArrayObservable([source].concat(observables)), new CombineLatestOperator(project)); };\n}\nexports.combineLatest = combineLatest;\nvar CombineLatestOperator = (function () {\n    function CombineLatestOperator(project) {\n        this.project = project;\n    }\n    CombineLatestOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new CombineLatestSubscriber(subscriber, this.project));\n    };\n    return CombineLatestOperator;\n}());\nexports.CombineLatestOperator = CombineLatestOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar CombineLatestSubscriber = (function (_super) {\n    __extends(CombineLatestSubscriber, _super);\n    function CombineLatestSubscriber(destination, project) {\n        _super.call(this, destination);\n        this.project = project;\n        this.active = 0;\n        this.values = [];\n        this.observables = [];\n    }\n    CombineLatestSubscriber.prototype._next = function (observable) {\n        this.values.push(none);\n        this.observables.push(observable);\n    };\n    CombineLatestSubscriber.prototype._complete = function () {\n        var observables = this.observables;\n        var len = observables.length;\n        if (len === 0) {\n            this.destination.complete();\n        }\n        else {\n            this.active = len;\n            this.toRespond = len;\n            for (var i = 0; i < len; i++) {\n                var observable = observables[i];\n                this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));\n            }\n        }\n    };\n    CombineLatestSubscriber.prototype.notifyComplete = function (unused) {\n        if ((this.active -= 1) === 0) {\n            this.destination.complete();\n        }\n    };\n    CombineLatestSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var values = this.values;\n        var oldVal = values[outerIndex];\n        var toRespond = !this.toRespond\n            ? 0\n            : oldVal === none ? --this.toRespond : this.toRespond;\n        values[outerIndex] = innerValue;\n        if (toRespond === 0) {\n            if (this.project) {\n                this._tryProject(values);\n            }\n            else {\n                this.destination.next(values.slice());\n            }\n        }\n    };\n    CombineLatestSubscriber.prototype._tryProject = function (values) {\n        var result;\n        try {\n            result = this.project.apply(this, values);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return CombineLatestSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.CombineLatestSubscriber = CombineLatestSubscriber;\n","\"use strict\";\nvar concat_1 = require('../observable/concat');\nvar concat_2 = require('../observable/concat');\nexports.concatStatic = concat_2.concat;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nfunction concat() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return function (source) { return source.lift.call(concat_1.concat.apply(void 0, [source].concat(observables))); };\n}\nexports.concat = concat;\n","\"use strict\";\nvar mergeAll_1 = require('./mergeAll');\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nfunction concatAll() {\n    return mergeAll_1.mergeAll(1);\n}\nexports.concatAll = concatAll;\n","\"use strict\";\nvar mergeMap_1 = require('./mergeMap');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nfunction concatMap(project, resultSelector) {\n    return mergeMap_1.mergeMap(project, resultSelector, 1);\n}\nexports.concatMap = concatMap;\n","\"use strict\";\nvar concatMap_1 = require('./concatMap');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nfunction concatMapTo(innerObservable, resultSelector) {\n    return concatMap_1.concatMap(function () { return innerObservable; }, resultSelector);\n}\nexports.concatMapTo = concatMapTo;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nfunction count(predicate) {\n    return function (source) { return source.lift(new CountOperator(predicate, source)); };\n}\nexports.count = count;\nvar CountOperator = (function () {\n    function CountOperator(predicate, source) {\n        this.predicate = predicate;\n        this.source = source;\n    }\n    CountOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n    };\n    return CountOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar CountSubscriber = (function (_super) {\n    __extends(CountSubscriber, _super);\n    function CountSubscriber(destination, predicate, source) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.source = source;\n        this.count = 0;\n        this.index = 0;\n    }\n    CountSubscriber.prototype._next = function (value) {\n        if (this.predicate) {\n            this._tryPredicate(value);\n        }\n        else {\n            this.count++;\n        }\n    };\n    CountSubscriber.prototype._tryPredicate = function (value) {\n        var result;\n        try {\n            result = this.predicate(value, this.index++, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this.count++;\n        }\n    };\n    CountSubscriber.prototype._complete = function () {\n        this.destination.next(this.count);\n        this.destination.complete();\n    };\n    return CountSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nfunction debounce(durationSelector) {\n    return function (source) { return source.lift(new DebounceOperator(durationSelector)); };\n}\nexports.debounce = debounce;\nvar DebounceOperator = (function () {\n    function DebounceOperator(durationSelector) {\n        this.durationSelector = durationSelector;\n    }\n    DebounceOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n    };\n    return DebounceOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DebounceSubscriber = (function (_super) {\n    __extends(DebounceSubscriber, _super);\n    function DebounceSubscriber(destination, durationSelector) {\n        _super.call(this, destination);\n        this.durationSelector = durationSelector;\n        this.hasValue = false;\n        this.durationSubscription = null;\n    }\n    DebounceSubscriber.prototype._next = function (value) {\n        try {\n            var result = this.durationSelector.call(this, value);\n            if (result) {\n                this._tryNext(value, result);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    DebounceSubscriber.prototype._complete = function () {\n        this.emitValue();\n        this.destination.complete();\n    };\n    DebounceSubscriber.prototype._tryNext = function (value, duration) {\n        var subscription = this.durationSubscription;\n        this.value = value;\n        this.hasValue = true;\n        if (subscription) {\n            subscription.unsubscribe();\n            this.remove(subscription);\n        }\n        subscription = subscribeToResult_1.subscribeToResult(this, duration);\n        if (!subscription.closed) {\n            this.add(this.durationSubscription = subscription);\n        }\n    };\n    DebounceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.emitValue();\n    };\n    DebounceSubscriber.prototype.notifyComplete = function () {\n        this.emitValue();\n    };\n    DebounceSubscriber.prototype.emitValue = function () {\n        if (this.hasValue) {\n            var value = this.value;\n            var subscription = this.durationSubscription;\n            if (subscription) {\n                this.durationSubscription = null;\n                subscription.unsubscribe();\n                this.remove(subscription);\n            }\n            this.value = null;\n            this.hasValue = false;\n            _super.prototype._next.call(this, value);\n        }\n    };\n    return DebounceSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar async_1 = require('../scheduler/async');\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nfunction debounceTime(dueTime, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return function (source) { return source.lift(new DebounceTimeOperator(dueTime, scheduler)); };\n}\nexports.debounceTime = debounceTime;\nvar DebounceTimeOperator = (function () {\n    function DebounceTimeOperator(dueTime, scheduler) {\n        this.dueTime = dueTime;\n        this.scheduler = scheduler;\n    }\n    DebounceTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n    };\n    return DebounceTimeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DebounceTimeSubscriber = (function (_super) {\n    __extends(DebounceTimeSubscriber, _super);\n    function DebounceTimeSubscriber(destination, dueTime, scheduler) {\n        _super.call(this, destination);\n        this.dueTime = dueTime;\n        this.scheduler = scheduler;\n        this.debouncedSubscription = null;\n        this.lastValue = null;\n        this.hasValue = false;\n    }\n    DebounceTimeSubscriber.prototype._next = function (value) {\n        this.clearDebounce();\n        this.lastValue = value;\n        this.hasValue = true;\n        this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n    };\n    DebounceTimeSubscriber.prototype._complete = function () {\n        this.debouncedNext();\n        this.destination.complete();\n    };\n    DebounceTimeSubscriber.prototype.debouncedNext = function () {\n        this.clearDebounce();\n        if (this.hasValue) {\n            this.destination.next(this.lastValue);\n            this.lastValue = null;\n            this.hasValue = false;\n        }\n    };\n    DebounceTimeSubscriber.prototype.clearDebounce = function () {\n        var debouncedSubscription = this.debouncedSubscription;\n        if (debouncedSubscription !== null) {\n            this.remove(debouncedSubscription);\n            debouncedSubscription.unsubscribe();\n            this.debouncedSubscription = null;\n        }\n    };\n    return DebounceTimeSubscriber;\n}(Subscriber_1.Subscriber));\nfunction dispatchNext(subscriber) {\n    subscriber.debouncedNext();\n}\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/* tslint:enable:max-line-length */\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nfunction defaultIfEmpty(defaultValue) {\n    if (defaultValue === void 0) { defaultValue = null; }\n    return function (source) { return source.lift(new DefaultIfEmptyOperator(defaultValue)); };\n}\nexports.defaultIfEmpty = defaultIfEmpty;\nvar DefaultIfEmptyOperator = (function () {\n    function DefaultIfEmptyOperator(defaultValue) {\n        this.defaultValue = defaultValue;\n    }\n    DefaultIfEmptyOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n    };\n    return DefaultIfEmptyOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DefaultIfEmptySubscriber = (function (_super) {\n    __extends(DefaultIfEmptySubscriber, _super);\n    function DefaultIfEmptySubscriber(destination, defaultValue) {\n        _super.call(this, destination);\n        this.defaultValue = defaultValue;\n        this.isEmpty = true;\n    }\n    DefaultIfEmptySubscriber.prototype._next = function (value) {\n        this.isEmpty = false;\n        this.destination.next(value);\n    };\n    DefaultIfEmptySubscriber.prototype._complete = function () {\n        if (this.isEmpty) {\n            this.destination.next(this.defaultValue);\n        }\n        this.destination.complete();\n    };\n    return DefaultIfEmptySubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar async_1 = require('../scheduler/async');\nvar isDate_1 = require('../util/isDate');\nvar Subscriber_1 = require('../Subscriber');\nvar Notification_1 = require('../Notification');\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nfunction delay(delay, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    var absoluteDelay = isDate_1.isDate(delay);\n    var delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(delay);\n    return function (source) { return source.lift(new DelayOperator(delayFor, scheduler)); };\n}\nexports.delay = delay;\nvar DelayOperator = (function () {\n    function DelayOperator(delay, scheduler) {\n        this.delay = delay;\n        this.scheduler = scheduler;\n    }\n    DelayOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n    };\n    return DelayOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DelaySubscriber = (function (_super) {\n    __extends(DelaySubscriber, _super);\n    function DelaySubscriber(destination, delay, scheduler) {\n        _super.call(this, destination);\n        this.delay = delay;\n        this.scheduler = scheduler;\n        this.queue = [];\n        this.active = false;\n        this.errored = false;\n    }\n    DelaySubscriber.dispatch = function (state) {\n        var source = state.source;\n        var queue = source.queue;\n        var scheduler = state.scheduler;\n        var destination = state.destination;\n        while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n            queue.shift().notification.observe(destination);\n        }\n        if (queue.length > 0) {\n            var delay_1 = Math.max(0, queue[0].time - scheduler.now());\n            this.schedule(state, delay_1);\n        }\n        else {\n            this.unsubscribe();\n            source.active = false;\n        }\n    };\n    DelaySubscriber.prototype._schedule = function (scheduler) {\n        this.active = true;\n        this.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {\n            source: this, destination: this.destination, scheduler: scheduler\n        }));\n    };\n    DelaySubscriber.prototype.scheduleNotification = function (notification) {\n        if (this.errored === true) {\n            return;\n        }\n        var scheduler = this.scheduler;\n        var message = new DelayMessage(scheduler.now() + this.delay, notification);\n        this.queue.push(message);\n        if (this.active === false) {\n            this._schedule(scheduler);\n        }\n    };\n    DelaySubscriber.prototype._next = function (value) {\n        this.scheduleNotification(Notification_1.Notification.createNext(value));\n    };\n    DelaySubscriber.prototype._error = function (err) {\n        this.errored = true;\n        this.queue = [];\n        this.destination.error(err);\n    };\n    DelaySubscriber.prototype._complete = function () {\n        this.scheduleNotification(Notification_1.Notification.createComplete());\n    };\n    return DelaySubscriber;\n}(Subscriber_1.Subscriber));\nvar DelayMessage = (function () {\n    function DelayMessage(time, notification) {\n        this.time = time;\n        this.notification = notification;\n    }\n    return DelayMessage;\n}());\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar Observable_1 = require('../Observable');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nfunction delayWhen(delayDurationSelector, subscriptionDelay) {\n    if (subscriptionDelay) {\n        return function (source) {\n            return new SubscriptionDelayObservable(source, subscriptionDelay)\n                .lift(new DelayWhenOperator(delayDurationSelector));\n        };\n    }\n    return function (source) { return source.lift(new DelayWhenOperator(delayDurationSelector)); };\n}\nexports.delayWhen = delayWhen;\nvar DelayWhenOperator = (function () {\n    function DelayWhenOperator(delayDurationSelector) {\n        this.delayDurationSelector = delayDurationSelector;\n    }\n    DelayWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n    };\n    return DelayWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DelayWhenSubscriber = (function (_super) {\n    __extends(DelayWhenSubscriber, _super);\n    function DelayWhenSubscriber(destination, delayDurationSelector) {\n        _super.call(this, destination);\n        this.delayDurationSelector = delayDurationSelector;\n        this.completed = false;\n        this.delayNotifierSubscriptions = [];\n        this.values = [];\n    }\n    DelayWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(outerValue);\n        this.removeSubscription(innerSub);\n        this.tryComplete();\n    };\n    DelayWhenSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    DelayWhenSubscriber.prototype.notifyComplete = function (innerSub) {\n        var value = this.removeSubscription(innerSub);\n        if (value) {\n            this.destination.next(value);\n        }\n        this.tryComplete();\n    };\n    DelayWhenSubscriber.prototype._next = function (value) {\n        try {\n            var delayNotifier = this.delayDurationSelector(value);\n            if (delayNotifier) {\n                this.tryDelay(delayNotifier, value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    DelayWhenSubscriber.prototype._complete = function () {\n        this.completed = true;\n        this.tryComplete();\n    };\n    DelayWhenSubscriber.prototype.removeSubscription = function (subscription) {\n        subscription.unsubscribe();\n        var subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n        var value = null;\n        if (subscriptionIdx !== -1) {\n            value = this.values[subscriptionIdx];\n            this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n            this.values.splice(subscriptionIdx, 1);\n        }\n        return value;\n    };\n    DelayWhenSubscriber.prototype.tryDelay = function (delayNotifier, value) {\n        var notifierSubscription = subscribeToResult_1.subscribeToResult(this, delayNotifier, value);\n        if (notifierSubscription && !notifierSubscription.closed) {\n            this.add(notifierSubscription);\n            this.delayNotifierSubscriptions.push(notifierSubscription);\n        }\n        this.values.push(value);\n    };\n    DelayWhenSubscriber.prototype.tryComplete = function () {\n        if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n            this.destination.complete();\n        }\n    };\n    return DelayWhenSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubscriptionDelayObservable = (function (_super) {\n    __extends(SubscriptionDelayObservable, _super);\n    function SubscriptionDelayObservable(/** @deprecated internal use only */ source, subscriptionDelay) {\n        _super.call(this);\n        this.source = source;\n        this.subscriptionDelay = subscriptionDelay;\n    }\n    /** @deprecated internal use only */ SubscriptionDelayObservable.prototype._subscribe = function (subscriber) {\n        this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n    };\n    return SubscriptionDelayObservable;\n}(Observable_1.Observable));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubscriptionDelaySubscriber = (function (_super) {\n    __extends(SubscriptionDelaySubscriber, _super);\n    function SubscriptionDelaySubscriber(parent, source) {\n        _super.call(this);\n        this.parent = parent;\n        this.source = source;\n        this.sourceSubscribed = false;\n    }\n    SubscriptionDelaySubscriber.prototype._next = function (unused) {\n        this.subscribeToSource();\n    };\n    SubscriptionDelaySubscriber.prototype._error = function (err) {\n        this.unsubscribe();\n        this.parent.error(err);\n    };\n    SubscriptionDelaySubscriber.prototype._complete = function () {\n        this.subscribeToSource();\n    };\n    SubscriptionDelaySubscriber.prototype.subscribeToSource = function () {\n        if (!this.sourceSubscribed) {\n            this.sourceSubscribed = true;\n            this.unsubscribe();\n            this.source.subscribe(this.parent);\n        }\n    };\n    return SubscriptionDelaySubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nfunction dematerialize() {\n    return function dematerializeOperatorFunction(source) {\n        return source.lift(new DeMaterializeOperator());\n    };\n}\nexports.dematerialize = dematerialize;\nvar DeMaterializeOperator = (function () {\n    function DeMaterializeOperator() {\n    }\n    DeMaterializeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DeMaterializeSubscriber(subscriber));\n    };\n    return DeMaterializeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DeMaterializeSubscriber = (function (_super) {\n    __extends(DeMaterializeSubscriber, _super);\n    function DeMaterializeSubscriber(destination) {\n        _super.call(this, destination);\n    }\n    DeMaterializeSubscriber.prototype._next = function (value) {\n        value.observe(this.destination);\n    };\n    return DeMaterializeSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar Set_1 = require('../util/Set');\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nfunction distinct(keySelector, flushes) {\n    return function (source) { return source.lift(new DistinctOperator(keySelector, flushes)); };\n}\nexports.distinct = distinct;\nvar DistinctOperator = (function () {\n    function DistinctOperator(keySelector, flushes) {\n        this.keySelector = keySelector;\n        this.flushes = flushes;\n    }\n    DistinctOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n    };\n    return DistinctOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DistinctSubscriber = (function (_super) {\n    __extends(DistinctSubscriber, _super);\n    function DistinctSubscriber(destination, keySelector, flushes) {\n        _super.call(this, destination);\n        this.keySelector = keySelector;\n        this.values = new Set_1.Set();\n        if (flushes) {\n            this.add(subscribeToResult_1.subscribeToResult(this, flushes));\n        }\n    }\n    DistinctSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values.clear();\n    };\n    DistinctSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    DistinctSubscriber.prototype._next = function (value) {\n        if (this.keySelector) {\n            this._useKeySelector(value);\n        }\n        else {\n            this._finalizeNext(value, value);\n        }\n    };\n    DistinctSubscriber.prototype._useKeySelector = function (value) {\n        var key;\n        var destination = this.destination;\n        try {\n            key = this.keySelector(value);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        this._finalizeNext(key, value);\n    };\n    DistinctSubscriber.prototype._finalizeNext = function (key, value) {\n        var values = this.values;\n        if (!values.has(key)) {\n            values.add(key);\n            this.destination.next(value);\n        }\n    };\n    return DistinctSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.DistinctSubscriber = DistinctSubscriber;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nfunction distinctUntilChanged(compare, keySelector) {\n    return function (source) { return source.lift(new DistinctUntilChangedOperator(compare, keySelector)); };\n}\nexports.distinctUntilChanged = distinctUntilChanged;\nvar DistinctUntilChangedOperator = (function () {\n    function DistinctUntilChangedOperator(compare, keySelector) {\n        this.compare = compare;\n        this.keySelector = keySelector;\n    }\n    DistinctUntilChangedOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n    };\n    return DistinctUntilChangedOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DistinctUntilChangedSubscriber = (function (_super) {\n    __extends(DistinctUntilChangedSubscriber, _super);\n    function DistinctUntilChangedSubscriber(destination, compare, keySelector) {\n        _super.call(this, destination);\n        this.keySelector = keySelector;\n        this.hasKey = false;\n        if (typeof compare === 'function') {\n            this.compare = compare;\n        }\n    }\n    DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {\n        return x === y;\n    };\n    DistinctUntilChangedSubscriber.prototype._next = function (value) {\n        var keySelector = this.keySelector;\n        var key = value;\n        if (keySelector) {\n            key = tryCatch_1.tryCatch(this.keySelector)(value);\n            if (key === errorObject_1.errorObject) {\n                return this.destination.error(errorObject_1.errorObject.e);\n            }\n        }\n        var result = false;\n        if (this.hasKey) {\n            result = tryCatch_1.tryCatch(this.compare)(this.key, key);\n            if (result === errorObject_1.errorObject) {\n                return this.destination.error(errorObject_1.errorObject.e);\n            }\n        }\n        else {\n            this.hasKey = true;\n        }\n        if (Boolean(result) === false) {\n            this.key = key;\n            this.destination.next(value);\n        }\n    };\n    return DistinctUntilChangedSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nvar distinctUntilChanged_1 = require('./distinctUntilChanged');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>An example comparing the name of persons</caption>\n *\n *  interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilKeyChanged('name')\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @example <caption>An example comparing the first letters of the name</caption>\n *\n * interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo1'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo2'},\n *     { age: 6, name: 'Foo3'})\n *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo1' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo2' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n *\n * @param {string} key String key for object property lookup on each item.\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nfunction distinctUntilKeyChanged(key, compare) {\n    return distinctUntilChanged_1.distinctUntilChanged(function (x, y) { return compare ? compare(x[key], y[key]) : x[key] === y[key]; });\n}\nexports.distinctUntilKeyChanged = distinctUntilKeyChanged;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar ArgumentOutOfRangeError_1 = require('../util/ArgumentOutOfRangeError');\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nfunction elementAt(index, defaultValue) {\n    return function (source) { return source.lift(new ElementAtOperator(index, defaultValue)); };\n}\nexports.elementAt = elementAt;\nvar ElementAtOperator = (function () {\n    function ElementAtOperator(index, defaultValue) {\n        this.index = index;\n        this.defaultValue = defaultValue;\n        if (index < 0) {\n            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;\n        }\n    }\n    ElementAtOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));\n    };\n    return ElementAtOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ElementAtSubscriber = (function (_super) {\n    __extends(ElementAtSubscriber, _super);\n    function ElementAtSubscriber(destination, index, defaultValue) {\n        _super.call(this, destination);\n        this.index = index;\n        this.defaultValue = defaultValue;\n    }\n    ElementAtSubscriber.prototype._next = function (x) {\n        if (this.index-- === 0) {\n            this.destination.next(x);\n            this.destination.complete();\n        }\n    };\n    ElementAtSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        if (this.index >= 0) {\n            if (typeof this.defaultValue !== 'undefined') {\n                destination.next(this.defaultValue);\n            }\n            else {\n                destination.error(new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError);\n            }\n        }\n        destination.complete();\n    };\n    return ElementAtSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nfunction every(predicate, thisArg) {\n    return function (source) { return source.lift(new EveryOperator(predicate, thisArg, source)); };\n}\nexports.every = every;\nvar EveryOperator = (function () {\n    function EveryOperator(predicate, thisArg, source) {\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.source = source;\n    }\n    EveryOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n    };\n    return EveryOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar EverySubscriber = (function (_super) {\n    __extends(EverySubscriber, _super);\n    function EverySubscriber(destination, predicate, thisArg, source) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.source = source;\n        this.index = 0;\n        this.thisArg = thisArg || this;\n    }\n    EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {\n        this.destination.next(everyValueMatch);\n        this.destination.complete();\n    };\n    EverySubscriber.prototype._next = function (value) {\n        var result = false;\n        try {\n            result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (!result) {\n            this.notifyComplete(false);\n        }\n    };\n    EverySubscriber.prototype._complete = function () {\n        this.notifyComplete(true);\n    };\n    return EverySubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nfunction exhaust() {\n    return function (source) { return source.lift(new SwitchFirstOperator()); };\n}\nexports.exhaust = exhaust;\nvar SwitchFirstOperator = (function () {\n    function SwitchFirstOperator() {\n    }\n    SwitchFirstOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SwitchFirstSubscriber(subscriber));\n    };\n    return SwitchFirstOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchFirstSubscriber = (function (_super) {\n    __extends(SwitchFirstSubscriber, _super);\n    function SwitchFirstSubscriber(destination) {\n        _super.call(this, destination);\n        this.hasCompleted = false;\n        this.hasSubscription = false;\n    }\n    SwitchFirstSubscriber.prototype._next = function (value) {\n        if (!this.hasSubscription) {\n            this.hasSubscription = true;\n            this.add(subscribeToResult_1.subscribeToResult(this, value));\n        }\n    };\n    SwitchFirstSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (!this.hasSubscription) {\n            this.destination.complete();\n        }\n    };\n    SwitchFirstSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.hasSubscription = false;\n        if (this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return SwitchFirstSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nfunction exhaustMap(project, resultSelector) {\n    return function (source) { return source.lift(new SwitchFirstMapOperator(project, resultSelector)); };\n}\nexports.exhaustMap = exhaustMap;\nvar SwitchFirstMapOperator = (function () {\n    function SwitchFirstMapOperator(project, resultSelector) {\n        this.project = project;\n        this.resultSelector = resultSelector;\n    }\n    SwitchFirstMapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));\n    };\n    return SwitchFirstMapOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchFirstMapSubscriber = (function (_super) {\n    __extends(SwitchFirstMapSubscriber, _super);\n    function SwitchFirstMapSubscriber(destination, project, resultSelector) {\n        _super.call(this, destination);\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.hasSubscription = false;\n        this.hasCompleted = false;\n        this.index = 0;\n    }\n    SwitchFirstMapSubscriber.prototype._next = function (value) {\n        if (!this.hasSubscription) {\n            this.tryNext(value);\n        }\n    };\n    SwitchFirstMapSubscriber.prototype.tryNext = function (value) {\n        var index = this.index++;\n        var destination = this.destination;\n        try {\n            var result = this.project(value, index);\n            this.hasSubscription = true;\n            this.add(subscribeToResult_1.subscribeToResult(this, result, value, index));\n        }\n        catch (err) {\n            destination.error(err);\n        }\n    };\n    SwitchFirstMapSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (!this.hasSubscription) {\n            this.destination.complete();\n        }\n    };\n    SwitchFirstMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        if (resultSelector) {\n            this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            destination.next(innerValue);\n        }\n    };\n    SwitchFirstMapSubscriber.prototype.trySelectResult = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        try {\n            var result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n            destination.next(result);\n        }\n        catch (err) {\n            destination.error(err);\n        }\n    };\n    SwitchFirstMapSubscriber.prototype.notifyError = function (err) {\n        this.destination.error(err);\n    };\n    SwitchFirstMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.hasSubscription = false;\n        if (this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return SwitchFirstMapSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nfunction expand(project, concurrent, scheduler) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    if (scheduler === void 0) { scheduler = undefined; }\n    concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n    return function (source) { return source.lift(new ExpandOperator(project, concurrent, scheduler)); };\n}\nexports.expand = expand;\nvar ExpandOperator = (function () {\n    function ExpandOperator(project, concurrent, scheduler) {\n        this.project = project;\n        this.concurrent = concurrent;\n        this.scheduler = scheduler;\n    }\n    ExpandOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n    };\n    return ExpandOperator;\n}());\nexports.ExpandOperator = ExpandOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ExpandSubscriber = (function (_super) {\n    __extends(ExpandSubscriber, _super);\n    function ExpandSubscriber(destination, project, concurrent, scheduler) {\n        _super.call(this, destination);\n        this.project = project;\n        this.concurrent = concurrent;\n        this.scheduler = scheduler;\n        this.index = 0;\n        this.active = 0;\n        this.hasCompleted = false;\n        if (concurrent < Number.POSITIVE_INFINITY) {\n            this.buffer = [];\n        }\n    }\n    ExpandSubscriber.dispatch = function (arg) {\n        var subscriber = arg.subscriber, result = arg.result, value = arg.value, index = arg.index;\n        subscriber.subscribeToProjection(result, value, index);\n    };\n    ExpandSubscriber.prototype._next = function (value) {\n        var destination = this.destination;\n        if (destination.closed) {\n            this._complete();\n            return;\n        }\n        var index = this.index++;\n        if (this.active < this.concurrent) {\n            destination.next(value);\n            var result = tryCatch_1.tryCatch(this.project)(value, index);\n            if (result === errorObject_1.errorObject) {\n                destination.error(errorObject_1.errorObject.e);\n            }\n            else if (!this.scheduler) {\n                this.subscribeToProjection(result, value, index);\n            }\n            else {\n                var state = { subscriber: this, result: result, value: value, index: index };\n                this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n            }\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    ExpandSubscriber.prototype.subscribeToProjection = function (result, value, index) {\n        this.active++;\n        this.add(subscribeToResult_1.subscribeToResult(this, result, value, index));\n    };\n    ExpandSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.hasCompleted && this.active === 0) {\n            this.destination.complete();\n        }\n    };\n    ExpandSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this._next(innerValue);\n    };\n    ExpandSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer && buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        if (this.hasCompleted && this.active === 0) {\n            this.destination.complete();\n        }\n    };\n    return ExpandSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.ExpandSubscriber = ExpandSubscriber;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/* tslint:enable:max-line-length */\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nfunction filter(predicate, thisArg) {\n    return function filterOperatorFunction(source) {\n        return source.lift(new FilterOperator(predicate, thisArg));\n    };\n}\nexports.filter = filter;\nvar FilterOperator = (function () {\n    function FilterOperator(predicate, thisArg) {\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n    }\n    FilterOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n    };\n    return FilterOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FilterSubscriber = (function (_super) {\n    __extends(FilterSubscriber, _super);\n    function FilterSubscriber(destination, predicate, thisArg) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.count = 0;\n    }\n    // the try catch block below is left specifically for\n    // optimization and perf reasons. a tryCatcher is not necessary here.\n    FilterSubscriber.prototype._next = function (value) {\n        var result;\n        try {\n            result = this.predicate.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this.destination.next(value);\n        }\n    };\n    return FilterSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar Subscription_1 = require('../Subscription');\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nfunction finalize(callback) {\n    return function (source) { return source.lift(new FinallyOperator(callback)); };\n}\nexports.finalize = finalize;\nvar FinallyOperator = (function () {\n    function FinallyOperator(callback) {\n        this.callback = callback;\n    }\n    FinallyOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n    };\n    return FinallyOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FinallySubscriber = (function (_super) {\n    __extends(FinallySubscriber, _super);\n    function FinallySubscriber(destination, callback) {\n        _super.call(this, destination);\n        this.add(new Subscription_1.Subscription(callback));\n    }\n    return FinallySubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nfunction find(predicate, thisArg) {\n    if (typeof predicate !== 'function') {\n        throw new TypeError('predicate is not a function');\n    }\n    return function (source) { return source.lift(new FindValueOperator(predicate, source, false, thisArg)); };\n}\nexports.find = find;\nvar FindValueOperator = (function () {\n    function FindValueOperator(predicate, source, yieldIndex, thisArg) {\n        this.predicate = predicate;\n        this.source = source;\n        this.yieldIndex = yieldIndex;\n        this.thisArg = thisArg;\n    }\n    FindValueOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n    };\n    return FindValueOperator;\n}());\nexports.FindValueOperator = FindValueOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FindValueSubscriber = (function (_super) {\n    __extends(FindValueSubscriber, _super);\n    function FindValueSubscriber(destination, predicate, source, yieldIndex, thisArg) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.source = source;\n        this.yieldIndex = yieldIndex;\n        this.thisArg = thisArg;\n        this.index = 0;\n    }\n    FindValueSubscriber.prototype.notifyComplete = function (value) {\n        var destination = this.destination;\n        destination.next(value);\n        destination.complete();\n    };\n    FindValueSubscriber.prototype._next = function (value) {\n        var _a = this, predicate = _a.predicate, thisArg = _a.thisArg;\n        var index = this.index++;\n        try {\n            var result = predicate.call(thisArg || this, value, index, this.source);\n            if (result) {\n                this.notifyComplete(this.yieldIndex ? index : value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    FindValueSubscriber.prototype._complete = function () {\n        this.notifyComplete(this.yieldIndex ? -1 : undefined);\n    };\n    return FindValueSubscriber;\n}(Subscriber_1.Subscriber));\nexports.FindValueSubscriber = FindValueSubscriber;\n","\"use strict\";\nvar find_1 = require('../operators/find');\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nfunction findIndex(predicate, thisArg) {\n    return function (source) { return source.lift(new find_1.FindValueOperator(predicate, source, true, thisArg)); };\n}\nexports.findIndex = findIndex;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar EmptyError_1 = require('../util/EmptyError');\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nfunction first(predicate, resultSelector, defaultValue) {\n    return function (source) { return source.lift(new FirstOperator(predicate, resultSelector, defaultValue, source)); };\n}\nexports.first = first;\nvar FirstOperator = (function () {\n    function FirstOperator(predicate, resultSelector, defaultValue, source) {\n        this.predicate = predicate;\n        this.resultSelector = resultSelector;\n        this.defaultValue = defaultValue;\n        this.source = source;\n    }\n    FirstOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n    };\n    return FirstOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FirstSubscriber = (function (_super) {\n    __extends(FirstSubscriber, _super);\n    function FirstSubscriber(destination, predicate, resultSelector, defaultValue, source) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.resultSelector = resultSelector;\n        this.defaultValue = defaultValue;\n        this.source = source;\n        this.index = 0;\n        this.hasCompleted = false;\n        this._emitted = false;\n    }\n    FirstSubscriber.prototype._next = function (value) {\n        var index = this.index++;\n        if (this.predicate) {\n            this._tryPredicate(value, index);\n        }\n        else {\n            this._emit(value, index);\n        }\n    };\n    FirstSubscriber.prototype._tryPredicate = function (value, index) {\n        var result;\n        try {\n            result = this.predicate(value, index, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this._emit(value, index);\n        }\n    };\n    FirstSubscriber.prototype._emit = function (value, index) {\n        if (this.resultSelector) {\n            this._tryResultSelector(value, index);\n            return;\n        }\n        this._emitFinal(value);\n    };\n    FirstSubscriber.prototype._tryResultSelector = function (value, index) {\n        var result;\n        try {\n            result = this.resultSelector(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this._emitFinal(result);\n    };\n    FirstSubscriber.prototype._emitFinal = function (value) {\n        var destination = this.destination;\n        if (!this._emitted) {\n            this._emitted = true;\n            destination.next(value);\n            destination.complete();\n            this.hasCompleted = true;\n        }\n    };\n    FirstSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\n            destination.next(this.defaultValue);\n            destination.complete();\n        }\n        else if (!this.hasCompleted) {\n            destination.error(new EmptyError_1.EmptyError);\n        }\n    };\n    return FirstSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar Subscription_1 = require('../Subscription');\nvar Observable_1 = require('../Observable');\nvar Subject_1 = require('../Subject');\nvar Map_1 = require('../util/Map');\nvar FastMap_1 = require('../util/FastMap');\n/* tslint:enable:max-line-length */\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nfunction groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {\n    return function (source) {\n        return source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n    };\n}\nexports.groupBy = groupBy;\nvar GroupByOperator = (function () {\n    function GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector) {\n        this.keySelector = keySelector;\n        this.elementSelector = elementSelector;\n        this.durationSelector = durationSelector;\n        this.subjectSelector = subjectSelector;\n    }\n    GroupByOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));\n    };\n    return GroupByOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar GroupBySubscriber = (function (_super) {\n    __extends(GroupBySubscriber, _super);\n    function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {\n        _super.call(this, destination);\n        this.keySelector = keySelector;\n        this.elementSelector = elementSelector;\n        this.durationSelector = durationSelector;\n        this.subjectSelector = subjectSelector;\n        this.groups = null;\n        this.attemptedToUnsubscribe = false;\n        this.count = 0;\n    }\n    GroupBySubscriber.prototype._next = function (value) {\n        var key;\n        try {\n            key = this.keySelector(value);\n        }\n        catch (err) {\n            this.error(err);\n            return;\n        }\n        this._group(value, key);\n    };\n    GroupBySubscriber.prototype._group = function (value, key) {\n        var groups = this.groups;\n        if (!groups) {\n            groups = this.groups = typeof key === 'string' ? new FastMap_1.FastMap() : new Map_1.Map();\n        }\n        var group = groups.get(key);\n        var element;\n        if (this.elementSelector) {\n            try {\n                element = this.elementSelector(value);\n            }\n            catch (err) {\n                this.error(err);\n            }\n        }\n        else {\n            element = value;\n        }\n        if (!group) {\n            group = this.subjectSelector ? this.subjectSelector() : new Subject_1.Subject();\n            groups.set(key, group);\n            var groupedObservable = new GroupedObservable(key, group, this);\n            this.destination.next(groupedObservable);\n            if (this.durationSelector) {\n                var duration = void 0;\n                try {\n                    duration = this.durationSelector(new GroupedObservable(key, group));\n                }\n                catch (err) {\n                    this.error(err);\n                    return;\n                }\n                this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n            }\n        }\n        if (!group.closed) {\n            group.next(element);\n        }\n    };\n    GroupBySubscriber.prototype._error = function (err) {\n        var groups = this.groups;\n        if (groups) {\n            groups.forEach(function (group, key) {\n                group.error(err);\n            });\n            groups.clear();\n        }\n        this.destination.error(err);\n    };\n    GroupBySubscriber.prototype._complete = function () {\n        var groups = this.groups;\n        if (groups) {\n            groups.forEach(function (group, key) {\n                group.complete();\n            });\n            groups.clear();\n        }\n        this.destination.complete();\n    };\n    GroupBySubscriber.prototype.removeGroup = function (key) {\n        this.groups.delete(key);\n    };\n    GroupBySubscriber.prototype.unsubscribe = function () {\n        if (!this.closed) {\n            this.attemptedToUnsubscribe = true;\n            if (this.count === 0) {\n                _super.prototype.unsubscribe.call(this);\n            }\n        }\n    };\n    return GroupBySubscriber;\n}(Subscriber_1.Subscriber));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar GroupDurationSubscriber = (function (_super) {\n    __extends(GroupDurationSubscriber, _super);\n    function GroupDurationSubscriber(key, group, parent) {\n        _super.call(this, group);\n        this.key = key;\n        this.group = group;\n        this.parent = parent;\n    }\n    GroupDurationSubscriber.prototype._next = function (value) {\n        this.complete();\n    };\n    /** @deprecated internal use only */ GroupDurationSubscriber.prototype._unsubscribe = function () {\n        var _a = this, parent = _a.parent, key = _a.key;\n        this.key = this.parent = null;\n        if (parent) {\n            parent.removeGroup(key);\n        }\n    };\n    return GroupDurationSubscriber;\n}(Subscriber_1.Subscriber));\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nvar GroupedObservable = (function (_super) {\n    __extends(GroupedObservable, _super);\n    function GroupedObservable(key, groupSubject, refCountSubscription) {\n        _super.call(this);\n        this.key = key;\n        this.groupSubject = groupSubject;\n        this.refCountSubscription = refCountSubscription;\n    }\n    /** @deprecated internal use only */ GroupedObservable.prototype._subscribe = function (subscriber) {\n        var subscription = new Subscription_1.Subscription();\n        var _a = this, refCountSubscription = _a.refCountSubscription, groupSubject = _a.groupSubject;\n        if (refCountSubscription && !refCountSubscription.closed) {\n            subscription.add(new InnerRefCountSubscription(refCountSubscription));\n        }\n        subscription.add(groupSubject.subscribe(subscriber));\n        return subscription;\n    };\n    return GroupedObservable;\n}(Observable_1.Observable));\nexports.GroupedObservable = GroupedObservable;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar InnerRefCountSubscription = (function (_super) {\n    __extends(InnerRefCountSubscription, _super);\n    function InnerRefCountSubscription(parent) {\n        _super.call(this);\n        this.parent = parent;\n        parent.count++;\n    }\n    InnerRefCountSubscription.prototype.unsubscribe = function () {\n        var parent = this.parent;\n        if (!parent.closed && !this.closed) {\n            _super.prototype.unsubscribe.call(this);\n            parent.count -= 1;\n            if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n                parent.unsubscribe();\n            }\n        }\n    };\n    return InnerRefCountSubscription;\n}(Subscription_1.Subscription));\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar noop_1 = require('../util/noop');\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nfunction ignoreElements() {\n    return function ignoreElementsOperatorFunction(source) {\n        return source.lift(new IgnoreElementsOperator());\n    };\n}\nexports.ignoreElements = ignoreElements;\nvar IgnoreElementsOperator = (function () {\n    function IgnoreElementsOperator() {\n    }\n    IgnoreElementsOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new IgnoreElementsSubscriber(subscriber));\n    };\n    return IgnoreElementsOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar IgnoreElementsSubscriber = (function (_super) {\n    __extends(IgnoreElementsSubscriber, _super);\n    function IgnoreElementsSubscriber() {\n        _super.apply(this, arguments);\n    }\n    IgnoreElementsSubscriber.prototype._next = function (unused) {\n        noop_1.noop();\n    };\n    return IgnoreElementsSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nfunction isEmpty() {\n    return function (source) { return source.lift(new IsEmptyOperator()); };\n}\nexports.isEmpty = isEmpty;\nvar IsEmptyOperator = (function () {\n    function IsEmptyOperator() {\n    }\n    IsEmptyOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new IsEmptySubscriber(observer));\n    };\n    return IsEmptyOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar IsEmptySubscriber = (function (_super) {\n    __extends(IsEmptySubscriber, _super);\n    function IsEmptySubscriber(destination) {\n        _super.call(this, destination);\n    }\n    IsEmptySubscriber.prototype.notifyComplete = function (isEmpty) {\n        var destination = this.destination;\n        destination.next(isEmpty);\n        destination.complete();\n    };\n    IsEmptySubscriber.prototype._next = function (value) {\n        this.notifyComplete(false);\n    };\n    IsEmptySubscriber.prototype._complete = function () {\n        this.notifyComplete(true);\n    };\n    return IsEmptySubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar EmptyError_1 = require('../util/EmptyError');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nfunction last(predicate, resultSelector, defaultValue) {\n    return function (source) { return source.lift(new LastOperator(predicate, resultSelector, defaultValue, source)); };\n}\nexports.last = last;\nvar LastOperator = (function () {\n    function LastOperator(predicate, resultSelector, defaultValue, source) {\n        this.predicate = predicate;\n        this.resultSelector = resultSelector;\n        this.defaultValue = defaultValue;\n        this.source = source;\n    }\n    LastOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n    };\n    return LastOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar LastSubscriber = (function (_super) {\n    __extends(LastSubscriber, _super);\n    function LastSubscriber(destination, predicate, resultSelector, defaultValue, source) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.resultSelector = resultSelector;\n        this.defaultValue = defaultValue;\n        this.source = source;\n        this.hasValue = false;\n        this.index = 0;\n        if (typeof defaultValue !== 'undefined') {\n            this.lastValue = defaultValue;\n            this.hasValue = true;\n        }\n    }\n    LastSubscriber.prototype._next = function (value) {\n        var index = this.index++;\n        if (this.predicate) {\n            this._tryPredicate(value, index);\n        }\n        else {\n            if (this.resultSelector) {\n                this._tryResultSelector(value, index);\n                return;\n            }\n            this.lastValue = value;\n            this.hasValue = true;\n        }\n    };\n    LastSubscriber.prototype._tryPredicate = function (value, index) {\n        var result;\n        try {\n            result = this.predicate(value, index, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            if (this.resultSelector) {\n                this._tryResultSelector(value, index);\n                return;\n            }\n            this.lastValue = value;\n            this.hasValue = true;\n        }\n    };\n    LastSubscriber.prototype._tryResultSelector = function (value, index) {\n        var result;\n        try {\n            result = this.resultSelector(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.lastValue = result;\n        this.hasValue = true;\n    };\n    LastSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        if (this.hasValue) {\n            destination.next(this.lastValue);\n            destination.complete();\n        }\n        else {\n            destination.error(new EmptyError_1.EmptyError);\n        }\n    };\n    return LastSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nfunction map(project, thisArg) {\n    return function mapOperation(source) {\n        if (typeof project !== 'function') {\n            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n        }\n        return source.lift(new MapOperator(project, thisArg));\n    };\n}\nexports.map = map;\nvar MapOperator = (function () {\n    function MapOperator(project, thisArg) {\n        this.project = project;\n        this.thisArg = thisArg;\n    }\n    MapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n    };\n    return MapOperator;\n}());\nexports.MapOperator = MapOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MapSubscriber = (function (_super) {\n    __extends(MapSubscriber, _super);\n    function MapSubscriber(destination, project, thisArg) {\n        _super.call(this, destination);\n        this.project = project;\n        this.count = 0;\n        this.thisArg = thisArg || this;\n    }\n    // NOTE: This looks unoptimized, but it's actually purposefully NOT\n    // using try/catch optimizations.\n    MapSubscriber.prototype._next = function (value) {\n        var result;\n        try {\n            result = this.project.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return MapSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nfunction mapTo(value) {\n    return function (source) { return source.lift(new MapToOperator(value)); };\n}\nexports.mapTo = mapTo;\nvar MapToOperator = (function () {\n    function MapToOperator(value) {\n        this.value = value;\n    }\n    MapToOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MapToSubscriber(subscriber, this.value));\n    };\n    return MapToOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MapToSubscriber = (function (_super) {\n    __extends(MapToSubscriber, _super);\n    function MapToSubscriber(destination, value) {\n        _super.call(this, destination);\n        this.value = value;\n    }\n    MapToSubscriber.prototype._next = function (x) {\n        this.destination.next(this.value);\n    };\n    return MapToSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar Notification_1 = require('../Notification');\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nfunction materialize() {\n    return function materializeOperatorFunction(source) {\n        return source.lift(new MaterializeOperator());\n    };\n}\nexports.materialize = materialize;\nvar MaterializeOperator = (function () {\n    function MaterializeOperator() {\n    }\n    MaterializeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MaterializeSubscriber(subscriber));\n    };\n    return MaterializeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MaterializeSubscriber = (function (_super) {\n    __extends(MaterializeSubscriber, _super);\n    function MaterializeSubscriber(destination) {\n        _super.call(this, destination);\n    }\n    MaterializeSubscriber.prototype._next = function (value) {\n        this.destination.next(Notification_1.Notification.createNext(value));\n    };\n    MaterializeSubscriber.prototype._error = function (err) {\n        var destination = this.destination;\n        destination.next(Notification_1.Notification.createError(err));\n        destination.complete();\n    };\n    MaterializeSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        destination.next(Notification_1.Notification.createComplete());\n        destination.complete();\n    };\n    return MaterializeSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nvar reduce_1 = require('./reduce');\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the largest value.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @example <caption>Get the maximal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .max()\n *   .subscribe(x => console.log(x)); // -> 8\n *\n * @example <caption>Use a comparer function to get the maximal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\n * }\n *\n * @see {@link min}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable} An Observable that emits item with the largest value.\n * @method max\n * @owner Observable\n */\nfunction max(comparer) {\n    var max = (typeof comparer === 'function')\n        ? function (x, y) { return comparer(x, y) > 0 ? x : y; }\n        : function (x, y) { return x > y ? x : y; };\n    return reduce_1.reduce(max);\n}\nexports.max = max;\n","\"use strict\";\nvar merge_1 = require('../observable/merge');\nvar merge_2 = require('../observable/merge');\nexports.mergeStatic = merge_2.merge;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {ObservableInput} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} An Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nfunction merge() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return function (source) { return source.lift.call(merge_1.merge.apply(void 0, [source].concat(observables))); };\n}\nexports.merge = merge;\n","\"use strict\";\nvar mergeMap_1 = require('./mergeMap');\nvar identity_1 = require('../util/identity');\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nfunction mergeAll(concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return mergeMap_1.mergeMap(identity_1.identity, null, concurrent);\n}\nexports.mergeAll = mergeAll;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nfunction mergeMap(project, resultSelector, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return function mergeMapOperatorFunction(source) {\n        if (typeof resultSelector === 'number') {\n            concurrent = resultSelector;\n            resultSelector = null;\n        }\n        return source.lift(new MergeMapOperator(project, resultSelector, concurrent));\n    };\n}\nexports.mergeMap = mergeMap;\nvar MergeMapOperator = (function () {\n    function MergeMapOperator(project, resultSelector, concurrent) {\n        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n    }\n    MergeMapOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.resultSelector, this.concurrent));\n    };\n    return MergeMapOperator;\n}());\nexports.MergeMapOperator = MergeMapOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MergeMapSubscriber = (function (_super) {\n    __extends(MergeMapSubscriber, _super);\n    function MergeMapSubscriber(destination, project, resultSelector, concurrent) {\n        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n        _super.call(this, destination);\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n    MergeMapSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            this._tryNext(value);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeMapSubscriber.prototype._tryNext = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.active++;\n        this._innerSub(result, value, index);\n    };\n    MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {\n        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));\n    };\n    MergeMapSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            this.destination.complete();\n        }\n    };\n    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (this.resultSelector) {\n            this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            this.destination.next(innerValue);\n        }\n    };\n    MergeMapSubscriber.prototype._notifyResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var result;\n        try {\n            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return MergeMapSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.MergeMapSubscriber = MergeMapSubscriber;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nfunction mergeMapTo(innerObservable, resultSelector, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    if (typeof resultSelector === 'number') {\n        concurrent = resultSelector;\n        resultSelector = null;\n    }\n    return function (source) { return source.lift(new MergeMapToOperator(innerObservable, resultSelector, concurrent)); };\n}\nexports.mergeMapTo = mergeMapTo;\n// TODO: Figure out correct signature here: an Operator<Observable<T>, R>\n//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\nvar MergeMapToOperator = (function () {\n    function MergeMapToOperator(ish, resultSelector, concurrent) {\n        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n        this.ish = ish;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n    }\n    MergeMapToOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\n    };\n    return MergeMapToOperator;\n}());\nexports.MergeMapToOperator = MergeMapToOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MergeMapToSubscriber = (function (_super) {\n    __extends(MergeMapToSubscriber, _super);\n    function MergeMapToSubscriber(destination, ish, resultSelector, concurrent) {\n        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n        _super.call(this, destination);\n        this.ish = ish;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n    MergeMapToSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            var resultSelector = this.resultSelector;\n            var index = this.index++;\n            var ish = this.ish;\n            var destination = this.destination;\n            this.active++;\n            this._innerSub(ish, destination, resultSelector, value, index);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeMapToSubscriber.prototype._innerSub = function (ish, destination, resultSelector, value, index) {\n        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));\n    };\n    MergeMapToSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            this.destination.complete();\n        }\n    };\n    MergeMapToSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        if (resultSelector) {\n            this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            destination.next(innerValue);\n        }\n    };\n    MergeMapToSubscriber.prototype.trySelectResult = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        var result;\n        try {\n            result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        destination.next(result);\n    };\n    MergeMapToSubscriber.prototype.notifyError = function (err) {\n        this.destination.error(err);\n    };\n    MergeMapToSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return MergeMapToSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.MergeMapToSubscriber = MergeMapToSubscriber;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nfunction mergeScan(accumulator, seed, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return function (source) { return source.lift(new MergeScanOperator(accumulator, seed, concurrent)); };\n}\nexports.mergeScan = mergeScan;\nvar MergeScanOperator = (function () {\n    function MergeScanOperator(accumulator, seed, concurrent) {\n        this.accumulator = accumulator;\n        this.seed = seed;\n        this.concurrent = concurrent;\n    }\n    MergeScanOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));\n    };\n    return MergeScanOperator;\n}());\nexports.MergeScanOperator = MergeScanOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MergeScanSubscriber = (function (_super) {\n    __extends(MergeScanSubscriber, _super);\n    function MergeScanSubscriber(destination, accumulator, acc, concurrent) {\n        _super.call(this, destination);\n        this.accumulator = accumulator;\n        this.acc = acc;\n        this.concurrent = concurrent;\n        this.hasValue = false;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n    MergeScanSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            var index = this.index++;\n            var ish = tryCatch_1.tryCatch(this.accumulator)(this.acc, value);\n            var destination = this.destination;\n            if (ish === errorObject_1.errorObject) {\n                destination.error(errorObject_1.errorObject.e);\n            }\n            else {\n                this.active++;\n                this._innerSub(ish, value, index);\n            }\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeScanSubscriber.prototype._innerSub = function (ish, value, index) {\n        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));\n    };\n    MergeScanSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            if (this.hasValue === false) {\n                this.destination.next(this.acc);\n            }\n            this.destination.complete();\n        }\n    };\n    MergeScanSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var destination = this.destination;\n        this.acc = innerValue;\n        this.hasValue = true;\n        destination.next(innerValue);\n    };\n    MergeScanSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            if (this.hasValue === false) {\n                this.destination.next(this.acc);\n            }\n            this.destination.complete();\n        }\n    };\n    return MergeScanSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.MergeScanSubscriber = MergeScanSubscriber;\n","\"use strict\";\nvar reduce_1 = require('./reduce');\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @example <caption>Get the minimal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .min()\n *   .subscribe(x => console.log(x)); // -> 2\n *\n * @example <caption>Use a comparer function to get the minimal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n * }\n *\n * @see {@link max}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable<R>} An Observable that emits item with the smallest value.\n * @method min\n * @owner Observable\n */\nfunction min(comparer) {\n    var min = (typeof comparer === 'function')\n        ? function (x, y) { return comparer(x, y) < 0 ? x : y; }\n        : function (x, y) { return x < y ? x : y; };\n    return reduce_1.reduce(min);\n}\nexports.min = min;\n","\"use strict\";\nvar ConnectableObservable_1 = require('../observable/ConnectableObservable');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} An Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nfunction multicast(subjectOrSubjectFactory, selector) {\n    return function multicastOperatorFunction(source) {\n        var subjectFactory;\n        if (typeof subjectOrSubjectFactory === 'function') {\n            subjectFactory = subjectOrSubjectFactory;\n        }\n        else {\n            subjectFactory = function subjectFactory() {\n                return subjectOrSubjectFactory;\n            };\n        }\n        if (typeof selector === 'function') {\n            return source.lift(new MulticastOperator(subjectFactory, selector));\n        }\n        var connectable = Object.create(source, ConnectableObservable_1.connectableObservableDescriptor);\n        connectable.source = source;\n        connectable.subjectFactory = subjectFactory;\n        return connectable;\n    };\n}\nexports.multicast = multicast;\nvar MulticastOperator = (function () {\n    function MulticastOperator(subjectFactory, selector) {\n        this.subjectFactory = subjectFactory;\n        this.selector = selector;\n    }\n    MulticastOperator.prototype.call = function (subscriber, source) {\n        var selector = this.selector;\n        var subject = this.subjectFactory();\n        var subscription = selector(subject).subscribe(subscriber);\n        subscription.add(source.subscribe(subject));\n        return subscription;\n    };\n    return MulticastOperator;\n}());\nexports.MulticastOperator = MulticastOperator;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar Notification_1 = require('../Notification');\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nfunction observeOn(scheduler, delay) {\n    if (delay === void 0) { delay = 0; }\n    return function observeOnOperatorFunction(source) {\n        return source.lift(new ObserveOnOperator(scheduler, delay));\n    };\n}\nexports.observeOn = observeOn;\nvar ObserveOnOperator = (function () {\n    function ObserveOnOperator(scheduler, delay) {\n        if (delay === void 0) { delay = 0; }\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    ObserveOnOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n    };\n    return ObserveOnOperator;\n}());\nexports.ObserveOnOperator = ObserveOnOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ObserveOnSubscriber = (function (_super) {\n    __extends(ObserveOnSubscriber, _super);\n    function ObserveOnSubscriber(destination, scheduler, delay) {\n        if (delay === void 0) { delay = 0; }\n        _super.call(this, destination);\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    ObserveOnSubscriber.dispatch = function (arg) {\n        var notification = arg.notification, destination = arg.destination;\n        notification.observe(destination);\n        this.unsubscribe();\n    };\n    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {\n        this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));\n    };\n    ObserveOnSubscriber.prototype._next = function (value) {\n        this.scheduleMessage(Notification_1.Notification.createNext(value));\n    };\n    ObserveOnSubscriber.prototype._error = function (err) {\n        this.scheduleMessage(Notification_1.Notification.createError(err));\n    };\n    ObserveOnSubscriber.prototype._complete = function () {\n        this.scheduleMessage(Notification_1.Notification.createComplete());\n    };\n    return ObserveOnSubscriber;\n}(Subscriber_1.Subscriber));\nexports.ObserveOnSubscriber = ObserveOnSubscriber;\nvar ObserveOnMessage = (function () {\n    function ObserveOnMessage(notification, destination) {\n        this.notification = notification;\n        this.destination = destination;\n    }\n    return ObserveOnMessage;\n}());\nexports.ObserveOnMessage = ObserveOnMessage;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar FromObservable_1 = require('../observable/FromObservable');\nvar isArray_1 = require('../util/isArray');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\nfunction onErrorResumeNext() {\n    var nextSources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        nextSources[_i - 0] = arguments[_i];\n    }\n    if (nextSources.length === 1 && isArray_1.isArray(nextSources[0])) {\n        nextSources = nextSources[0];\n    }\n    return function (source) { return source.lift(new OnErrorResumeNextOperator(nextSources)); };\n}\nexports.onErrorResumeNext = onErrorResumeNext;\n/* tslint:enable:max-line-length */\nfunction onErrorResumeNextStatic() {\n    var nextSources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        nextSources[_i - 0] = arguments[_i];\n    }\n    var source = null;\n    if (nextSources.length === 1 && isArray_1.isArray(nextSources[0])) {\n        nextSources = nextSources[0];\n    }\n    source = nextSources.shift();\n    return new FromObservable_1.FromObservable(source, null).lift(new OnErrorResumeNextOperator(nextSources));\n}\nexports.onErrorResumeNextStatic = onErrorResumeNextStatic;\nvar OnErrorResumeNextOperator = (function () {\n    function OnErrorResumeNextOperator(nextSources) {\n        this.nextSources = nextSources;\n    }\n    OnErrorResumeNextOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n    };\n    return OnErrorResumeNextOperator;\n}());\nvar OnErrorResumeNextSubscriber = (function (_super) {\n    __extends(OnErrorResumeNextSubscriber, _super);\n    function OnErrorResumeNextSubscriber(destination, nextSources) {\n        _super.call(this, destination);\n        this.destination = destination;\n        this.nextSources = nextSources;\n    }\n    OnErrorResumeNextSubscriber.prototype.notifyError = function (error, innerSub) {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype._error = function (err) {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype._complete = function () {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype.subscribeToNextSource = function () {\n        var next = this.nextSources.shift();\n        if (next) {\n            this.add(subscribeToResult_1.subscribeToResult(this, next));\n        }\n        else {\n            this.destination.complete();\n        }\n    };\n    return OnErrorResumeNextSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nfunction pairwise() {\n    return function (source) { return source.lift(new PairwiseOperator()); };\n}\nexports.pairwise = pairwise;\nvar PairwiseOperator = (function () {\n    function PairwiseOperator() {\n    }\n    PairwiseOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new PairwiseSubscriber(subscriber));\n    };\n    return PairwiseOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar PairwiseSubscriber = (function (_super) {\n    __extends(PairwiseSubscriber, _super);\n    function PairwiseSubscriber(destination) {\n        _super.call(this, destination);\n        this.hasPrev = false;\n    }\n    PairwiseSubscriber.prototype._next = function (value) {\n        if (this.hasPrev) {\n            this.destination.next([this.prev, value]);\n        }\n        else {\n            this.hasPrev = true;\n        }\n        this.prev = value;\n    };\n    return PairwiseSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nvar not_1 = require('../util/not');\nvar filter_1 = require('./filter');\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nfunction partition(predicate, thisArg) {\n    return function (source) { return [\n        filter_1.filter(predicate, thisArg)(source),\n        filter_1.filter(not_1.not(predicate, thisArg))(source)\n    ]; };\n}\nexports.partition = partition;\n","\"use strict\";\nvar map_1 = require('./map');\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} A new Observable of property values from the source values.\n * @method pluck\n * @owner Observable\n */\nfunction pluck() {\n    var properties = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        properties[_i - 0] = arguments[_i];\n    }\n    var length = properties.length;\n    if (length === 0) {\n        throw new Error('list of properties cannot be empty.');\n    }\n    return function (source) { return map_1.map(plucker(properties, length))(source); };\n}\nexports.pluck = pluck;\nfunction plucker(props, length) {\n    var mapper = function (x) {\n        var currentProp = x;\n        for (var i = 0; i < length; i++) {\n            var p = currentProp[props[i]];\n            if (typeof p !== 'undefined') {\n                currentProp = p;\n            }\n            else {\n                return undefined;\n            }\n        }\n        return currentProp;\n    };\n    return mapper;\n}\n","\"use strict\";\nvar Subject_1 = require('../Subject');\nvar multicast_1 = require('./multicast');\n/* tslint:enable:max-line-length */\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nfunction publish(selector) {\n    return selector ?\n        multicast_1.multicast(function () { return new Subject_1.Subject(); }, selector) :\n        multicast_1.multicast(new Subject_1.Subject());\n}\nexports.publish = publish;\n","\"use strict\";\nvar BehaviorSubject_1 = require('../BehaviorSubject');\nvar multicast_1 = require('./multicast');\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nfunction publishBehavior(value) {\n    return function (source) { return multicast_1.multicast(new BehaviorSubject_1.BehaviorSubject(value))(source); };\n}\nexports.publishBehavior = publishBehavior;\n","\"use strict\";\nvar AsyncSubject_1 = require('../AsyncSubject');\nvar multicast_1 = require('./multicast');\nfunction publishLast() {\n    return function (source) { return multicast_1.multicast(new AsyncSubject_1.AsyncSubject())(source); };\n}\nexports.publishLast = publishLast;\n","\"use strict\";\nvar ReplaySubject_1 = require('../ReplaySubject');\nvar multicast_1 = require('./multicast');\n/* tslint:enable:max-line-length */\nfunction publishReplay(bufferSize, windowTime, selectorOrScheduler, scheduler) {\n    if (selectorOrScheduler && typeof selectorOrScheduler !== 'function') {\n        scheduler = selectorOrScheduler;\n    }\n    var selector = typeof selectorOrScheduler === 'function' ? selectorOrScheduler : undefined;\n    var subject = new ReplaySubject_1.ReplaySubject(bufferSize, windowTime, scheduler);\n    return function (source) { return multicast_1.multicast(function () { return subject; }, selector)(source); };\n}\nexports.publishReplay = publishReplay;\n","\"use strict\";\nvar isArray_1 = require('../util/isArray');\nvar race_1 = require('../observable/race');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables.\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nfunction race() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return function raceOperatorFunction(source) {\n        // if the only argument is an array, it was most likely called with\n        // `pair([obs1, obs2, ...])`\n        if (observables.length === 1 && isArray_1.isArray(observables[0])) {\n            observables = observables[0];\n        }\n        return source.lift.call(race_1.race.apply(void 0, [source].concat(observables)));\n    };\n}\nexports.race = race;\n","\"use strict\";\nvar scan_1 = require('./scan');\nvar takeLast_1 = require('./takeLast');\nvar defaultIfEmpty_1 = require('./defaultIfEmpty');\nvar pipe_1 = require('../util/pipe');\n/* tslint:enable:max-line-length */\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nfunction reduce(accumulator, seed) {\n    // providing a seed of `undefined` *should* be valid and trigger\n    // hasSeed! so don't use `seed !== undefined` checks!\n    // For this reason, we have to check it here at the original call site\n    // otherwise inside Operator/Subscriber we won't know if `undefined`\n    // means they didn't provide anything or if they literally provided `undefined`\n    if (arguments.length >= 2) {\n        return function reduceOperatorFunctionWithSeed(source) {\n            return pipe_1.pipe(scan_1.scan(accumulator, seed), takeLast_1.takeLast(1), defaultIfEmpty_1.defaultIfEmpty(seed))(source);\n        };\n    }\n    return function reduceOperatorFunction(source) {\n        return pipe_1.pipe(scan_1.scan(function (acc, value, index) {\n            return accumulator(acc, value, index + 1);\n        }), takeLast_1.takeLast(1))(source);\n    };\n}\nexports.reduce = reduce;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nfunction refCount() {\n    return function refCountOperatorFunction(source) {\n        return source.lift(new RefCountOperator(source));\n    };\n}\nexports.refCount = refCount;\nvar RefCountOperator = (function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}());\nvar RefCountSubscriber = (function (_super) {\n    __extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        _super.call(this, destination);\n        this.connectable = connectable;\n    }\n    /** @deprecated internal use only */ RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        ///\n        // Compare the local RefCountSubscriber's connection Subscription to the\n        // connection Subscription on the shared ConnectableObservable. In cases\n        // where the ConnectableObservable source synchronously emits values, and\n        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n        // execution continues to here before the RefCountOperator has a chance to\n        // supply the RefCountSubscriber with the shared connection Subscription.\n        // For example:\n        // ```\n        // Observable.range(0, 10)\n        //   .publish()\n        //   .refCount()\n        //   .take(5)\n        //   .subscribe();\n        // ```\n        // In order to account for this case, RefCountSubscriber should only dispose\n        // the ConnectableObservable's shared connection Subscription if the\n        // connection Subscription exists, *and* either:\n        //   a. RefCountSubscriber doesn't have a reference to the shared connection\n        //      Subscription yet, or,\n        //   b. RefCountSubscriber's connection Subscription reference is identical\n        //      to the shared connection Subscription\n        ///\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar EmptyObservable_1 = require('../observable/EmptyObservable');\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nfunction repeat(count) {\n    if (count === void 0) { count = -1; }\n    return function (source) {\n        if (count === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        else if (count < 0) {\n            return source.lift(new RepeatOperator(-1, source));\n        }\n        else {\n            return source.lift(new RepeatOperator(count - 1, source));\n        }\n    };\n}\nexports.repeat = repeat;\nvar RepeatOperator = (function () {\n    function RepeatOperator(count, source) {\n        this.count = count;\n        this.source = source;\n    }\n    RepeatOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n    };\n    return RepeatOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RepeatSubscriber = (function (_super) {\n    __extends(RepeatSubscriber, _super);\n    function RepeatSubscriber(destination, count, source) {\n        _super.call(this, destination);\n        this.count = count;\n        this.source = source;\n    }\n    RepeatSubscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            var _a = this, source = _a.source, count = _a.count;\n            if (count === 0) {\n                return _super.prototype.complete.call(this);\n            }\n            else if (count > -1) {\n                this.count = count - 1;\n            }\n            source.subscribe(this._unsubscribeAndRecycle());\n        }\n    };\n    return RepeatSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nfunction repeatWhen(notifier) {\n    return function (source) { return source.lift(new RepeatWhenOperator(notifier)); };\n}\nexports.repeatWhen = repeatWhen;\nvar RepeatWhenOperator = (function () {\n    function RepeatWhenOperator(notifier) {\n        this.notifier = notifier;\n    }\n    RepeatWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n    };\n    return RepeatWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RepeatWhenSubscriber = (function (_super) {\n    __extends(RepeatWhenSubscriber, _super);\n    function RepeatWhenSubscriber(destination, notifier, source) {\n        _super.call(this, destination);\n        this.notifier = notifier;\n        this.source = source;\n        this.sourceIsBeingSubscribedTo = true;\n    }\n    RepeatWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.sourceIsBeingSubscribedTo = true;\n        this.source.subscribe(this);\n    };\n    RepeatWhenSubscriber.prototype.notifyComplete = function (innerSub) {\n        if (this.sourceIsBeingSubscribedTo === false) {\n            return _super.prototype.complete.call(this);\n        }\n    };\n    RepeatWhenSubscriber.prototype.complete = function () {\n        this.sourceIsBeingSubscribedTo = false;\n        if (!this.isStopped) {\n            if (!this.retries) {\n                this.subscribeToRetries();\n            }\n            if (!this.retriesSubscription || this.retriesSubscription.closed) {\n                return _super.prototype.complete.call(this);\n            }\n            this._unsubscribeAndRecycle();\n            this.notifications.next();\n        }\n    };\n    /** @deprecated internal use only */ RepeatWhenSubscriber.prototype._unsubscribe = function () {\n        var _a = this, notifications = _a.notifications, retriesSubscription = _a.retriesSubscription;\n        if (notifications) {\n            notifications.unsubscribe();\n            this.notifications = null;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = null;\n        }\n        this.retries = null;\n    };\n    /** @deprecated internal use only */ RepeatWhenSubscriber.prototype._unsubscribeAndRecycle = function () {\n        var _a = this, notifications = _a.notifications, retries = _a.retries, retriesSubscription = _a.retriesSubscription;\n        this.notifications = null;\n        this.retries = null;\n        this.retriesSubscription = null;\n        _super.prototype._unsubscribeAndRecycle.call(this);\n        this.notifications = notifications;\n        this.retries = retries;\n        this.retriesSubscription = retriesSubscription;\n        return this;\n    };\n    RepeatWhenSubscriber.prototype.subscribeToRetries = function () {\n        this.notifications = new Subject_1.Subject();\n        var retries = tryCatch_1.tryCatch(this.notifier)(this.notifications);\n        if (retries === errorObject_1.errorObject) {\n            return _super.prototype.complete.call(this);\n        }\n        this.retries = retries;\n        this.retriesSubscription = subscribeToResult_1.subscribeToResult(this, retries);\n    };\n    return RepeatWhenSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nfunction retry(count) {\n    if (count === void 0) { count = -1; }\n    return function (source) { return source.lift(new RetryOperator(count, source)); };\n}\nexports.retry = retry;\nvar RetryOperator = (function () {\n    function RetryOperator(count, source) {\n        this.count = count;\n        this.source = source;\n    }\n    RetryOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n    };\n    return RetryOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RetrySubscriber = (function (_super) {\n    __extends(RetrySubscriber, _super);\n    function RetrySubscriber(destination, count, source) {\n        _super.call(this, destination);\n        this.count = count;\n        this.source = source;\n    }\n    RetrySubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _a = this, source = _a.source, count = _a.count;\n            if (count === 0) {\n                return _super.prototype.error.call(this, err);\n            }\n            else if (count > -1) {\n                this.count = count - 1;\n            }\n            source.subscribe(this._unsubscribeAndRecycle());\n        }\n    };\n    return RetrySubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nfunction retryWhen(notifier) {\n    return function (source) { return source.lift(new RetryWhenOperator(notifier, source)); };\n}\nexports.retryWhen = retryWhen;\nvar RetryWhenOperator = (function () {\n    function RetryWhenOperator(notifier, source) {\n        this.notifier = notifier;\n        this.source = source;\n    }\n    RetryWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n    };\n    return RetryWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RetryWhenSubscriber = (function (_super) {\n    __extends(RetryWhenSubscriber, _super);\n    function RetryWhenSubscriber(destination, notifier, source) {\n        _super.call(this, destination);\n        this.notifier = notifier;\n        this.source = source;\n    }\n    RetryWhenSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var errors = this.errors;\n            var retries = this.retries;\n            var retriesSubscription = this.retriesSubscription;\n            if (!retries) {\n                errors = new Subject_1.Subject();\n                retries = tryCatch_1.tryCatch(this.notifier)(errors);\n                if (retries === errorObject_1.errorObject) {\n                    return _super.prototype.error.call(this, errorObject_1.errorObject.e);\n                }\n                retriesSubscription = subscribeToResult_1.subscribeToResult(this, retries);\n            }\n            else {\n                this.errors = null;\n                this.retriesSubscription = null;\n            }\n            this._unsubscribeAndRecycle();\n            this.errors = errors;\n            this.retries = retries;\n            this.retriesSubscription = retriesSubscription;\n            errors.next(err);\n        }\n    };\n    /** @deprecated internal use only */ RetryWhenSubscriber.prototype._unsubscribe = function () {\n        var _a = this, errors = _a.errors, retriesSubscription = _a.retriesSubscription;\n        if (errors) {\n            errors.unsubscribe();\n            this.errors = null;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = null;\n        }\n        this.retries = null;\n    };\n    RetryWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var _a = this, errors = _a.errors, retries = _a.retries, retriesSubscription = _a.retriesSubscription;\n        this.errors = null;\n        this.retries = null;\n        this.retriesSubscription = null;\n        this._unsubscribeAndRecycle();\n        this.errors = errors;\n        this.retries = retries;\n        this.retriesSubscription = retriesSubscription;\n        this.source.subscribe(this);\n    };\n    return RetryWhenSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nfunction sample(notifier) {\n    return function (source) { return source.lift(new SampleOperator(notifier)); };\n}\nexports.sample = sample;\nvar SampleOperator = (function () {\n    function SampleOperator(notifier) {\n        this.notifier = notifier;\n    }\n    SampleOperator.prototype.call = function (subscriber, source) {\n        var sampleSubscriber = new SampleSubscriber(subscriber);\n        var subscription = source.subscribe(sampleSubscriber);\n        subscription.add(subscribeToResult_1.subscribeToResult(sampleSubscriber, this.notifier));\n        return subscription;\n    };\n    return SampleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SampleSubscriber = (function (_super) {\n    __extends(SampleSubscriber, _super);\n    function SampleSubscriber() {\n        _super.apply(this, arguments);\n        this.hasValue = false;\n    }\n    SampleSubscriber.prototype._next = function (value) {\n        this.value = value;\n        this.hasValue = true;\n    };\n    SampleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.emitValue();\n    };\n    SampleSubscriber.prototype.notifyComplete = function () {\n        this.emitValue();\n    };\n    SampleSubscriber.prototype.emitValue = function () {\n        if (this.hasValue) {\n            this.hasValue = false;\n            this.destination.next(this.value);\n        }\n    };\n    return SampleSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar async_1 = require('../scheduler/async');\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nfunction sampleTime(period, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return function (source) { return source.lift(new SampleTimeOperator(period, scheduler)); };\n}\nexports.sampleTime = sampleTime;\nvar SampleTimeOperator = (function () {\n    function SampleTimeOperator(period, scheduler) {\n        this.period = period;\n        this.scheduler = scheduler;\n    }\n    SampleTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n    };\n    return SampleTimeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SampleTimeSubscriber = (function (_super) {\n    __extends(SampleTimeSubscriber, _super);\n    function SampleTimeSubscriber(destination, period, scheduler) {\n        _super.call(this, destination);\n        this.period = period;\n        this.scheduler = scheduler;\n        this.hasValue = false;\n        this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period: period }));\n    }\n    SampleTimeSubscriber.prototype._next = function (value) {\n        this.lastValue = value;\n        this.hasValue = true;\n    };\n    SampleTimeSubscriber.prototype.notifyNext = function () {\n        if (this.hasValue) {\n            this.hasValue = false;\n            this.destination.next(this.lastValue);\n        }\n    };\n    return SampleTimeSubscriber;\n}(Subscriber_1.Subscriber));\nfunction dispatchNotification(state) {\n    var subscriber = state.subscriber, period = state.period;\n    subscriber.notifyNext();\n    this.schedule(state, period);\n}\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/* tslint:enable:max-line-length */\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nfunction scan(accumulator, seed) {\n    var hasSeed = false;\n    // providing a seed of `undefined` *should* be valid and trigger\n    // hasSeed! so don't use `seed !== undefined` checks!\n    // For this reason, we have to check it here at the original call site\n    // otherwise inside Operator/Subscriber we won't know if `undefined`\n    // means they didn't provide anything or if they literally provided `undefined`\n    if (arguments.length >= 2) {\n        hasSeed = true;\n    }\n    return function scanOperatorFunction(source) {\n        return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n    };\n}\nexports.scan = scan;\nvar ScanOperator = (function () {\n    function ScanOperator(accumulator, seed, hasSeed) {\n        if (hasSeed === void 0) { hasSeed = false; }\n        this.accumulator = accumulator;\n        this.seed = seed;\n        this.hasSeed = hasSeed;\n    }\n    ScanOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n    };\n    return ScanOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ScanSubscriber = (function (_super) {\n    __extends(ScanSubscriber, _super);\n    function ScanSubscriber(destination, accumulator, _seed, hasSeed) {\n        _super.call(this, destination);\n        this.accumulator = accumulator;\n        this._seed = _seed;\n        this.hasSeed = hasSeed;\n        this.index = 0;\n    }\n    Object.defineProperty(ScanSubscriber.prototype, \"seed\", {\n        get: function () {\n            return this._seed;\n        },\n        set: function (value) {\n            this.hasSeed = true;\n            this._seed = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ScanSubscriber.prototype._next = function (value) {\n        if (!this.hasSeed) {\n            this.seed = value;\n            this.destination.next(value);\n        }\n        else {\n            return this._tryNext(value);\n        }\n    };\n    ScanSubscriber.prototype._tryNext = function (value) {\n        var index = this.index++;\n        var result;\n        try {\n            result = this.accumulator(this.seed, value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n        this.seed = result;\n        this.destination.next(result);\n    };\n    return ScanSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nfunction sequenceEqual(compareTo, comparor) {\n    return function (source) { return source.lift(new SequenceEqualOperator(compareTo, comparor)); };\n}\nexports.sequenceEqual = sequenceEqual;\nvar SequenceEqualOperator = (function () {\n    function SequenceEqualOperator(compareTo, comparor) {\n        this.compareTo = compareTo;\n        this.comparor = comparor;\n    }\n    SequenceEqualOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n    };\n    return SequenceEqualOperator;\n}());\nexports.SequenceEqualOperator = SequenceEqualOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SequenceEqualSubscriber = (function (_super) {\n    __extends(SequenceEqualSubscriber, _super);\n    function SequenceEqualSubscriber(destination, compareTo, comparor) {\n        _super.call(this, destination);\n        this.compareTo = compareTo;\n        this.comparor = comparor;\n        this._a = [];\n        this._b = [];\n        this._oneComplete = false;\n        this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n    }\n    SequenceEqualSubscriber.prototype._next = function (value) {\n        if (this._oneComplete && this._b.length === 0) {\n            this.emit(false);\n        }\n        else {\n            this._a.push(value);\n            this.checkValues();\n        }\n    };\n    SequenceEqualSubscriber.prototype._complete = function () {\n        if (this._oneComplete) {\n            this.emit(this._a.length === 0 && this._b.length === 0);\n        }\n        else {\n            this._oneComplete = true;\n        }\n    };\n    SequenceEqualSubscriber.prototype.checkValues = function () {\n        var _c = this, _a = _c._a, _b = _c._b, comparor = _c.comparor;\n        while (_a.length > 0 && _b.length > 0) {\n            var a = _a.shift();\n            var b = _b.shift();\n            var areEqual = false;\n            if (comparor) {\n                areEqual = tryCatch_1.tryCatch(comparor)(a, b);\n                if (areEqual === errorObject_1.errorObject) {\n                    this.destination.error(errorObject_1.errorObject.e);\n                }\n            }\n            else {\n                areEqual = a === b;\n            }\n            if (!areEqual) {\n                this.emit(false);\n            }\n        }\n    };\n    SequenceEqualSubscriber.prototype.emit = function (value) {\n        var destination = this.destination;\n        destination.next(value);\n        destination.complete();\n    };\n    SequenceEqualSubscriber.prototype.nextB = function (value) {\n        if (this._oneComplete && this._a.length === 0) {\n            this.emit(false);\n        }\n        else {\n            this._b.push(value);\n            this.checkValues();\n        }\n    };\n    return SequenceEqualSubscriber;\n}(Subscriber_1.Subscriber));\nexports.SequenceEqualSubscriber = SequenceEqualSubscriber;\nvar SequenceEqualCompareToSubscriber = (function (_super) {\n    __extends(SequenceEqualCompareToSubscriber, _super);\n    function SequenceEqualCompareToSubscriber(destination, parent) {\n        _super.call(this, destination);\n        this.parent = parent;\n    }\n    SequenceEqualCompareToSubscriber.prototype._next = function (value) {\n        this.parent.nextB(value);\n    };\n    SequenceEqualCompareToSubscriber.prototype._error = function (err) {\n        this.parent.error(err);\n    };\n    SequenceEqualCompareToSubscriber.prototype._complete = function () {\n        this.parent._complete();\n    };\n    return SequenceEqualCompareToSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nvar multicast_1 = require('./multicast');\nvar refCount_1 = require('./refCount');\nvar Subject_1 = require('../Subject');\nfunction shareSubjectFactory() {\n    return new Subject_1.Subject();\n}\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .multicast(() => new Subject()).refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nfunction share() {\n    return function (source) { return refCount_1.refCount()(multicast_1.multicast(shareSubjectFactory)(source)); };\n}\nexports.share = share;\n;\n","\"use strict\";\nvar ReplaySubject_1 = require('../ReplaySubject');\n/**\n * @method shareReplay\n * @owner Observable\n */\nfunction shareReplay(bufferSize, windowTime, scheduler) {\n    return function (source) { return source.lift(shareReplayOperator(bufferSize, windowTime, scheduler)); };\n}\nexports.shareReplay = shareReplay;\nfunction shareReplayOperator(bufferSize, windowTime, scheduler) {\n    var subject;\n    var refCount = 0;\n    var subscription;\n    var hasError = false;\n    var isComplete = false;\n    return function shareReplayOperation(source) {\n        refCount++;\n        if (!subject || hasError) {\n            hasError = false;\n            subject = new ReplaySubject_1.ReplaySubject(bufferSize, windowTime, scheduler);\n            subscription = source.subscribe({\n                next: function (value) { subject.next(value); },\n                error: function (err) {\n                    hasError = true;\n                    subject.error(err);\n                },\n                complete: function () {\n                    isComplete = true;\n                    subject.complete();\n                },\n            });\n        }\n        var innerSub = subject.subscribe(this);\n        return function () {\n            refCount--;\n            innerSub.unsubscribe();\n            if (subscription && refCount === 0 && isComplete) {\n                subscription.unsubscribe();\n            }\n        };\n    };\n}\n;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar EmptyError_1 = require('../util/EmptyError');\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nfunction single(predicate) {\n    return function (source) { return source.lift(new SingleOperator(predicate, source)); };\n}\nexports.single = single;\nvar SingleOperator = (function () {\n    function SingleOperator(predicate, source) {\n        this.predicate = predicate;\n        this.source = source;\n    }\n    SingleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n    };\n    return SingleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SingleSubscriber = (function (_super) {\n    __extends(SingleSubscriber, _super);\n    function SingleSubscriber(destination, predicate, source) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.source = source;\n        this.seenValue = false;\n        this.index = 0;\n    }\n    SingleSubscriber.prototype.applySingleValue = function (value) {\n        if (this.seenValue) {\n            this.destination.error('Sequence contains more than one element');\n        }\n        else {\n            this.seenValue = true;\n            this.singleValue = value;\n        }\n    };\n    SingleSubscriber.prototype._next = function (value) {\n        var index = this.index++;\n        if (this.predicate) {\n            this.tryNext(value, index);\n        }\n        else {\n            this.applySingleValue(value);\n        }\n    };\n    SingleSubscriber.prototype.tryNext = function (value, index) {\n        try {\n            if (this.predicate(value, index, this.source)) {\n                this.applySingleValue(value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    SingleSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        if (this.index > 0) {\n            destination.next(this.seenValue ? this.singleValue : undefined);\n            destination.complete();\n        }\n        else {\n            destination.error(new EmptyError_1.EmptyError);\n        }\n    };\n    return SingleSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nfunction skip(count) {\n    return function (source) { return source.lift(new SkipOperator(count)); };\n}\nexports.skip = skip;\nvar SkipOperator = (function () {\n    function SkipOperator(total) {\n        this.total = total;\n    }\n    SkipOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SkipSubscriber(subscriber, this.total));\n    };\n    return SkipOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipSubscriber = (function (_super) {\n    __extends(SkipSubscriber, _super);\n    function SkipSubscriber(destination, total) {\n        _super.call(this, destination);\n        this.total = total;\n        this.count = 0;\n    }\n    SkipSubscriber.prototype._next = function (x) {\n        if (++this.count > this.total) {\n            this.destination.next(x);\n        }\n    };\n    return SkipSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar ArgumentOutOfRangeError_1 = require('../util/ArgumentOutOfRangeError');\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nfunction skipLast(count) {\n    return function (source) { return source.lift(new SkipLastOperator(count)); };\n}\nexports.skipLast = skipLast;\nvar SkipLastOperator = (function () {\n    function SkipLastOperator(_skipCount) {\n        this._skipCount = _skipCount;\n        if (this._skipCount < 0) {\n            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;\n        }\n    }\n    SkipLastOperator.prototype.call = function (subscriber, source) {\n        if (this._skipCount === 0) {\n            // If we don't want to skip any values then just subscribe\n            // to Subscriber without any further logic.\n            return source.subscribe(new Subscriber_1.Subscriber(subscriber));\n        }\n        else {\n            return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));\n        }\n    };\n    return SkipLastOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipLastSubscriber = (function (_super) {\n    __extends(SkipLastSubscriber, _super);\n    function SkipLastSubscriber(destination, _skipCount) {\n        _super.call(this, destination);\n        this._skipCount = _skipCount;\n        this._count = 0;\n        this._ring = new Array(_skipCount);\n    }\n    SkipLastSubscriber.prototype._next = function (value) {\n        var skipCount = this._skipCount;\n        var count = this._count++;\n        if (count < skipCount) {\n            this._ring[count] = value;\n        }\n        else {\n            var currentIndex = count % skipCount;\n            var ring = this._ring;\n            var oldValue = ring[currentIndex];\n            ring[currentIndex] = value;\n            this.destination.next(oldValue);\n        }\n    };\n    return SkipLastSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nfunction skipUntil(notifier) {\n    return function (source) { return source.lift(new SkipUntilOperator(notifier)); };\n}\nexports.skipUntil = skipUntil;\nvar SkipUntilOperator = (function () {\n    function SkipUntilOperator(notifier) {\n        this.notifier = notifier;\n    }\n    SkipUntilOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SkipUntilSubscriber(subscriber, this.notifier));\n    };\n    return SkipUntilOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipUntilSubscriber = (function (_super) {\n    __extends(SkipUntilSubscriber, _super);\n    function SkipUntilSubscriber(destination, notifier) {\n        _super.call(this, destination);\n        this.hasValue = false;\n        this.isInnerStopped = false;\n        this.add(subscribeToResult_1.subscribeToResult(this, notifier));\n    }\n    SkipUntilSubscriber.prototype._next = function (value) {\n        if (this.hasValue) {\n            _super.prototype._next.call(this, value);\n        }\n    };\n    SkipUntilSubscriber.prototype._complete = function () {\n        if (this.isInnerStopped) {\n            _super.prototype._complete.call(this);\n        }\n        else {\n            this.unsubscribe();\n        }\n    };\n    SkipUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.hasValue = true;\n    };\n    SkipUntilSubscriber.prototype.notifyComplete = function () {\n        this.isInnerStopped = true;\n        if (this.isStopped) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    return SkipUntilSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nfunction skipWhile(predicate) {\n    return function (source) { return source.lift(new SkipWhileOperator(predicate)); };\n}\nexports.skipWhile = skipWhile;\nvar SkipWhileOperator = (function () {\n    function SkipWhileOperator(predicate) {\n        this.predicate = predicate;\n    }\n    SkipWhileOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n    };\n    return SkipWhileOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipWhileSubscriber = (function (_super) {\n    __extends(SkipWhileSubscriber, _super);\n    function SkipWhileSubscriber(destination, predicate) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.skipping = true;\n        this.index = 0;\n    }\n    SkipWhileSubscriber.prototype._next = function (value) {\n        var destination = this.destination;\n        if (this.skipping) {\n            this.tryCallPredicate(value);\n        }\n        if (!this.skipping) {\n            destination.next(value);\n        }\n    };\n    SkipWhileSubscriber.prototype.tryCallPredicate = function (value) {\n        try {\n            var result = this.predicate(value, this.index++);\n            this.skipping = Boolean(result);\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    return SkipWhileSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nvar ArrayObservable_1 = require('../observable/ArrayObservable');\nvar ScalarObservable_1 = require('../observable/ScalarObservable');\nvar EmptyObservable_1 = require('../observable/EmptyObservable');\nvar concat_1 = require('../observable/concat');\nvar isScheduler_1 = require('../util/isScheduler');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nfunction startWith() {\n    var array = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        array[_i - 0] = arguments[_i];\n    }\n    return function (source) {\n        var scheduler = array[array.length - 1];\n        if (isScheduler_1.isScheduler(scheduler)) {\n            array.pop();\n        }\n        else {\n            scheduler = null;\n        }\n        var len = array.length;\n        if (len === 1) {\n            return concat_1.concat(new ScalarObservable_1.ScalarObservable(array[0], scheduler), source);\n        }\n        else if (len > 1) {\n            return concat_1.concat(new ArrayObservable_1.ArrayObservable(array, scheduler), source);\n        }\n        else {\n            return concat_1.concat(new EmptyObservable_1.EmptyObservable(scheduler), source);\n        }\n    };\n}\nexports.startWith = startWith;\n","\"use strict\";\nvar SubscribeOnObservable_1 = require('../observable/SubscribeOnObservable');\n/**\n * Asynchronously subscribes Observers to this Observable on the specified IScheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} scheduler - The IScheduler to perform subscription actions on.\n * @return {Observable<T>} The source Observable modified so that its subscriptions happen on the specified IScheduler.\n .\n * @method subscribeOn\n * @owner Observable\n */\nfunction subscribeOn(scheduler, delay) {\n    if (delay === void 0) { delay = 0; }\n    return function subscribeOnOperatorFunction(source) {\n        return source.lift(new SubscribeOnOperator(scheduler, delay));\n    };\n}\nexports.subscribeOn = subscribeOn;\nvar SubscribeOnOperator = (function () {\n    function SubscribeOnOperator(scheduler, delay) {\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    SubscribeOnOperator.prototype.call = function (subscriber, source) {\n        return new SubscribeOnObservable_1.SubscribeOnObservable(source, this.delay, this.scheduler).subscribe(subscriber);\n    };\n    return SubscribeOnOperator;\n}());\n","\"use strict\";\nvar switchMap_1 = require('./switchMap');\nvar identity_1 = require('../util/identity');\nfunction switchAll() {\n    return switchMap_1.switchMap(identity_1.identity);\n}\nexports.switchAll = switchAll;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nfunction switchMap(project, resultSelector) {\n    return function switchMapOperatorFunction(source) {\n        return source.lift(new SwitchMapOperator(project, resultSelector));\n    };\n}\nexports.switchMap = switchMap;\nvar SwitchMapOperator = (function () {\n    function SwitchMapOperator(project, resultSelector) {\n        this.project = project;\n        this.resultSelector = resultSelector;\n    }\n    SwitchMapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n    };\n    return SwitchMapOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchMapSubscriber = (function (_super) {\n    __extends(SwitchMapSubscriber, _super);\n    function SwitchMapSubscriber(destination, project, resultSelector) {\n        _super.call(this, destination);\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.index = 0;\n    }\n    SwitchMapSubscriber.prototype._next = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (error) {\n            this.destination.error(error);\n            return;\n        }\n        this._innerSub(result, value, index);\n    };\n    SwitchMapSubscriber.prototype._innerSub = function (result, value, index) {\n        var innerSubscription = this.innerSubscription;\n        if (innerSubscription) {\n            innerSubscription.unsubscribe();\n        }\n        this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, result, value, index));\n    };\n    SwitchMapSubscriber.prototype._complete = function () {\n        var innerSubscription = this.innerSubscription;\n        if (!innerSubscription || innerSubscription.closed) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    /** @deprecated internal use only */ SwitchMapSubscriber.prototype._unsubscribe = function () {\n        this.innerSubscription = null;\n    };\n    SwitchMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.innerSubscription = null;\n        if (this.isStopped) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (this.resultSelector) {\n            this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            this.destination.next(innerValue);\n        }\n    };\n    SwitchMapSubscriber.prototype._tryNotifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var result;\n        try {\n            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return SwitchMapSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nfunction switchMapTo(innerObservable, resultSelector) {\n    return function (source) { return source.lift(new SwitchMapToOperator(innerObservable, resultSelector)); };\n}\nexports.switchMapTo = switchMapTo;\nvar SwitchMapToOperator = (function () {\n    function SwitchMapToOperator(observable, resultSelector) {\n        this.observable = observable;\n        this.resultSelector = resultSelector;\n    }\n    SwitchMapToOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));\n    };\n    return SwitchMapToOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchMapToSubscriber = (function (_super) {\n    __extends(SwitchMapToSubscriber, _super);\n    function SwitchMapToSubscriber(destination, inner, resultSelector) {\n        _super.call(this, destination);\n        this.inner = inner;\n        this.resultSelector = resultSelector;\n        this.index = 0;\n    }\n    SwitchMapToSubscriber.prototype._next = function (value) {\n        var innerSubscription = this.innerSubscription;\n        if (innerSubscription) {\n            innerSubscription.unsubscribe();\n        }\n        this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, this.inner, value, this.index++));\n    };\n    SwitchMapToSubscriber.prototype._complete = function () {\n        var innerSubscription = this.innerSubscription;\n        if (!innerSubscription || innerSubscription.closed) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    /** @deprecated internal use only */ SwitchMapToSubscriber.prototype._unsubscribe = function () {\n        this.innerSubscription = null;\n    };\n    SwitchMapToSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.innerSubscription = null;\n        if (this.isStopped) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapToSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        if (resultSelector) {\n            this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            destination.next(innerValue);\n        }\n    };\n    SwitchMapToSubscriber.prototype.tryResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        var result;\n        try {\n            result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        destination.next(result);\n    };\n    return SwitchMapToSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar ArgumentOutOfRangeError_1 = require('../util/ArgumentOutOfRangeError');\nvar EmptyObservable_1 = require('../observable/EmptyObservable');\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nfunction take(count) {\n    return function (source) {\n        if (count === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        else {\n            return source.lift(new TakeOperator(count));\n        }\n    };\n}\nexports.take = take;\nvar TakeOperator = (function () {\n    function TakeOperator(total) {\n        this.total = total;\n        if (this.total < 0) {\n            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;\n        }\n    }\n    TakeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeSubscriber(subscriber, this.total));\n    };\n    return TakeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeSubscriber = (function (_super) {\n    __extends(TakeSubscriber, _super);\n    function TakeSubscriber(destination, total) {\n        _super.call(this, destination);\n        this.total = total;\n        this.count = 0;\n    }\n    TakeSubscriber.prototype._next = function (value) {\n        var total = this.total;\n        var count = ++this.count;\n        if (count <= total) {\n            this.destination.next(value);\n            if (count === total) {\n                this.destination.complete();\n                this.unsubscribe();\n            }\n        }\n    };\n    return TakeSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar ArgumentOutOfRangeError_1 = require('../util/ArgumentOutOfRangeError');\nvar EmptyObservable_1 = require('../observable/EmptyObservable');\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nfunction takeLast(count) {\n    return function takeLastOperatorFunction(source) {\n        if (count === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        else {\n            return source.lift(new TakeLastOperator(count));\n        }\n    };\n}\nexports.takeLast = takeLast;\nvar TakeLastOperator = (function () {\n    function TakeLastOperator(total) {\n        this.total = total;\n        if (this.total < 0) {\n            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;\n        }\n    }\n    TakeLastOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n    };\n    return TakeLastOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeLastSubscriber = (function (_super) {\n    __extends(TakeLastSubscriber, _super);\n    function TakeLastSubscriber(destination, total) {\n        _super.call(this, destination);\n        this.total = total;\n        this.ring = new Array();\n        this.count = 0;\n    }\n    TakeLastSubscriber.prototype._next = function (value) {\n        var ring = this.ring;\n        var total = this.total;\n        var count = this.count++;\n        if (ring.length < total) {\n            ring.push(value);\n        }\n        else {\n            var index = count % total;\n            ring[index] = value;\n        }\n    };\n    TakeLastSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        var count = this.count;\n        if (count > 0) {\n            var total = this.count >= this.total ? this.total : this.count;\n            var ring = this.ring;\n            for (var i = 0; i < total; i++) {\n                var idx = (count++) % total;\n                destination.next(ring[idx]);\n            }\n        }\n        destination.complete();\n    };\n    return TakeLastSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nfunction takeUntil(notifier) {\n    return function (source) { return source.lift(new TakeUntilOperator(notifier)); };\n}\nexports.takeUntil = takeUntil;\nvar TakeUntilOperator = (function () {\n    function TakeUntilOperator(notifier) {\n        this.notifier = notifier;\n    }\n    TakeUntilOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n    };\n    return TakeUntilOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeUntilSubscriber = (function (_super) {\n    __extends(TakeUntilSubscriber, _super);\n    function TakeUntilSubscriber(destination, notifier) {\n        _super.call(this, destination);\n        this.notifier = notifier;\n        this.add(subscribeToResult_1.subscribeToResult(this, notifier));\n    }\n    TakeUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.complete();\n    };\n    TakeUntilSubscriber.prototype.notifyComplete = function () {\n        // noop\n    };\n    return TakeUntilSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nfunction takeWhile(predicate) {\n    return function (source) { return source.lift(new TakeWhileOperator(predicate)); };\n}\nexports.takeWhile = takeWhile;\nvar TakeWhileOperator = (function () {\n    function TakeWhileOperator(predicate) {\n        this.predicate = predicate;\n    }\n    TakeWhileOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n    };\n    return TakeWhileOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeWhileSubscriber = (function (_super) {\n    __extends(TakeWhileSubscriber, _super);\n    function TakeWhileSubscriber(destination, predicate) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.index = 0;\n    }\n    TakeWhileSubscriber.prototype._next = function (value) {\n        var destination = this.destination;\n        var result;\n        try {\n            result = this.predicate(value, this.index++);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        this.nextOrComplete(value, result);\n    };\n    TakeWhileSubscriber.prototype.nextOrComplete = function (value, predicateResult) {\n        var destination = this.destination;\n        if (Boolean(predicateResult)) {\n            destination.next(value);\n        }\n        else {\n            destination.complete();\n        }\n    };\n    return TakeWhileSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/* tslint:enable:max-line-length */\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @name tap\n */\nfunction tap(nextOrObserver, error, complete) {\n    return function tapOperatorFunction(source) {\n        return source.lift(new DoOperator(nextOrObserver, error, complete));\n    };\n}\nexports.tap = tap;\nvar DoOperator = (function () {\n    function DoOperator(nextOrObserver, error, complete) {\n        this.nextOrObserver = nextOrObserver;\n        this.error = error;\n        this.complete = complete;\n    }\n    DoOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n    };\n    return DoOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DoSubscriber = (function (_super) {\n    __extends(DoSubscriber, _super);\n    function DoSubscriber(destination, nextOrObserver, error, complete) {\n        _super.call(this, destination);\n        var safeSubscriber = new Subscriber_1.Subscriber(nextOrObserver, error, complete);\n        safeSubscriber.syncErrorThrowable = true;\n        this.add(safeSubscriber);\n        this.safeSubscriber = safeSubscriber;\n    }\n    DoSubscriber.prototype._next = function (value) {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.next(value);\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        }\n        else {\n            this.destination.next(value);\n        }\n    };\n    DoSubscriber.prototype._error = function (err) {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.error(err);\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        }\n        else {\n            this.destination.error(err);\n        }\n    };\n    DoSubscriber.prototype._complete = function () {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.complete();\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        }\n        else {\n            this.destination.complete();\n        }\n    };\n    return DoSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nexports.defaultThrottleConfig = {\n    leading: true,\n    trailing: false\n};\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nfunction throttle(durationSelector, config) {\n    if (config === void 0) { config = exports.defaultThrottleConfig; }\n    return function (source) { return source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing)); };\n}\nexports.throttle = throttle;\nvar ThrottleOperator = (function () {\n    function ThrottleOperator(durationSelector, leading, trailing) {\n        this.durationSelector = durationSelector;\n        this.leading = leading;\n        this.trailing = trailing;\n    }\n    ThrottleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing));\n    };\n    return ThrottleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc\n * @ignore\n * @extends {Ignored}\n */\nvar ThrottleSubscriber = (function (_super) {\n    __extends(ThrottleSubscriber, _super);\n    function ThrottleSubscriber(destination, durationSelector, _leading, _trailing) {\n        _super.call(this, destination);\n        this.destination = destination;\n        this.durationSelector = durationSelector;\n        this._leading = _leading;\n        this._trailing = _trailing;\n        this._hasTrailingValue = false;\n    }\n    ThrottleSubscriber.prototype._next = function (value) {\n        if (this.throttled) {\n            if (this._trailing) {\n                this._hasTrailingValue = true;\n                this._trailingValue = value;\n            }\n        }\n        else {\n            var duration = this.tryDurationSelector(value);\n            if (duration) {\n                this.add(this.throttled = subscribeToResult_1.subscribeToResult(this, duration));\n            }\n            if (this._leading) {\n                this.destination.next(value);\n                if (this._trailing) {\n                    this._hasTrailingValue = true;\n                    this._trailingValue = value;\n                }\n            }\n        }\n    };\n    ThrottleSubscriber.prototype.tryDurationSelector = function (value) {\n        try {\n            return this.durationSelector(value);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return null;\n        }\n    };\n    /** @deprecated internal use only */ ThrottleSubscriber.prototype._unsubscribe = function () {\n        var _a = this, throttled = _a.throttled, _trailingValue = _a._trailingValue, _hasTrailingValue = _a._hasTrailingValue, _trailing = _a._trailing;\n        this._trailingValue = null;\n        this._hasTrailingValue = false;\n        if (throttled) {\n            this.remove(throttled);\n            this.throttled = null;\n            throttled.unsubscribe();\n        }\n    };\n    ThrottleSubscriber.prototype._sendTrailing = function () {\n        var _a = this, destination = _a.destination, throttled = _a.throttled, _trailing = _a._trailing, _trailingValue = _a._trailingValue, _hasTrailingValue = _a._hasTrailingValue;\n        if (throttled && _trailing && _hasTrailingValue) {\n            destination.next(_trailingValue);\n            this._trailingValue = null;\n            this._hasTrailingValue = false;\n        }\n    };\n    ThrottleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this._sendTrailing();\n        this._unsubscribe();\n    };\n    ThrottleSubscriber.prototype.notifyComplete = function () {\n        this._sendTrailing();\n        this._unsubscribe();\n    };\n    return ThrottleSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar async_1 = require('../scheduler/async');\nvar throttle_1 = require('./throttle');\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nfunction throttleTime(duration, scheduler, config) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    if (config === void 0) { config = throttle_1.defaultThrottleConfig; }\n    return function (source) { return source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing)); };\n}\nexports.throttleTime = throttleTime;\nvar ThrottleTimeOperator = (function () {\n    function ThrottleTimeOperator(duration, scheduler, leading, trailing) {\n        this.duration = duration;\n        this.scheduler = scheduler;\n        this.leading = leading;\n        this.trailing = trailing;\n    }\n    ThrottleTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing));\n    };\n    return ThrottleTimeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ThrottleTimeSubscriber = (function (_super) {\n    __extends(ThrottleTimeSubscriber, _super);\n    function ThrottleTimeSubscriber(destination, duration, scheduler, leading, trailing) {\n        _super.call(this, destination);\n        this.duration = duration;\n        this.scheduler = scheduler;\n        this.leading = leading;\n        this.trailing = trailing;\n        this._hasTrailingValue = false;\n        this._trailingValue = null;\n    }\n    ThrottleTimeSubscriber.prototype._next = function (value) {\n        if (this.throttled) {\n            if (this.trailing) {\n                this._trailingValue = value;\n                this._hasTrailingValue = true;\n            }\n        }\n        else {\n            this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n            if (this.leading) {\n                this.destination.next(value);\n            }\n        }\n    };\n    ThrottleTimeSubscriber.prototype.clearThrottle = function () {\n        var throttled = this.throttled;\n        if (throttled) {\n            if (this.trailing && this._hasTrailingValue) {\n                this.destination.next(this._trailingValue);\n                this._trailingValue = null;\n                this._hasTrailingValue = false;\n            }\n            throttled.unsubscribe();\n            this.remove(throttled);\n            this.throttled = null;\n        }\n    };\n    return ThrottleTimeSubscriber;\n}(Subscriber_1.Subscriber));\nfunction dispatchNext(arg) {\n    var subscriber = arg.subscriber;\n    subscriber.clearThrottle();\n}\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar async_1 = require('../scheduler/async');\nfunction timeInterval(scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return function (source) { return source.lift(new TimeIntervalOperator(scheduler)); };\n}\nexports.timeInterval = timeInterval;\nvar TimeInterval = (function () {\n    function TimeInterval(value, interval) {\n        this.value = value;\n        this.interval = interval;\n    }\n    return TimeInterval;\n}());\nexports.TimeInterval = TimeInterval;\n;\nvar TimeIntervalOperator = (function () {\n    function TimeIntervalOperator(scheduler) {\n        this.scheduler = scheduler;\n    }\n    TimeIntervalOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new TimeIntervalSubscriber(observer, this.scheduler));\n    };\n    return TimeIntervalOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TimeIntervalSubscriber = (function (_super) {\n    __extends(TimeIntervalSubscriber, _super);\n    function TimeIntervalSubscriber(destination, scheduler) {\n        _super.call(this, destination);\n        this.scheduler = scheduler;\n        this.lastTime = 0;\n        this.lastTime = scheduler.now();\n    }\n    TimeIntervalSubscriber.prototype._next = function (value) {\n        var now = this.scheduler.now();\n        var span = now - this.lastTime;\n        this.lastTime = now;\n        this.destination.next(new TimeInterval(value, span));\n    };\n    return TimeIntervalSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar async_1 = require('../scheduler/async');\nvar isDate_1 = require('../util/isDate');\nvar Subscriber_1 = require('../Subscriber');\nvar TimeoutError_1 = require('../util/TimeoutError');\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * <img src=\"./img/timeout.png\" width=\"100%\">\n *\n * `timeout` operator accepts as an argument either a number or a Date.\n *\n * If number was provided, it returns an Observable that behaves like a source\n * Observable, unless there is a period of time where there is no value emitted.\n * So if you provide `100` as argument and first value comes after 50ms from\n * the moment of subscription, this value will be simply re-emitted by the resulting\n * Observable. If however after that 100ms passes without a second value being emitted,\n * stream will end with an error and source Observable will be unsubscribed.\n * These checks are performed throughout whole lifecycle of Observable - from the moment\n * it was subscribed to, until it completes or errors itself. Thus every value must be\n * emitted within specified period since previous value.\n *\n * If provided argument was Date, returned Observable behaves differently. It throws\n * if Observable did not complete before provided Date. This means that periods between\n * emission of particular values do not matter in this case. If Observable did not complete\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\n * stream behaves just as source Observable.\n *\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\n * when returned Observable will check if source stream emitted value or completed.\n *\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\n *                       // since `interval` might fire a bit later then scheduled.\n * .subscribe(\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\n *     err => console.log(err) // Will never be called.\n * );\n *\n * seconds.timeout(900).subscribe(\n *     value => console.log(value), // Will never be called.\n *     err => console.log(err) // Will emit error before even first value is emitted,\n *                             // since it did not arrive within 900ms period.\n * );\n *\n * @example <caption>Use Date to check if Observable completed</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\n * .subscribe(\n *     value => console.log(value), // Will emit values as regular `interval` would\n *                                  // until December 17, 2020 at 03:24:00.\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\n *                             // since Observable did not complete by then.\n * );\n *\n * @see {@link timeoutWith}\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\n * @method timeout\n * @owner Observable\n */\nfunction timeout(due, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    var absoluteTimeout = isDate_1.isDate(due);\n    var waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(due);\n    return function (source) { return source.lift(new TimeoutOperator(waitFor, absoluteTimeout, scheduler, new TimeoutError_1.TimeoutError())); };\n}\nexports.timeout = timeout;\nvar TimeoutOperator = (function () {\n    function TimeoutOperator(waitFor, absoluteTimeout, scheduler, errorInstance) {\n        this.waitFor = waitFor;\n        this.absoluteTimeout = absoluteTimeout;\n        this.scheduler = scheduler;\n        this.errorInstance = errorInstance;\n    }\n    TimeoutOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TimeoutSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.scheduler, this.errorInstance));\n    };\n    return TimeoutOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TimeoutSubscriber = (function (_super) {\n    __extends(TimeoutSubscriber, _super);\n    function TimeoutSubscriber(destination, absoluteTimeout, waitFor, scheduler, errorInstance) {\n        _super.call(this, destination);\n        this.absoluteTimeout = absoluteTimeout;\n        this.waitFor = waitFor;\n        this.scheduler = scheduler;\n        this.errorInstance = errorInstance;\n        this.action = null;\n        this.scheduleTimeout();\n    }\n    TimeoutSubscriber.dispatchTimeout = function (subscriber) {\n        subscriber.error(subscriber.errorInstance);\n    };\n    TimeoutSubscriber.prototype.scheduleTimeout = function () {\n        var action = this.action;\n        if (action) {\n            // Recycle the action if we've already scheduled one. All the production\n            // Scheduler Actions mutate their state/delay time and return themeselves.\n            // VirtualActions are immutable, so they create and return a clone. In this\n            // case, we need to set the action reference to the most recent VirtualAction,\n            // to ensure that's the one we clone from next time.\n            this.action = action.schedule(this, this.waitFor);\n        }\n        else {\n            this.add(this.action = this.scheduler.schedule(TimeoutSubscriber.dispatchTimeout, this.waitFor, this));\n        }\n    };\n    TimeoutSubscriber.prototype._next = function (value) {\n        if (!this.absoluteTimeout) {\n            this.scheduleTimeout();\n        }\n        _super.prototype._next.call(this, value);\n    };\n    /** @deprecated internal use only */ TimeoutSubscriber.prototype._unsubscribe = function () {\n        this.action = null;\n        this.scheduler = null;\n        this.errorInstance = null;\n    };\n    return TimeoutSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar async_1 = require('../scheduler/async');\nvar isDate_1 = require('../util/isDate');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nfunction timeoutWith(due, withObservable, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return function (source) {\n        var absoluteTimeout = isDate_1.isDate(due);\n        var waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(due);\n        return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n    };\n}\nexports.timeoutWith = timeoutWith;\nvar TimeoutWithOperator = (function () {\n    function TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler) {\n        this.waitFor = waitFor;\n        this.absoluteTimeout = absoluteTimeout;\n        this.withObservable = withObservable;\n        this.scheduler = scheduler;\n    }\n    TimeoutWithOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TimeoutWithSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler));\n    };\n    return TimeoutWithOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TimeoutWithSubscriber = (function (_super) {\n    __extends(TimeoutWithSubscriber, _super);\n    function TimeoutWithSubscriber(destination, absoluteTimeout, waitFor, withObservable, scheduler) {\n        _super.call(this, destination);\n        this.absoluteTimeout = absoluteTimeout;\n        this.waitFor = waitFor;\n        this.withObservable = withObservable;\n        this.scheduler = scheduler;\n        this.action = null;\n        this.scheduleTimeout();\n    }\n    TimeoutWithSubscriber.dispatchTimeout = function (subscriber) {\n        var withObservable = subscriber.withObservable;\n        subscriber._unsubscribeAndRecycle();\n        subscriber.add(subscribeToResult_1.subscribeToResult(subscriber, withObservable));\n    };\n    TimeoutWithSubscriber.prototype.scheduleTimeout = function () {\n        var action = this.action;\n        if (action) {\n            // Recycle the action if we've already scheduled one. All the production\n            // Scheduler Actions mutate their state/delay time and return themeselves.\n            // VirtualActions are immutable, so they create and return a clone. In this\n            // case, we need to set the action reference to the most recent VirtualAction,\n            // to ensure that's the one we clone from next time.\n            this.action = action.schedule(this, this.waitFor);\n        }\n        else {\n            this.add(this.action = this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this));\n        }\n    };\n    TimeoutWithSubscriber.prototype._next = function (value) {\n        if (!this.absoluteTimeout) {\n            this.scheduleTimeout();\n        }\n        _super.prototype._next.call(this, value);\n    };\n    /** @deprecated internal use only */ TimeoutWithSubscriber.prototype._unsubscribe = function () {\n        this.action = null;\n        this.scheduler = null;\n        this.withObservable = null;\n    };\n    return TimeoutWithSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar map_1 = require('./map');\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nfunction timestamp(scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return map_1.map(function (value) { return new Timestamp(value, scheduler.now()); });\n    // return (source: Observable<T>) => source.lift(new TimestampOperator(scheduler));\n}\nexports.timestamp = timestamp;\nvar Timestamp = (function () {\n    function Timestamp(value, timestamp) {\n        this.value = value;\n        this.timestamp = timestamp;\n    }\n    return Timestamp;\n}());\nexports.Timestamp = Timestamp;\n;\n","\"use strict\";\nvar reduce_1 = require('./reduce');\nfunction toArrayReducer(arr, item, index) {\n    if (index === 0) {\n        return [item];\n    }\n    arr.push(item);\n    return arr;\n}\nfunction toArray() {\n    return reduce_1.reduce(toArrayReducer, []);\n}\nexports.toArray = toArray;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nfunction window(windowBoundaries) {\n    return function windowOperatorFunction(source) {\n        return source.lift(new WindowOperator(windowBoundaries));\n    };\n}\nexports.window = window;\nvar WindowOperator = (function () {\n    function WindowOperator(windowBoundaries) {\n        this.windowBoundaries = windowBoundaries;\n    }\n    WindowOperator.prototype.call = function (subscriber, source) {\n        var windowSubscriber = new WindowSubscriber(subscriber);\n        var sourceSubscription = source.subscribe(windowSubscriber);\n        if (!sourceSubscription.closed) {\n            windowSubscriber.add(subscribeToResult_1.subscribeToResult(windowSubscriber, this.windowBoundaries));\n        }\n        return sourceSubscription;\n    };\n    return WindowOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowSubscriber = (function (_super) {\n    __extends(WindowSubscriber, _super);\n    function WindowSubscriber(destination) {\n        _super.call(this, destination);\n        this.window = new Subject_1.Subject();\n        destination.next(this.window);\n    }\n    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.openWindow();\n    };\n    WindowSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    WindowSubscriber.prototype.notifyComplete = function (innerSub) {\n        this._complete();\n    };\n    WindowSubscriber.prototype._next = function (value) {\n        this.window.next(value);\n    };\n    WindowSubscriber.prototype._error = function (err) {\n        this.window.error(err);\n        this.destination.error(err);\n    };\n    WindowSubscriber.prototype._complete = function () {\n        this.window.complete();\n        this.destination.complete();\n    };\n    /** @deprecated internal use only */ WindowSubscriber.prototype._unsubscribe = function () {\n        this.window = null;\n    };\n    WindowSubscriber.prototype.openWindow = function () {\n        var prevWindow = this.window;\n        if (prevWindow) {\n            prevWindow.complete();\n        }\n        var destination = this.destination;\n        var newWindow = this.window = new Subject_1.Subject();\n        destination.next(newWindow);\n    };\n    return WindowSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar Subject_1 = require('../Subject');\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nfunction windowCount(windowSize, startWindowEvery) {\n    if (startWindowEvery === void 0) { startWindowEvery = 0; }\n    return function windowCountOperatorFunction(source) {\n        return source.lift(new WindowCountOperator(windowSize, startWindowEvery));\n    };\n}\nexports.windowCount = windowCount;\nvar WindowCountOperator = (function () {\n    function WindowCountOperator(windowSize, startWindowEvery) {\n        this.windowSize = windowSize;\n        this.startWindowEvery = startWindowEvery;\n    }\n    WindowCountOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n    };\n    return WindowCountOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowCountSubscriber = (function (_super) {\n    __extends(WindowCountSubscriber, _super);\n    function WindowCountSubscriber(destination, windowSize, startWindowEvery) {\n        _super.call(this, destination);\n        this.destination = destination;\n        this.windowSize = windowSize;\n        this.startWindowEvery = startWindowEvery;\n        this.windows = [new Subject_1.Subject()];\n        this.count = 0;\n        destination.next(this.windows[0]);\n    }\n    WindowCountSubscriber.prototype._next = function (value) {\n        var startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n        var destination = this.destination;\n        var windowSize = this.windowSize;\n        var windows = this.windows;\n        var len = windows.length;\n        for (var i = 0; i < len && !this.closed; i++) {\n            windows[i].next(value);\n        }\n        var c = this.count - windowSize + 1;\n        if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n            windows.shift().complete();\n        }\n        if (++this.count % startWindowEvery === 0 && !this.closed) {\n            var window_1 = new Subject_1.Subject();\n            windows.push(window_1);\n            destination.next(window_1);\n        }\n    };\n    WindowCountSubscriber.prototype._error = function (err) {\n        var windows = this.windows;\n        if (windows) {\n            while (windows.length > 0 && !this.closed) {\n                windows.shift().error(err);\n            }\n        }\n        this.destination.error(err);\n    };\n    WindowCountSubscriber.prototype._complete = function () {\n        var windows = this.windows;\n        if (windows) {\n            while (windows.length > 0 && !this.closed) {\n                windows.shift().complete();\n            }\n        }\n        this.destination.complete();\n    };\n    /** @deprecated internal use only */ WindowCountSubscriber.prototype._unsubscribe = function () {\n        this.count = 0;\n        this.windows = null;\n    };\n    return WindowCountSubscriber;\n}(Subscriber_1.Subscriber));\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar async_1 = require('../scheduler/async');\nvar Subscriber_1 = require('../Subscriber');\nvar isNumeric_1 = require('../util/isNumeric');\nvar isScheduler_1 = require('../util/isScheduler');\nfunction windowTime(windowTimeSpan) {\n    var scheduler = async_1.async;\n    var windowCreationInterval = null;\n    var maxWindowSize = Number.POSITIVE_INFINITY;\n    if (isScheduler_1.isScheduler(arguments[3])) {\n        scheduler = arguments[3];\n    }\n    if (isScheduler_1.isScheduler(arguments[2])) {\n        scheduler = arguments[2];\n    }\n    else if (isNumeric_1.isNumeric(arguments[2])) {\n        maxWindowSize = arguments[2];\n    }\n    if (isScheduler_1.isScheduler(arguments[1])) {\n        scheduler = arguments[1];\n    }\n    else if (isNumeric_1.isNumeric(arguments[1])) {\n        windowCreationInterval = arguments[1];\n    }\n    return function windowTimeOperatorFunction(source) {\n        return source.lift(new WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));\n    };\n}\nexports.windowTime = windowTime;\nvar WindowTimeOperator = (function () {\n    function WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {\n        this.windowTimeSpan = windowTimeSpan;\n        this.windowCreationInterval = windowCreationInterval;\n        this.maxWindowSize = maxWindowSize;\n        this.scheduler = scheduler;\n    }\n    WindowTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowTimeSubscriber(subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler));\n    };\n    return WindowTimeOperator;\n}());\nvar CountedSubject = (function (_super) {\n    __extends(CountedSubject, _super);\n    function CountedSubject() {\n        _super.apply(this, arguments);\n        this._numberOfNextedValues = 0;\n    }\n    CountedSubject.prototype.next = function (value) {\n        this._numberOfNextedValues++;\n        _super.prototype.next.call(this, value);\n    };\n    Object.defineProperty(CountedSubject.prototype, \"numberOfNextedValues\", {\n        get: function () {\n            return this._numberOfNextedValues;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return CountedSubject;\n}(Subject_1.Subject));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowTimeSubscriber = (function (_super) {\n    __extends(WindowTimeSubscriber, _super);\n    function WindowTimeSubscriber(destination, windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {\n        _super.call(this, destination);\n        this.destination = destination;\n        this.windowTimeSpan = windowTimeSpan;\n        this.windowCreationInterval = windowCreationInterval;\n        this.maxWindowSize = maxWindowSize;\n        this.scheduler = scheduler;\n        this.windows = [];\n        var window = this.openWindow();\n        if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n            var closeState = { subscriber: this, window: window, context: null };\n            var creationState = { windowTimeSpan: windowTimeSpan, windowCreationInterval: windowCreationInterval, subscriber: this, scheduler: scheduler };\n            this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n            this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n        }\n        else {\n            var timeSpanOnlyState = { subscriber: this, window: window, windowTimeSpan: windowTimeSpan };\n            this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n        }\n    }\n    WindowTimeSubscriber.prototype._next = function (value) {\n        var windows = this.windows;\n        var len = windows.length;\n        for (var i = 0; i < len; i++) {\n            var window_1 = windows[i];\n            if (!window_1.closed) {\n                window_1.next(value);\n                if (window_1.numberOfNextedValues >= this.maxWindowSize) {\n                    this.closeWindow(window_1);\n                }\n            }\n        }\n    };\n    WindowTimeSubscriber.prototype._error = function (err) {\n        var windows = this.windows;\n        while (windows.length > 0) {\n            windows.shift().error(err);\n        }\n        this.destination.error(err);\n    };\n    WindowTimeSubscriber.prototype._complete = function () {\n        var windows = this.windows;\n        while (windows.length > 0) {\n            var window_2 = windows.shift();\n            if (!window_2.closed) {\n                window_2.complete();\n            }\n        }\n        this.destination.complete();\n    };\n    WindowTimeSubscriber.prototype.openWindow = function () {\n        var window = new CountedSubject();\n        this.windows.push(window);\n        var destination = this.destination;\n        destination.next(window);\n        return window;\n    };\n    WindowTimeSubscriber.prototype.closeWindow = function (window) {\n        window.complete();\n        var windows = this.windows;\n        windows.splice(windows.indexOf(window), 1);\n    };\n    return WindowTimeSubscriber;\n}(Subscriber_1.Subscriber));\nfunction dispatchWindowTimeSpanOnly(state) {\n    var subscriber = state.subscriber, windowTimeSpan = state.windowTimeSpan, window = state.window;\n    if (window) {\n        subscriber.closeWindow(window);\n    }\n    state.window = subscriber.openWindow();\n    this.schedule(state, windowTimeSpan);\n}\nfunction dispatchWindowCreation(state) {\n    var windowTimeSpan = state.windowTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler, windowCreationInterval = state.windowCreationInterval;\n    var window = subscriber.openWindow();\n    var action = this;\n    var context = { action: action, subscription: null };\n    var timeSpanState = { subscriber: subscriber, window: window, context: context };\n    context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n    action.add(context.subscription);\n    action.schedule(state, windowCreationInterval);\n}\nfunction dispatchWindowClose(state) {\n    var subscriber = state.subscriber, window = state.window, context = state.context;\n    if (context && context.action && context.subscription) {\n        context.action.remove(context.subscription);\n    }\n    subscriber.closeWindow(window);\n}\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar Subscription_1 = require('../Subscription');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nfunction windowToggle(openings, closingSelector) {\n    return function (source) { return source.lift(new WindowToggleOperator(openings, closingSelector)); };\n}\nexports.windowToggle = windowToggle;\nvar WindowToggleOperator = (function () {\n    function WindowToggleOperator(openings, closingSelector) {\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n    }\n    WindowToggleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));\n    };\n    return WindowToggleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowToggleSubscriber = (function (_super) {\n    __extends(WindowToggleSubscriber, _super);\n    function WindowToggleSubscriber(destination, openings, closingSelector) {\n        _super.call(this, destination);\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n        this.contexts = [];\n        this.add(this.openSubscription = subscribeToResult_1.subscribeToResult(this, openings, openings));\n    }\n    WindowToggleSubscriber.prototype._next = function (value) {\n        var contexts = this.contexts;\n        if (contexts) {\n            var len = contexts.length;\n            for (var i = 0; i < len; i++) {\n                contexts[i].window.next(value);\n            }\n        }\n    };\n    WindowToggleSubscriber.prototype._error = function (err) {\n        var contexts = this.contexts;\n        this.contexts = null;\n        if (contexts) {\n            var len = contexts.length;\n            var index = -1;\n            while (++index < len) {\n                var context = contexts[index];\n                context.window.error(err);\n                context.subscription.unsubscribe();\n            }\n        }\n        _super.prototype._error.call(this, err);\n    };\n    WindowToggleSubscriber.prototype._complete = function () {\n        var contexts = this.contexts;\n        this.contexts = null;\n        if (contexts) {\n            var len = contexts.length;\n            var index = -1;\n            while (++index < len) {\n                var context = contexts[index];\n                context.window.complete();\n                context.subscription.unsubscribe();\n            }\n        }\n        _super.prototype._complete.call(this);\n    };\n    /** @deprecated internal use only */ WindowToggleSubscriber.prototype._unsubscribe = function () {\n        var contexts = this.contexts;\n        this.contexts = null;\n        if (contexts) {\n            var len = contexts.length;\n            var index = -1;\n            while (++index < len) {\n                var context = contexts[index];\n                context.window.unsubscribe();\n                context.subscription.unsubscribe();\n            }\n        }\n    };\n    WindowToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (outerValue === this.openings) {\n            var closingSelector = this.closingSelector;\n            var closingNotifier = tryCatch_1.tryCatch(closingSelector)(innerValue);\n            if (closingNotifier === errorObject_1.errorObject) {\n                return this.error(errorObject_1.errorObject.e);\n            }\n            else {\n                var window_1 = new Subject_1.Subject();\n                var subscription = new Subscription_1.Subscription();\n                var context = { window: window_1, subscription: subscription };\n                this.contexts.push(context);\n                var innerSubscription = subscribeToResult_1.subscribeToResult(this, closingNotifier, context);\n                if (innerSubscription.closed) {\n                    this.closeWindow(this.contexts.length - 1);\n                }\n                else {\n                    innerSubscription.context = context;\n                    subscription.add(innerSubscription);\n                }\n                this.destination.next(window_1);\n            }\n        }\n        else {\n            this.closeWindow(this.contexts.indexOf(outerValue));\n        }\n    };\n    WindowToggleSubscriber.prototype.notifyError = function (err) {\n        this.error(err);\n    };\n    WindowToggleSubscriber.prototype.notifyComplete = function (inner) {\n        if (inner !== this.openSubscription) {\n            this.closeWindow(this.contexts.indexOf(inner.context));\n        }\n    };\n    WindowToggleSubscriber.prototype.closeWindow = function (index) {\n        if (index === -1) {\n            return;\n        }\n        var contexts = this.contexts;\n        var context = contexts[index];\n        var window = context.window, subscription = context.subscription;\n        contexts.splice(index, 1);\n        window.complete();\n        subscription.unsubscribe();\n    };\n    return WindowToggleSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nfunction windowWhen(closingSelector) {\n    return function windowWhenOperatorFunction(source) {\n        return source.lift(new WindowOperator(closingSelector));\n    };\n}\nexports.windowWhen = windowWhen;\nvar WindowOperator = (function () {\n    function WindowOperator(closingSelector) {\n        this.closingSelector = closingSelector;\n    }\n    WindowOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n    };\n    return WindowOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowSubscriber = (function (_super) {\n    __extends(WindowSubscriber, _super);\n    function WindowSubscriber(destination, closingSelector) {\n        _super.call(this, destination);\n        this.destination = destination;\n        this.closingSelector = closingSelector;\n        this.openWindow();\n    }\n    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.openWindow(innerSub);\n    };\n    WindowSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    WindowSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.openWindow(innerSub);\n    };\n    WindowSubscriber.prototype._next = function (value) {\n        this.window.next(value);\n    };\n    WindowSubscriber.prototype._error = function (err) {\n        this.window.error(err);\n        this.destination.error(err);\n        this.unsubscribeClosingNotification();\n    };\n    WindowSubscriber.prototype._complete = function () {\n        this.window.complete();\n        this.destination.complete();\n        this.unsubscribeClosingNotification();\n    };\n    WindowSubscriber.prototype.unsubscribeClosingNotification = function () {\n        if (this.closingNotification) {\n            this.closingNotification.unsubscribe();\n        }\n    };\n    WindowSubscriber.prototype.openWindow = function (innerSub) {\n        if (innerSub === void 0) { innerSub = null; }\n        if (innerSub) {\n            this.remove(innerSub);\n            innerSub.unsubscribe();\n        }\n        var prevWindow = this.window;\n        if (prevWindow) {\n            prevWindow.complete();\n        }\n        var window = this.window = new Subject_1.Subject();\n        this.destination.next(window);\n        var closingNotifier = tryCatch_1.tryCatch(this.closingSelector)();\n        if (closingNotifier === errorObject_1.errorObject) {\n            var err = errorObject_1.errorObject.e;\n            this.destination.error(err);\n            this.window.error(err);\n        }\n        else {\n            this.add(this.closingNotification = subscribeToResult_1.subscribeToResult(this, closingNotifier));\n        }\n    };\n    return WindowSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nfunction withLatestFrom() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i - 0] = arguments[_i];\n    }\n    return function (source) {\n        var project;\n        if (typeof args[args.length - 1] === 'function') {\n            project = args.pop();\n        }\n        var observables = args;\n        return source.lift(new WithLatestFromOperator(observables, project));\n    };\n}\nexports.withLatestFrom = withLatestFrom;\nvar WithLatestFromOperator = (function () {\n    function WithLatestFromOperator(observables, project) {\n        this.observables = observables;\n        this.project = project;\n    }\n    WithLatestFromOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n    };\n    return WithLatestFromOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WithLatestFromSubscriber = (function (_super) {\n    __extends(WithLatestFromSubscriber, _super);\n    function WithLatestFromSubscriber(destination, observables, project) {\n        _super.call(this, destination);\n        this.observables = observables;\n        this.project = project;\n        this.toRespond = [];\n        var len = observables.length;\n        this.values = new Array(len);\n        for (var i = 0; i < len; i++) {\n            this.toRespond.push(i);\n        }\n        for (var i = 0; i < len; i++) {\n            var observable = observables[i];\n            this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));\n        }\n    }\n    WithLatestFromSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values[outerIndex] = innerValue;\n        var toRespond = this.toRespond;\n        if (toRespond.length > 0) {\n            var found = toRespond.indexOf(outerIndex);\n            if (found !== -1) {\n                toRespond.splice(found, 1);\n            }\n        }\n    };\n    WithLatestFromSubscriber.prototype.notifyComplete = function () {\n        // noop\n    };\n    WithLatestFromSubscriber.prototype._next = function (value) {\n        if (this.toRespond.length === 0) {\n            var args = [value].concat(this.values);\n            if (this.project) {\n                this._tryProject(args);\n            }\n            else {\n                this.destination.next(args);\n            }\n        }\n    };\n    WithLatestFromSubscriber.prototype._tryProject = function (args) {\n        var result;\n        try {\n            result = this.project.apply(this, args);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return WithLatestFromSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar ArrayObservable_1 = require('../observable/ArrayObservable');\nvar isArray_1 = require('../util/isArray');\nvar Subscriber_1 = require('../Subscriber');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar iterator_1 = require('../symbol/iterator');\n/* tslint:enable:max-line-length */\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nfunction zip() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return function zipOperatorFunction(source) {\n        return source.lift.call(zipStatic.apply(void 0, [source].concat(observables)));\n    };\n}\nexports.zip = zip;\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\n * of its input Observables.\n *\n * If the latest parameter is a function, this function is used to compute the created value from the input values.\n * Otherwise, an array of the input values is returned.\n *\n * @example <caption>Combine age and name from different sources</caption>\n *\n * let age$ = Observable.of<number>(27, 25, 29);\n * let name$ = Observable.of<string>('Foo', 'Bar', 'Beer');\n * let isDev$ = Observable.of<boolean>(true, true, false);\n *\n * Observable\n *     .zip(age$,\n *          name$,\n *          isDev$,\n *          (age: number, name: string, isDev: boolean) => ({ age, name, isDev }))\n *     .subscribe(x => console.log(x));\n *\n * // outputs\n * // { age: 27, name: 'Foo', isDev: true }\n * // { age: 25, name: 'Bar', isDev: true }\n * // { age: 29, name: 'Beer', isDev: false }\n *\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nfunction zipStatic() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var project = observables[observables.length - 1];\n    if (typeof project === 'function') {\n        observables.pop();\n    }\n    return new ArrayObservable_1.ArrayObservable(observables).lift(new ZipOperator(project));\n}\nexports.zipStatic = zipStatic;\nvar ZipOperator = (function () {\n    function ZipOperator(project) {\n        this.project = project;\n    }\n    ZipOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ZipSubscriber(subscriber, this.project));\n    };\n    return ZipOperator;\n}());\nexports.ZipOperator = ZipOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ZipSubscriber = (function (_super) {\n    __extends(ZipSubscriber, _super);\n    function ZipSubscriber(destination, project, values) {\n        if (values === void 0) { values = Object.create(null); }\n        _super.call(this, destination);\n        this.iterators = [];\n        this.active = 0;\n        this.project = (typeof project === 'function') ? project : null;\n        this.values = values;\n    }\n    ZipSubscriber.prototype._next = function (value) {\n        var iterators = this.iterators;\n        if (isArray_1.isArray(value)) {\n            iterators.push(new StaticArrayIterator(value));\n        }\n        else if (typeof value[iterator_1.iterator] === 'function') {\n            iterators.push(new StaticIterator(value[iterator_1.iterator]()));\n        }\n        else {\n            iterators.push(new ZipBufferIterator(this.destination, this, value));\n        }\n    };\n    ZipSubscriber.prototype._complete = function () {\n        var iterators = this.iterators;\n        var len = iterators.length;\n        if (len === 0) {\n            this.destination.complete();\n            return;\n        }\n        this.active = len;\n        for (var i = 0; i < len; i++) {\n            var iterator = iterators[i];\n            if (iterator.stillUnsubscribed) {\n                this.add(iterator.subscribe(iterator, i));\n            }\n            else {\n                this.active--; // not an observable\n            }\n        }\n    };\n    ZipSubscriber.prototype.notifyInactive = function () {\n        this.active--;\n        if (this.active === 0) {\n            this.destination.complete();\n        }\n    };\n    ZipSubscriber.prototype.checkIterators = function () {\n        var iterators = this.iterators;\n        var len = iterators.length;\n        var destination = this.destination;\n        // abort if not all of them have values\n        for (var i = 0; i < len; i++) {\n            var iterator = iterators[i];\n            if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n                return;\n            }\n        }\n        var shouldComplete = false;\n        var args = [];\n        for (var i = 0; i < len; i++) {\n            var iterator = iterators[i];\n            var result = iterator.next();\n            // check to see if it's completed now that you've gotten\n            // the next value.\n            if (iterator.hasCompleted()) {\n                shouldComplete = true;\n            }\n            if (result.done) {\n                destination.complete();\n                return;\n            }\n            args.push(result.value);\n        }\n        if (this.project) {\n            this._tryProject(args);\n        }\n        else {\n            destination.next(args);\n        }\n        if (shouldComplete) {\n            destination.complete();\n        }\n    };\n    ZipSubscriber.prototype._tryProject = function (args) {\n        var result;\n        try {\n            result = this.project.apply(this, args);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return ZipSubscriber;\n}(Subscriber_1.Subscriber));\nexports.ZipSubscriber = ZipSubscriber;\nvar StaticIterator = (function () {\n    function StaticIterator(iterator) {\n        this.iterator = iterator;\n        this.nextResult = iterator.next();\n    }\n    StaticIterator.prototype.hasValue = function () {\n        return true;\n    };\n    StaticIterator.prototype.next = function () {\n        var result = this.nextResult;\n        this.nextResult = this.iterator.next();\n        return result;\n    };\n    StaticIterator.prototype.hasCompleted = function () {\n        var nextResult = this.nextResult;\n        return nextResult && nextResult.done;\n    };\n    return StaticIterator;\n}());\nvar StaticArrayIterator = (function () {\n    function StaticArrayIterator(array) {\n        this.array = array;\n        this.index = 0;\n        this.length = 0;\n        this.length = array.length;\n    }\n    StaticArrayIterator.prototype[iterator_1.iterator] = function () {\n        return this;\n    };\n    StaticArrayIterator.prototype.next = function (value) {\n        var i = this.index++;\n        var array = this.array;\n        return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n    };\n    StaticArrayIterator.prototype.hasValue = function () {\n        return this.array.length > this.index;\n    };\n    StaticArrayIterator.prototype.hasCompleted = function () {\n        return this.array.length === this.index;\n    };\n    return StaticArrayIterator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ZipBufferIterator = (function (_super) {\n    __extends(ZipBufferIterator, _super);\n    function ZipBufferIterator(destination, parent, observable) {\n        _super.call(this, destination);\n        this.parent = parent;\n        this.observable = observable;\n        this.stillUnsubscribed = true;\n        this.buffer = [];\n        this.isComplete = false;\n    }\n    ZipBufferIterator.prototype[iterator_1.iterator] = function () {\n        return this;\n    };\n    // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n    //    this is legit because `next()` will never be called by a subscription in this case.\n    ZipBufferIterator.prototype.next = function () {\n        var buffer = this.buffer;\n        if (buffer.length === 0 && this.isComplete) {\n            return { value: null, done: true };\n        }\n        else {\n            return { value: buffer.shift(), done: false };\n        }\n    };\n    ZipBufferIterator.prototype.hasValue = function () {\n        return this.buffer.length > 0;\n    };\n    ZipBufferIterator.prototype.hasCompleted = function () {\n        return this.buffer.length === 0 && this.isComplete;\n    };\n    ZipBufferIterator.prototype.notifyComplete = function () {\n        if (this.buffer.length > 0) {\n            this.isComplete = true;\n            this.parent.notifyInactive();\n        }\n        else {\n            this.destination.complete();\n        }\n    };\n    ZipBufferIterator.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.buffer.push(innerValue);\n        this.parent.checkIterators();\n    };\n    ZipBufferIterator.prototype.subscribe = function (value, index) {\n        return subscribeToResult_1.subscribeToResult(this, this.observable, this, index);\n    };\n    return ZipBufferIterator;\n}(OuterSubscriber_1.OuterSubscriber));\n","\"use strict\";\nvar zip_1 = require('./zip');\nfunction zipAll(project) {\n    return function (source) { return source.lift(new zip_1.ZipOperator(project)); };\n}\nexports.zipAll = zipAll;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscription_1 = require('../Subscription');\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nvar Action = (function (_super) {\n    __extends(Action, _super);\n    function Action(scheduler, work) {\n        _super.call(this);\n    }\n    /**\n     * Schedules this action on its parent Scheduler for execution. May be passed\n     * some context object, `state`. May happen at some point in the future,\n     * according to the `delay` parameter, if specified.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler.\n     * @return {void}\n     */\n    Action.prototype.schedule = function (state, delay) {\n        if (delay === void 0) { delay = 0; }\n        return this;\n    };\n    return Action;\n}(Subscription_1.Subscription));\nexports.Action = Action;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AsyncAction_1 = require('./AsyncAction');\nvar AnimationFrame_1 = require('../util/AnimationFrame');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AnimationFrameAction = (function (_super) {\n    __extends(AnimationFrameAction, _super);\n    function AnimationFrameAction(scheduler, work) {\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    AnimationFrameAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If delay is greater than 0, request as an async action.\n        if (delay !== null && delay > 0) {\n            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n        }\n        // Push the action to the end of the scheduler queue.\n        scheduler.actions.push(this);\n        // If an animation frame has already been requested, don't request another\n        // one. If an animation frame hasn't been requested yet, request one. Return\n        // the current animation frame request id.\n        return scheduler.scheduled || (scheduler.scheduled = AnimationFrame_1.AnimationFrame.requestAnimationFrame(scheduler.flush.bind(scheduler, null)));\n    };\n    AnimationFrameAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If delay exists and is greater than 0, or if the delay is null (the\n        // action wasn't rescheduled) but was originally scheduled as an async\n        // action, then recycle as an async action.\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);\n        }\n        // If the scheduler queue is empty, cancel the requested animation frame and\n        // set the scheduled flag to undefined so the next AnimationFrameAction will\n        // request its own.\n        if (scheduler.actions.length === 0) {\n            AnimationFrame_1.AnimationFrame.cancelAnimationFrame(id);\n            scheduler.scheduled = undefined;\n        }\n        // Return undefined so the action knows to request a new async id if it's rescheduled.\n        return undefined;\n    };\n    return AnimationFrameAction;\n}(AsyncAction_1.AsyncAction));\nexports.AnimationFrameAction = AnimationFrameAction;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AsyncScheduler_1 = require('./AsyncScheduler');\nvar AnimationFrameScheduler = (function (_super) {\n    __extends(AnimationFrameScheduler, _super);\n    function AnimationFrameScheduler() {\n        _super.apply(this, arguments);\n    }\n    AnimationFrameScheduler.prototype.flush = function (action) {\n        this.active = true;\n        this.scheduled = undefined;\n        var actions = this.actions;\n        var error;\n        var index = -1;\n        var count = actions.length;\n        action = action || actions.shift();\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (++index < count && (action = actions.shift()));\n        this.active = false;\n        if (error) {\n            while (++index < count && (action = actions.shift())) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AnimationFrameScheduler;\n}(AsyncScheduler_1.AsyncScheduler));\nexports.AnimationFrameScheduler = AnimationFrameScheduler;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Immediate_1 = require('../util/Immediate');\nvar AsyncAction_1 = require('./AsyncAction');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AsapAction = (function (_super) {\n    __extends(AsapAction, _super);\n    function AsapAction(scheduler, work) {\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If delay is greater than 0, request as an async action.\n        if (delay !== null && delay > 0) {\n            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n        }\n        // Push the action to the end of the scheduler queue.\n        scheduler.actions.push(this);\n        // If a microtask has already been scheduled, don't schedule another\n        // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n        // the current scheduled microtask id.\n        return scheduler.scheduled || (scheduler.scheduled = Immediate_1.Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));\n    };\n    AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If delay exists and is greater than 0, or if the delay is null (the\n        // action wasn't rescheduled) but was originally scheduled as an async\n        // action, then recycle as an async action.\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);\n        }\n        // If the scheduler queue is empty, cancel the requested microtask and\n        // set the scheduled flag to undefined so the next AsapAction will schedule\n        // its own.\n        if (scheduler.actions.length === 0) {\n            Immediate_1.Immediate.clearImmediate(id);\n            scheduler.scheduled = undefined;\n        }\n        // Return undefined so the action knows to request a new async id if it's rescheduled.\n        return undefined;\n    };\n    return AsapAction;\n}(AsyncAction_1.AsyncAction));\nexports.AsapAction = AsapAction;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AsyncScheduler_1 = require('./AsyncScheduler');\nvar AsapScheduler = (function (_super) {\n    __extends(AsapScheduler, _super);\n    function AsapScheduler() {\n        _super.apply(this, arguments);\n    }\n    AsapScheduler.prototype.flush = function (action) {\n        this.active = true;\n        this.scheduled = undefined;\n        var actions = this.actions;\n        var error;\n        var index = -1;\n        var count = actions.length;\n        action = action || actions.shift();\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (++index < count && (action = actions.shift()));\n        this.active = false;\n        if (error) {\n            while (++index < count && (action = actions.shift())) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AsapScheduler;\n}(AsyncScheduler_1.AsyncScheduler));\nexports.AsapScheduler = AsapScheduler;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar root_1 = require('../util/root');\nvar Action_1 = require('./Action');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AsyncAction = (function (_super) {\n    __extends(AsyncAction, _super);\n    function AsyncAction(scheduler, work) {\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.pending = false;\n        this.work = work;\n    }\n    AsyncAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) { delay = 0; }\n        if (this.closed) {\n            return this;\n        }\n        // Always replace the current state with the new state.\n        this.state = state;\n        // Set the pending flag indicating that this action has been scheduled, or\n        // has recursively rescheduled itself.\n        this.pending = true;\n        var id = this.id;\n        var scheduler = this.scheduler;\n        //\n        // Important implementation note:\n        //\n        // Actions only execute once by default, unless rescheduled from within the\n        // scheduled callback. This allows us to implement single and repeat\n        // actions via the same code path, without adding API surface area, as well\n        // as mimic traditional recursion but across asynchronous boundaries.\n        //\n        // However, JS runtimes and timers distinguish between intervals achieved by\n        // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n        // serial `setTimeout` calls can be individually delayed, which delays\n        // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n        // guarantee the interval callback will be invoked more precisely to the\n        // interval period, regardless of load.\n        //\n        // Therefore, we use `setInterval` to schedule single and repeat actions.\n        // If the action reschedules itself with the same delay, the interval is not\n        // canceled. If the action doesn't reschedule, or reschedules with a\n        // different delay, the interval will be canceled after scheduled callback\n        // execution.\n        //\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, delay);\n        }\n        this.delay = delay;\n        // If this action has already an async Id, don't request a new one.\n        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n        return this;\n    };\n    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        return root_1.root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n    };\n    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If this action is rescheduled with the same delay time, don't clear the interval id.\n        if (delay !== null && this.delay === delay && this.pending === false) {\n            return id;\n        }\n        // Otherwise, if the action's delay time is different from the current delay,\n        // or the action has been rescheduled before it's executed, clear the interval id\n        return root_1.root.clearInterval(id) && undefined || undefined;\n    };\n    /**\n     * Immediately executes this action and the `work` it contains.\n     * @return {any}\n     */\n    AsyncAction.prototype.execute = function (state, delay) {\n        if (this.closed) {\n            return new Error('executing a cancelled action');\n        }\n        this.pending = false;\n        var error = this._execute(state, delay);\n        if (error) {\n            return error;\n        }\n        else if (this.pending === false && this.id != null) {\n            // Dequeue if the action didn't reschedule itself. Don't call\n            // unsubscribe(), because the action could reschedule later.\n            // For example:\n            // ```\n            // scheduler.schedule(function doWork(counter) {\n            //   /* ... I'm a busy worker bee ... */\n            //   var originalAction = this;\n            //   /* wait 100ms before rescheduling the action */\n            //   setTimeout(function () {\n            //     originalAction.schedule(counter + 1);\n            //   }, 100);\n            // }, 1000);\n            // ```\n            this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n        }\n    };\n    AsyncAction.prototype._execute = function (state, delay) {\n        var errored = false;\n        var errorValue = undefined;\n        try {\n            this.work(state);\n        }\n        catch (e) {\n            errored = true;\n            errorValue = !!e && e || new Error(e);\n        }\n        if (errored) {\n            this.unsubscribe();\n            return errorValue;\n        }\n    };\n    /** @deprecated internal use only */ AsyncAction.prototype._unsubscribe = function () {\n        var id = this.id;\n        var scheduler = this.scheduler;\n        var actions = scheduler.actions;\n        var index = actions.indexOf(this);\n        this.work = null;\n        this.state = null;\n        this.pending = false;\n        this.scheduler = null;\n        if (index !== -1) {\n            actions.splice(index, 1);\n        }\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, null);\n        }\n        this.delay = null;\n    };\n    return AsyncAction;\n}(Action_1.Action));\nexports.AsyncAction = AsyncAction;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Scheduler_1 = require('../Scheduler');\nvar AsyncScheduler = (function (_super) {\n    __extends(AsyncScheduler, _super);\n    function AsyncScheduler() {\n        _super.apply(this, arguments);\n        this.actions = [];\n        /**\n         * A flag to indicate whether the Scheduler is currently executing a batch of\n         * queued actions.\n         * @type {boolean}\n         */\n        this.active = false;\n        /**\n         * An internal ID used to track the latest asynchronous task such as those\n         * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n         * others.\n         * @type {any}\n         */\n        this.scheduled = undefined;\n    }\n    AsyncScheduler.prototype.flush = function (action) {\n        var actions = this.actions;\n        if (this.active) {\n            actions.push(action);\n            return;\n        }\n        var error;\n        this.active = true;\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (action = actions.shift()); // exhaust the scheduler queue\n        this.active = false;\n        if (error) {\n            while (action = actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AsyncScheduler;\n}(Scheduler_1.Scheduler));\nexports.AsyncScheduler = AsyncScheduler;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AsyncAction_1 = require('./AsyncAction');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar QueueAction = (function (_super) {\n    __extends(QueueAction, _super);\n    function QueueAction(scheduler, work) {\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    QueueAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) { delay = 0; }\n        if (delay > 0) {\n            return _super.prototype.schedule.call(this, state, delay);\n        }\n        this.delay = delay;\n        this.state = state;\n        this.scheduler.flush(this);\n        return this;\n    };\n    QueueAction.prototype.execute = function (state, delay) {\n        return (delay > 0 || this.closed) ?\n            _super.prototype.execute.call(this, state, delay) :\n            this._execute(state, delay);\n    };\n    QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If delay exists and is greater than 0, or if the delay is null (the\n        // action wasn't rescheduled) but was originally scheduled as an async\n        // action, then recycle as an async action.\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n        }\n        // Otherwise flush the scheduler starting with this action.\n        return scheduler.flush(this);\n    };\n    return QueueAction;\n}(AsyncAction_1.AsyncAction));\nexports.QueueAction = QueueAction;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AsyncScheduler_1 = require('./AsyncScheduler');\nvar QueueScheduler = (function (_super) {\n    __extends(QueueScheduler, _super);\n    function QueueScheduler() {\n        _super.apply(this, arguments);\n    }\n    return QueueScheduler;\n}(AsyncScheduler_1.AsyncScheduler));\nexports.QueueScheduler = QueueScheduler;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AsyncAction_1 = require('./AsyncAction');\nvar AsyncScheduler_1 = require('./AsyncScheduler');\nvar VirtualTimeScheduler = (function (_super) {\n    __extends(VirtualTimeScheduler, _super);\n    function VirtualTimeScheduler(SchedulerAction, maxFrames) {\n        var _this = this;\n        if (SchedulerAction === void 0) { SchedulerAction = VirtualAction; }\n        if (maxFrames === void 0) { maxFrames = Number.POSITIVE_INFINITY; }\n        _super.call(this, SchedulerAction, function () { return _this.frame; });\n        this.maxFrames = maxFrames;\n        this.frame = 0;\n        this.index = -1;\n    }\n    /**\n     * Prompt the Scheduler to execute all of its queued actions, therefore\n     * clearing its queue.\n     * @return {void}\n     */\n    VirtualTimeScheduler.prototype.flush = function () {\n        var _a = this, actions = _a.actions, maxFrames = _a.maxFrames;\n        var error, action;\n        while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        }\n        if (error) {\n            while (action = actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    VirtualTimeScheduler.frameTimeFactor = 10;\n    return VirtualTimeScheduler;\n}(AsyncScheduler_1.AsyncScheduler));\nexports.VirtualTimeScheduler = VirtualTimeScheduler;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar VirtualAction = (function (_super) {\n    __extends(VirtualAction, _super);\n    function VirtualAction(scheduler, work, index) {\n        if (index === void 0) { index = scheduler.index += 1; }\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n        this.index = index;\n        this.active = true;\n        this.index = scheduler.index = index;\n    }\n    VirtualAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) { delay = 0; }\n        if (!this.id) {\n            return _super.prototype.schedule.call(this, state, delay);\n        }\n        this.active = false;\n        // If an action is rescheduled, we save allocations by mutating its state,\n        // pushing it to the end of the scheduler queue, and recycling the action.\n        // But since the VirtualTimeScheduler is used for testing, VirtualActions\n        // must be immutable so they can be inspected later.\n        var action = new VirtualAction(this.scheduler, this.work);\n        this.add(action);\n        return action.schedule(state, delay);\n    };\n    VirtualAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        this.delay = scheduler.frame + delay;\n        var actions = scheduler.actions;\n        actions.push(this);\n        actions.sort(VirtualAction.sortActions);\n        return true;\n    };\n    VirtualAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        return undefined;\n    };\n    VirtualAction.prototype._execute = function (state, delay) {\n        if (this.active === true) {\n            return _super.prototype._execute.call(this, state, delay);\n        }\n    };\n    VirtualAction.sortActions = function (a, b) {\n        if (a.delay === b.delay) {\n            if (a.index === b.index) {\n                return 0;\n            }\n            else if (a.index > b.index) {\n                return 1;\n            }\n            else {\n                return -1;\n            }\n        }\n        else if (a.delay > b.delay) {\n            return 1;\n        }\n        else {\n            return -1;\n        }\n    };\n    return VirtualAction;\n}(AsyncAction_1.AsyncAction));\nexports.VirtualAction = VirtualAction;\n","\"use strict\";\nvar AnimationFrameAction_1 = require('./AnimationFrameAction');\nvar AnimationFrameScheduler_1 = require('./AnimationFrameScheduler');\n/**\n *\n * Animation Frame Scheduler\n *\n * <span class=\"informal\">Perform task when `window.requestAnimationFrame` would fire</span>\n *\n * When `animationFrame` scheduler is used with delay, it will fall back to {@link async} scheduler\n * behaviour.\n *\n * Without delay, `animationFrame` scheduler can be used to create smooth browser animations.\n * It makes sure scheduled task will happen just before next browser content repaint,\n * thus performing animations as efficiently as possible.\n *\n * @example <caption>Schedule div height animation</caption>\n * const div = document.querySelector('.some-div');\n *\n * Rx.Scheduler.schedule(function(height) {\n *   div.style.height = height + \"px\";\n *\n *   this.schedule(height + 1);  // `this` references currently executing Action,\n *                               // which we reschedule with new state\n * }, 0, 0);\n *\n * // You will see .some-div element growing in height\n *\n *\n * @static true\n * @name animationFrame\n * @owner Scheduler\n */\nexports.animationFrame = new AnimationFrameScheduler_1.AnimationFrameScheduler(AnimationFrameAction_1.AnimationFrameAction);\n","\"use strict\";\nvar AsapAction_1 = require('./AsapAction');\nvar AsapScheduler_1 = require('./AsapScheduler');\n/**\n *\n * Asap Scheduler\n *\n * <span class=\"informal\">Perform task as fast as it can be performed asynchronously</span>\n *\n * `asap` scheduler behaves the same as {@link async} scheduler when you use it to delay task\n * in time. If however you set delay to `0`, `asap` will wait for current synchronously executing\n * code to end and then it will try to execute given task as fast as possible.\n *\n * `asap` scheduler will do its best to minimize time between end of currently executing code\n * and start of scheduled task. This makes it best candidate for performing so called \"deferring\".\n * Traditionally this was achieved by calling `setTimeout(deferredTask, 0)`, but that technique involves\n * some (although minimal) unwanted delay.\n *\n * Note that using `asap` scheduler does not necessarily mean that your task will be first to process\n * after currently executing code. In particular, if some task was also scheduled with `asap` before,\n * that task will execute first. That being said, if you need to schedule task asynchronously, but\n * as soon as possible, `asap` scheduler is your best bet.\n *\n * @example <caption>Compare async and asap scheduler</caption>\n *\n * Rx.Scheduler.async.schedule(() => console.log('async')); // scheduling 'async' first...\n * Rx.Scheduler.asap.schedule(() => console.log('asap'));\n *\n * // Logs:\n * // \"asap\"\n * // \"async\"\n * // ... but 'asap' goes first!\n *\n * @static true\n * @name asap\n * @owner Scheduler\n */\nexports.asap = new AsapScheduler_1.AsapScheduler(AsapAction_1.AsapAction);\n","\"use strict\";\nvar AsyncAction_1 = require('./AsyncAction');\nvar AsyncScheduler_1 = require('./AsyncScheduler');\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asap} scheduler.\n *\n * @example <caption>Use async scheduler to delay task</caption>\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n *\n *\n * @example <caption>Use async scheduler to repeat task in intervals</caption>\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\nexports.async = new AsyncScheduler_1.AsyncScheduler(AsyncAction_1.AsyncAction);\n","\"use strict\";\nvar QueueAction_1 = require('./QueueAction');\nvar QueueScheduler_1 = require('./QueueScheduler');\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * @examples <caption>Schedule recursively first, then do something</caption>\n *\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n *\n *\n * @example <caption>Reschedule itself recursively</caption>\n *\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n *\n *\n * @static true\n * @name queue\n * @owner Scheduler\n */\nexports.queue = new QueueScheduler_1.QueueScheduler(QueueAction_1.QueueAction);\n","\"use strict\";\nvar root_1 = require('../util/root');\nfunction symbolIteratorPonyfill(root) {\n    var Symbol = root.Symbol;\n    if (typeof Symbol === 'function') {\n        if (!Symbol.iterator) {\n            Symbol.iterator = Symbol('iterator polyfill');\n        }\n        return Symbol.iterator;\n    }\n    else {\n        // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n        var Set_1 = root.Set;\n        if (Set_1 && typeof new Set_1()['@@iterator'] === 'function') {\n            return '@@iterator';\n        }\n        var Map_1 = root.Map;\n        // required for compatability with es6-shim\n        if (Map_1) {\n            var keys = Object.getOwnPropertyNames(Map_1.prototype);\n            for (var i = 0; i < keys.length; ++i) {\n                var key = keys[i];\n                // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n                if (key !== 'entries' && key !== 'size' && Map_1.prototype[key] === Map_1.prototype['entries']) {\n                    return key;\n                }\n            }\n        }\n        return '@@iterator';\n    }\n}\nexports.symbolIteratorPonyfill = symbolIteratorPonyfill;\nexports.iterator = symbolIteratorPonyfill(root_1.root);\n/**\n * @deprecated use iterator instead\n */\nexports.$$iterator = exports.iterator;\n","\"use strict\";\nvar root_1 = require('../util/root');\nfunction getSymbolObservable(context) {\n    var $$observable;\n    var Symbol = context.Symbol;\n    if (typeof Symbol === 'function') {\n        if (Symbol.observable) {\n            $$observable = Symbol.observable;\n        }\n        else {\n            $$observable = Symbol('observable');\n            Symbol.observable = $$observable;\n        }\n    }\n    else {\n        $$observable = '@@observable';\n    }\n    return $$observable;\n}\nexports.getSymbolObservable = getSymbolObservable;\nexports.observable = getSymbolObservable(root_1.root);\n/**\n * @deprecated use observable instead\n */\nexports.$$observable = exports.observable;\n","\"use strict\";\nvar root_1 = require('../util/root');\nvar Symbol = root_1.root.Symbol;\nexports.rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n    Symbol.for('rxSubscriber') : '@@rxSubscriber';\n/**\n * @deprecated use rxSubscriber instead\n */\nexports.$$rxSubscriber = exports.rxSubscriber;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar Subscription_1 = require('../Subscription');\nvar SubscriptionLoggable_1 = require('./SubscriptionLoggable');\nvar applyMixins_1 = require('../util/applyMixins');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ColdObservable = (function (_super) {\n    __extends(ColdObservable, _super);\n    function ColdObservable(messages, scheduler) {\n        _super.call(this, function (subscriber) {\n            var observable = this;\n            var index = observable.logSubscribedFrame();\n            subscriber.add(new Subscription_1.Subscription(function () {\n                observable.logUnsubscribedFrame(index);\n            }));\n            observable.scheduleMessages(subscriber);\n            return subscriber;\n        });\n        this.messages = messages;\n        this.subscriptions = [];\n        this.scheduler = scheduler;\n    }\n    ColdObservable.prototype.scheduleMessages = function (subscriber) {\n        var messagesLength = this.messages.length;\n        for (var i = 0; i < messagesLength; i++) {\n            var message = this.messages[i];\n            subscriber.add(this.scheduler.schedule(function (_a) {\n                var message = _a.message, subscriber = _a.subscriber;\n                message.notification.observe(subscriber);\n            }, message.frame, { message: message, subscriber: subscriber }));\n        }\n    };\n    return ColdObservable;\n}(Observable_1.Observable));\nexports.ColdObservable = ColdObservable;\napplyMixins_1.applyMixins(ColdObservable, [SubscriptionLoggable_1.SubscriptionLoggable]);\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar Subscription_1 = require('../Subscription');\nvar SubscriptionLoggable_1 = require('./SubscriptionLoggable');\nvar applyMixins_1 = require('../util/applyMixins');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar HotObservable = (function (_super) {\n    __extends(HotObservable, _super);\n    function HotObservable(messages, scheduler) {\n        _super.call(this);\n        this.messages = messages;\n        this.subscriptions = [];\n        this.scheduler = scheduler;\n    }\n    /** @deprecated internal use only */ HotObservable.prototype._subscribe = function (subscriber) {\n        var subject = this;\n        var index = subject.logSubscribedFrame();\n        subscriber.add(new Subscription_1.Subscription(function () {\n            subject.logUnsubscribedFrame(index);\n        }));\n        return _super.prototype._subscribe.call(this, subscriber);\n    };\n    HotObservable.prototype.setup = function () {\n        var subject = this;\n        var messagesLength = subject.messages.length;\n        /* tslint:disable:no-var-keyword */\n        for (var i = 0; i < messagesLength; i++) {\n            (function () {\n                var message = subject.messages[i];\n                /* tslint:enable */\n                subject.scheduler.schedule(function () { message.notification.observe(subject); }, message.frame);\n            })();\n        }\n    };\n    return HotObservable;\n}(Subject_1.Subject));\nexports.HotObservable = HotObservable;\napplyMixins_1.applyMixins(HotObservable, [SubscriptionLoggable_1.SubscriptionLoggable]);\n","\"use strict\";\nvar SubscriptionLog = (function () {\n    function SubscriptionLog(subscribedFrame, unsubscribedFrame) {\n        if (unsubscribedFrame === void 0) { unsubscribedFrame = Number.POSITIVE_INFINITY; }\n        this.subscribedFrame = subscribedFrame;\n        this.unsubscribedFrame = unsubscribedFrame;\n    }\n    return SubscriptionLog;\n}());\nexports.SubscriptionLog = SubscriptionLog;\n","\"use strict\";\nvar SubscriptionLog_1 = require('./SubscriptionLog');\nvar SubscriptionLoggable = (function () {\n    function SubscriptionLoggable() {\n        this.subscriptions = [];\n    }\n    SubscriptionLoggable.prototype.logSubscribedFrame = function () {\n        this.subscriptions.push(new SubscriptionLog_1.SubscriptionLog(this.scheduler.now()));\n        return this.subscriptions.length - 1;\n    };\n    SubscriptionLoggable.prototype.logUnsubscribedFrame = function (index) {\n        var subscriptionLogs = this.subscriptions;\n        var oldSubscriptionLog = subscriptionLogs[index];\n        subscriptionLogs[index] = new SubscriptionLog_1.SubscriptionLog(oldSubscriptionLog.subscribedFrame, this.scheduler.now());\n    };\n    return SubscriptionLoggable;\n}());\nexports.SubscriptionLoggable = SubscriptionLoggable;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar Notification_1 = require('../Notification');\nvar ColdObservable_1 = require('./ColdObservable');\nvar HotObservable_1 = require('./HotObservable');\nvar SubscriptionLog_1 = require('./SubscriptionLog');\nvar VirtualTimeScheduler_1 = require('../scheduler/VirtualTimeScheduler');\nvar defaultMaxFrame = 750;\nvar TestScheduler = (function (_super) {\n    __extends(TestScheduler, _super);\n    function TestScheduler(assertDeepEqual) {\n        _super.call(this, VirtualTimeScheduler_1.VirtualAction, defaultMaxFrame);\n        this.assertDeepEqual = assertDeepEqual;\n        this.hotObservables = [];\n        this.coldObservables = [];\n        this.flushTests = [];\n    }\n    TestScheduler.prototype.createTime = function (marbles) {\n        var indexOf = marbles.indexOf('|');\n        if (indexOf === -1) {\n            throw new Error('marble diagram for time should have a completion marker \"|\"');\n        }\n        return indexOf * TestScheduler.frameTimeFactor;\n    };\n    TestScheduler.prototype.createColdObservable = function (marbles, values, error) {\n        if (marbles.indexOf('^') !== -1) {\n            throw new Error('cold observable cannot have subscription offset \"^\"');\n        }\n        if (marbles.indexOf('!') !== -1) {\n            throw new Error('cold observable cannot have unsubscription marker \"!\"');\n        }\n        var messages = TestScheduler.parseMarbles(marbles, values, error);\n        var cold = new ColdObservable_1.ColdObservable(messages, this);\n        this.coldObservables.push(cold);\n        return cold;\n    };\n    TestScheduler.prototype.createHotObservable = function (marbles, values, error) {\n        if (marbles.indexOf('!') !== -1) {\n            throw new Error('hot observable cannot have unsubscription marker \"!\"');\n        }\n        var messages = TestScheduler.parseMarbles(marbles, values, error);\n        var subject = new HotObservable_1.HotObservable(messages, this);\n        this.hotObservables.push(subject);\n        return subject;\n    };\n    TestScheduler.prototype.materializeInnerObservable = function (observable, outerFrame) {\n        var _this = this;\n        var messages = [];\n        observable.subscribe(function (value) {\n            messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createNext(value) });\n        }, function (err) {\n            messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createError(err) });\n        }, function () {\n            messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createComplete() });\n        });\n        return messages;\n    };\n    TestScheduler.prototype.expectObservable = function (observable, unsubscriptionMarbles) {\n        var _this = this;\n        if (unsubscriptionMarbles === void 0) { unsubscriptionMarbles = null; }\n        var actual = [];\n        var flushTest = { actual: actual, ready: false };\n        var unsubscriptionFrame = TestScheduler\n            .parseMarblesAsSubscriptions(unsubscriptionMarbles).unsubscribedFrame;\n        var subscription;\n        this.schedule(function () {\n            subscription = observable.subscribe(function (x) {\n                var value = x;\n                // Support Observable-of-Observables\n                if (x instanceof Observable_1.Observable) {\n                    value = _this.materializeInnerObservable(value, _this.frame);\n                }\n                actual.push({ frame: _this.frame, notification: Notification_1.Notification.createNext(value) });\n            }, function (err) {\n                actual.push({ frame: _this.frame, notification: Notification_1.Notification.createError(err) });\n            }, function () {\n                actual.push({ frame: _this.frame, notification: Notification_1.Notification.createComplete() });\n            });\n        }, 0);\n        if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n            this.schedule(function () { return subscription.unsubscribe(); }, unsubscriptionFrame);\n        }\n        this.flushTests.push(flushTest);\n        return {\n            toBe: function (marbles, values, errorValue) {\n                flushTest.ready = true;\n                flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true);\n            }\n        };\n    };\n    TestScheduler.prototype.expectSubscriptions = function (actualSubscriptionLogs) {\n        var flushTest = { actual: actualSubscriptionLogs, ready: false };\n        this.flushTests.push(flushTest);\n        return {\n            toBe: function (marbles) {\n                var marblesArray = (typeof marbles === 'string') ? [marbles] : marbles;\n                flushTest.ready = true;\n                flushTest.expected = marblesArray.map(function (marbles) {\n                    return TestScheduler.parseMarblesAsSubscriptions(marbles);\n                });\n            }\n        };\n    };\n    TestScheduler.prototype.flush = function () {\n        var hotObservables = this.hotObservables;\n        while (hotObservables.length > 0) {\n            hotObservables.shift().setup();\n        }\n        _super.prototype.flush.call(this);\n        var readyFlushTests = this.flushTests.filter(function (test) { return test.ready; });\n        while (readyFlushTests.length > 0) {\n            var test = readyFlushTests.shift();\n            this.assertDeepEqual(test.actual, test.expected);\n        }\n    };\n    TestScheduler.parseMarblesAsSubscriptions = function (marbles) {\n        if (typeof marbles !== 'string') {\n            return new SubscriptionLog_1.SubscriptionLog(Number.POSITIVE_INFINITY);\n        }\n        var len = marbles.length;\n        var groupStart = -1;\n        var subscriptionFrame = Number.POSITIVE_INFINITY;\n        var unsubscriptionFrame = Number.POSITIVE_INFINITY;\n        for (var i = 0; i < len; i++) {\n            var frame = i * this.frameTimeFactor;\n            var c = marbles[i];\n            switch (c) {\n                case '-':\n                case ' ':\n                    break;\n                case '(':\n                    groupStart = frame;\n                    break;\n                case ')':\n                    groupStart = -1;\n                    break;\n                case '^':\n                    if (subscriptionFrame !== Number.POSITIVE_INFINITY) {\n                        throw new Error('found a second subscription point \\'^\\' in a ' +\n                            'subscription marble diagram. There can only be one.');\n                    }\n                    subscriptionFrame = groupStart > -1 ? groupStart : frame;\n                    break;\n                case '!':\n                    if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n                        throw new Error('found a second subscription point \\'^\\' in a ' +\n                            'subscription marble diagram. There can only be one.');\n                    }\n                    unsubscriptionFrame = groupStart > -1 ? groupStart : frame;\n                    break;\n                default:\n                    throw new Error('there can only be \\'^\\' and \\'!\\' markers in a ' +\n                        'subscription marble diagram. Found instead \\'' + c + '\\'.');\n            }\n        }\n        if (unsubscriptionFrame < 0) {\n            return new SubscriptionLog_1.SubscriptionLog(subscriptionFrame);\n        }\n        else {\n            return new SubscriptionLog_1.SubscriptionLog(subscriptionFrame, unsubscriptionFrame);\n        }\n    };\n    TestScheduler.parseMarbles = function (marbles, values, errorValue, materializeInnerObservables) {\n        if (materializeInnerObservables === void 0) { materializeInnerObservables = false; }\n        if (marbles.indexOf('!') !== -1) {\n            throw new Error('conventional marble diagrams cannot have the ' +\n                'unsubscription marker \"!\"');\n        }\n        var len = marbles.length;\n        var testMessages = [];\n        var subIndex = marbles.indexOf('^');\n        var frameOffset = subIndex === -1 ? 0 : (subIndex * -this.frameTimeFactor);\n        var getValue = typeof values !== 'object' ?\n            function (x) { return x; } :\n            function (x) {\n                // Support Observable-of-Observables\n                if (materializeInnerObservables && values[x] instanceof ColdObservable_1.ColdObservable) {\n                    return values[x].messages;\n                }\n                return values[x];\n            };\n        var groupStart = -1;\n        for (var i = 0; i < len; i++) {\n            var frame = i * this.frameTimeFactor + frameOffset;\n            var notification = void 0;\n            var c = marbles[i];\n            switch (c) {\n                case '-':\n                case ' ':\n                    break;\n                case '(':\n                    groupStart = frame;\n                    break;\n                case ')':\n                    groupStart = -1;\n                    break;\n                case '|':\n                    notification = Notification_1.Notification.createComplete();\n                    break;\n                case '^':\n                    break;\n                case '#':\n                    notification = Notification_1.Notification.createError(errorValue || 'error');\n                    break;\n                default:\n                    notification = Notification_1.Notification.createNext(getValue(c));\n                    break;\n            }\n            if (notification) {\n                testMessages.push({ frame: groupStart > -1 ? groupStart : frame, notification: notification });\n            }\n        }\n        return testMessages;\n    };\n    return TestScheduler;\n}(VirtualTimeScheduler_1.VirtualTimeScheduler));\nexports.TestScheduler = TestScheduler;\n","\"use strict\";\nvar root_1 = require('./root');\nvar RequestAnimationFrameDefinition = (function () {\n    function RequestAnimationFrameDefinition(root) {\n        if (root.requestAnimationFrame) {\n            this.cancelAnimationFrame = root.cancelAnimationFrame.bind(root);\n            this.requestAnimationFrame = root.requestAnimationFrame.bind(root);\n        }\n        else if (root.mozRequestAnimationFrame) {\n            this.cancelAnimationFrame = root.mozCancelAnimationFrame.bind(root);\n            this.requestAnimationFrame = root.mozRequestAnimationFrame.bind(root);\n        }\n        else if (root.webkitRequestAnimationFrame) {\n            this.cancelAnimationFrame = root.webkitCancelAnimationFrame.bind(root);\n            this.requestAnimationFrame = root.webkitRequestAnimationFrame.bind(root);\n        }\n        else if (root.msRequestAnimationFrame) {\n            this.cancelAnimationFrame = root.msCancelAnimationFrame.bind(root);\n            this.requestAnimationFrame = root.msRequestAnimationFrame.bind(root);\n        }\n        else if (root.oRequestAnimationFrame) {\n            this.cancelAnimationFrame = root.oCancelAnimationFrame.bind(root);\n            this.requestAnimationFrame = root.oRequestAnimationFrame.bind(root);\n        }\n        else {\n            this.cancelAnimationFrame = root.clearTimeout.bind(root);\n            this.requestAnimationFrame = function (cb) { return root.setTimeout(cb, 1000 / 60); };\n        }\n    }\n    return RequestAnimationFrameDefinition;\n}());\nexports.RequestAnimationFrameDefinition = RequestAnimationFrameDefinition;\nexports.AnimationFrame = new RequestAnimationFrameDefinition(root_1.root);\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nvar ArgumentOutOfRangeError = (function (_super) {\n    __extends(ArgumentOutOfRangeError, _super);\n    function ArgumentOutOfRangeError() {\n        var err = _super.call(this, 'argument out of range');\n        this.name = err.name = 'ArgumentOutOfRangeError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return ArgumentOutOfRangeError;\n}(Error));\nexports.ArgumentOutOfRangeError = ArgumentOutOfRangeError;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nvar EmptyError = (function (_super) {\n    __extends(EmptyError, _super);\n    function EmptyError() {\n        var err = _super.call(this, 'no elements in sequence');\n        this.name = err.name = 'EmptyError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return EmptyError;\n}(Error));\nexports.EmptyError = EmptyError;\n","\"use strict\";\nvar FastMap = (function () {\n    function FastMap() {\n        this.values = {};\n    }\n    FastMap.prototype.delete = function (key) {\n        this.values[key] = null;\n        return true;\n    };\n    FastMap.prototype.set = function (key, value) {\n        this.values[key] = value;\n        return this;\n    };\n    FastMap.prototype.get = function (key) {\n        return this.values[key];\n    };\n    FastMap.prototype.forEach = function (cb, thisArg) {\n        var values = this.values;\n        for (var key in values) {\n            if (values.hasOwnProperty(key) && values[key] !== null) {\n                cb.call(thisArg, values[key], key);\n            }\n        }\n    };\n    FastMap.prototype.clear = function () {\n        this.values = {};\n    };\n    return FastMap;\n}());\nexports.FastMap = FastMap;\n","/**\nSome credit for this helper goes to http://github.com/YuzuJS/setImmediate\n*/\n\"use strict\";\nvar root_1 = require('./root');\nvar ImmediateDefinition = (function () {\n    function ImmediateDefinition(root) {\n        this.root = root;\n        if (root.setImmediate && typeof root.setImmediate === 'function') {\n            this.setImmediate = root.setImmediate.bind(root);\n            this.clearImmediate = root.clearImmediate.bind(root);\n        }\n        else {\n            this.nextHandle = 1;\n            this.tasksByHandle = {};\n            this.currentlyRunningATask = false;\n            // Don't get fooled by e.g. browserify environments.\n            if (this.canUseProcessNextTick()) {\n                // For Node.js before 0.9\n                this.setImmediate = this.createProcessNextTickSetImmediate();\n            }\n            else if (this.canUsePostMessage()) {\n                // For non-IE10 modern browsers\n                this.setImmediate = this.createPostMessageSetImmediate();\n            }\n            else if (this.canUseMessageChannel()) {\n                // For web workers, where supported\n                this.setImmediate = this.createMessageChannelSetImmediate();\n            }\n            else if (this.canUseReadyStateChange()) {\n                // For IE 6–8\n                this.setImmediate = this.createReadyStateChangeSetImmediate();\n            }\n            else {\n                // For older browsers\n                this.setImmediate = this.createSetTimeoutSetImmediate();\n            }\n            var ci = function clearImmediate(handle) {\n                delete clearImmediate.instance.tasksByHandle[handle];\n            };\n            ci.instance = this;\n            this.clearImmediate = ci;\n        }\n    }\n    ImmediateDefinition.prototype.identify = function (o) {\n        return this.root.Object.prototype.toString.call(o);\n    };\n    ImmediateDefinition.prototype.canUseProcessNextTick = function () {\n        return this.identify(this.root.process) === '[object process]';\n    };\n    ImmediateDefinition.prototype.canUseMessageChannel = function () {\n        return Boolean(this.root.MessageChannel);\n    };\n    ImmediateDefinition.prototype.canUseReadyStateChange = function () {\n        var document = this.root.document;\n        return Boolean(document && 'onreadystatechange' in document.createElement('script'));\n    };\n    ImmediateDefinition.prototype.canUsePostMessage = function () {\n        var root = this.root;\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `root.postMessage` means something completely different and can't be used for this purpose.\n        if (root.postMessage && !root.importScripts) {\n            var postMessageIsAsynchronous_1 = true;\n            var oldOnMessage = root.onmessage;\n            root.onmessage = function () {\n                postMessageIsAsynchronous_1 = false;\n            };\n            root.postMessage('', '*');\n            root.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous_1;\n        }\n        return false;\n    };\n    // This function accepts the same arguments as setImmediate, but\n    // returns a function that requires no arguments.\n    ImmediateDefinition.prototype.partiallyApplied = function (handler) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        var fn = function result() {\n            var _a = result, handler = _a.handler, args = _a.args;\n            if (typeof handler === 'function') {\n                handler.apply(undefined, args);\n            }\n            else {\n                (new Function('' + handler))();\n            }\n        };\n        fn.handler = handler;\n        fn.args = args;\n        return fn;\n    };\n    ImmediateDefinition.prototype.addFromSetImmediateArguments = function (args) {\n        this.tasksByHandle[this.nextHandle] = this.partiallyApplied.apply(undefined, args);\n        return this.nextHandle++;\n    };\n    ImmediateDefinition.prototype.createProcessNextTickSetImmediate = function () {\n        var fn = function setImmediate() {\n            var instance = setImmediate.instance;\n            var handle = instance.addFromSetImmediateArguments(arguments);\n            instance.root.process.nextTick(instance.partiallyApplied(instance.runIfPresent, handle));\n            return handle;\n        };\n        fn.instance = this;\n        return fn;\n    };\n    ImmediateDefinition.prototype.createPostMessageSetImmediate = function () {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n        var root = this.root;\n        var messagePrefix = 'setImmediate$' + root.Math.random() + '$';\n        var onGlobalMessage = function globalMessageHandler(event) {\n            var instance = globalMessageHandler.instance;\n            if (event.source === root &&\n                typeof event.data === 'string' &&\n                event.data.indexOf(messagePrefix) === 0) {\n                instance.runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n        onGlobalMessage.instance = this;\n        root.addEventListener('message', onGlobalMessage, false);\n        var fn = function setImmediate() {\n            var _a = setImmediate, messagePrefix = _a.messagePrefix, instance = _a.instance;\n            var handle = instance.addFromSetImmediateArguments(arguments);\n            instance.root.postMessage(messagePrefix + handle, '*');\n            return handle;\n        };\n        fn.instance = this;\n        fn.messagePrefix = messagePrefix;\n        return fn;\n    };\n    ImmediateDefinition.prototype.runIfPresent = function (handle) {\n        // From the spec: 'Wait until any invocations of this algorithm started before this one have completed.'\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (this.currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // 'too much recursion' error.\n            this.root.setTimeout(this.partiallyApplied(this.runIfPresent, handle), 0);\n        }\n        else {\n            var task = this.tasksByHandle[handle];\n            if (task) {\n                this.currentlyRunningATask = true;\n                try {\n                    task();\n                }\n                finally {\n                    this.clearImmediate(handle);\n                    this.currentlyRunningATask = false;\n                }\n            }\n        }\n    };\n    ImmediateDefinition.prototype.createMessageChannelSetImmediate = function () {\n        var _this = this;\n        var channel = new this.root.MessageChannel();\n        channel.port1.onmessage = function (event) {\n            var handle = event.data;\n            _this.runIfPresent(handle);\n        };\n        var fn = function setImmediate() {\n            var _a = setImmediate, channel = _a.channel, instance = _a.instance;\n            var handle = instance.addFromSetImmediateArguments(arguments);\n            channel.port2.postMessage(handle);\n            return handle;\n        };\n        fn.channel = channel;\n        fn.instance = this;\n        return fn;\n    };\n    ImmediateDefinition.prototype.createReadyStateChangeSetImmediate = function () {\n        var fn = function setImmediate() {\n            var instance = setImmediate.instance;\n            var root = instance.root;\n            var doc = root.document;\n            var html = doc.documentElement;\n            var handle = instance.addFromSetImmediateArguments(arguments);\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement('script');\n            script.onreadystatechange = function () {\n                instance.runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n            return handle;\n        };\n        fn.instance = this;\n        return fn;\n    };\n    ImmediateDefinition.prototype.createSetTimeoutSetImmediate = function () {\n        var fn = function setImmediate() {\n            var instance = setImmediate.instance;\n            var handle = instance.addFromSetImmediateArguments(arguments);\n            instance.root.setTimeout(instance.partiallyApplied(instance.runIfPresent, handle), 0);\n            return handle;\n        };\n        fn.instance = this;\n        return fn;\n    };\n    return ImmediateDefinition;\n}());\nexports.ImmediateDefinition = ImmediateDefinition;\nexports.Immediate = new ImmediateDefinition(root_1.root);\n","\"use strict\";\nvar root_1 = require('./root');\nvar MapPolyfill_1 = require('./MapPolyfill');\nexports.Map = root_1.root.Map || (function () { return MapPolyfill_1.MapPolyfill; })();\n","\"use strict\";\nvar MapPolyfill = (function () {\n    function MapPolyfill() {\n        this.size = 0;\n        this._values = [];\n        this._keys = [];\n    }\n    MapPolyfill.prototype.get = function (key) {\n        var i = this._keys.indexOf(key);\n        return i === -1 ? undefined : this._values[i];\n    };\n    MapPolyfill.prototype.set = function (key, value) {\n        var i = this._keys.indexOf(key);\n        if (i === -1) {\n            this._keys.push(key);\n            this._values.push(value);\n            this.size++;\n        }\n        else {\n            this._values[i] = value;\n        }\n        return this;\n    };\n    MapPolyfill.prototype.delete = function (key) {\n        var i = this._keys.indexOf(key);\n        if (i === -1) {\n            return false;\n        }\n        this._values.splice(i, 1);\n        this._keys.splice(i, 1);\n        this.size--;\n        return true;\n    };\n    MapPolyfill.prototype.clear = function () {\n        this._keys.length = 0;\n        this._values.length = 0;\n        this.size = 0;\n    };\n    MapPolyfill.prototype.forEach = function (cb, thisArg) {\n        for (var i = 0; i < this.size; i++) {\n            cb.call(thisArg, this._values[i], this._keys[i]);\n        }\n    };\n    return MapPolyfill;\n}());\nexports.MapPolyfill = MapPolyfill;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nvar ObjectUnsubscribedError = (function (_super) {\n    __extends(ObjectUnsubscribedError, _super);\n    function ObjectUnsubscribedError() {\n        var err = _super.call(this, 'object unsubscribed');\n        this.name = err.name = 'ObjectUnsubscribedError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return ObjectUnsubscribedError;\n}(Error));\nexports.ObjectUnsubscribedError = ObjectUnsubscribedError;\n","\"use strict\";\nvar root_1 = require('./root');\nfunction minimalSetImpl() {\n    // THIS IS NOT a full impl of Set, this is just the minimum\n    // bits of functionality we need for this library.\n    return (function () {\n        function MinimalSet() {\n            this._values = [];\n        }\n        MinimalSet.prototype.add = function (value) {\n            if (!this.has(value)) {\n                this._values.push(value);\n            }\n        };\n        MinimalSet.prototype.has = function (value) {\n            return this._values.indexOf(value) !== -1;\n        };\n        Object.defineProperty(MinimalSet.prototype, \"size\", {\n            get: function () {\n                return this._values.length;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        MinimalSet.prototype.clear = function () {\n            this._values.length = 0;\n        };\n        return MinimalSet;\n    }());\n}\nexports.minimalSetImpl = minimalSetImpl;\nexports.Set = root_1.root.Set || minimalSetImpl();\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when duetime elapses.\n *\n * @see {@link timeout}\n *\n * @class TimeoutError\n */\nvar TimeoutError = (function (_super) {\n    __extends(TimeoutError, _super);\n    function TimeoutError() {\n        var err = _super.call(this, 'Timeout has occurred');\n        this.name = err.name = 'TimeoutError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return TimeoutError;\n}(Error));\nexports.TimeoutError = TimeoutError;\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nvar UnsubscriptionError = (function (_super) {\n    __extends(UnsubscriptionError, _super);\n    function UnsubscriptionError(errors) {\n        _super.call(this);\n        this.errors = errors;\n        var err = Error.call(this, errors ?\n            errors.length + \" errors occurred during unsubscription:\\n  \" + errors.map(function (err, i) { return ((i + 1) + \") \" + err.toString()); }).join('\\n  ') : '');\n        this.name = err.name = 'UnsubscriptionError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return UnsubscriptionError;\n}(Error));\nexports.UnsubscriptionError = UnsubscriptionError;\n","\"use strict\";\nfunction applyMixins(derivedCtor, baseCtors) {\n    for (var i = 0, len = baseCtors.length; i < len; i++) {\n        var baseCtor = baseCtors[i];\n        var propertyKeys = Object.getOwnPropertyNames(baseCtor.prototype);\n        for (var j = 0, len2 = propertyKeys.length; j < len2; j++) {\n            var name_1 = propertyKeys[j];\n            derivedCtor.prototype[name_1] = baseCtor.prototype[name_1];\n        }\n    }\n}\nexports.applyMixins = applyMixins;\n","\"use strict\";\nvar root_1 = require('./root');\nfunction assignImpl(target) {\n    var sources = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        sources[_i - 1] = arguments[_i];\n    }\n    var len = sources.length;\n    for (var i = 0; i < len; i++) {\n        var source = sources[i];\n        for (var k in source) {\n            if (source.hasOwnProperty(k)) {\n                target[k] = source[k];\n            }\n        }\n    }\n    return target;\n}\nexports.assignImpl = assignImpl;\n;\nfunction getAssign(root) {\n    return root.Object.assign || assignImpl;\n}\nexports.getAssign = getAssign;\nexports.assign = getAssign(root_1.root);\n","\"use strict\";\n// typeof any so that it we don't have to cast when comparing a result to the error object\nexports.errorObject = { e: {} };\n","\"use strict\";\nfunction identity(x) {\n    return x;\n}\nexports.identity = identity;\n","\"use strict\";\nexports.isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });\n","\"use strict\";\nexports.isArrayLike = (function (x) { return x && typeof x.length === 'number'; });\n","\"use strict\";\nfunction isDate(value) {\n    return value instanceof Date && !isNaN(+value);\n}\nexports.isDate = isDate;\n","\"use strict\";\nfunction isFunction(x) {\n    return typeof x === 'function';\n}\nexports.isFunction = isFunction;\n","\"use strict\";\nvar isArray_1 = require('../util/isArray');\nfunction isNumeric(val) {\n    // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n    // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n    // subtraction forces infinities to NaN\n    // adding 1 corrects loss of precision from parseFloat (#15100)\n    return !isArray_1.isArray(val) && (val - parseFloat(val) + 1) >= 0;\n}\nexports.isNumeric = isNumeric;\n;\n","\"use strict\";\nfunction isObject(x) {\n    return x != null && typeof x === 'object';\n}\nexports.isObject = isObject;\n","\"use strict\";\nfunction isPromise(value) {\n    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';\n}\nexports.isPromise = isPromise;\n","\"use strict\";\nfunction isScheduler(value) {\n    return value && typeof value.schedule === 'function';\n}\nexports.isScheduler = isScheduler;\n","\"use strict\";\n/* tslint:disable:no-empty */\nfunction noop() { }\nexports.noop = noop;\n","\"use strict\";\nfunction not(pred, thisArg) {\n    function notPred() {\n        return !(notPred.pred.apply(notPred.thisArg, arguments));\n    }\n    notPred.pred = pred;\n    notPred.thisArg = thisArg;\n    return notPred;\n}\nexports.not = not;\n","\"use strict\";\nvar noop_1 = require('./noop');\n/* tslint:enable:max-line-length */\nfunction pipe() {\n    var fns = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        fns[_i - 0] = arguments[_i];\n    }\n    return pipeFromArray(fns);\n}\nexports.pipe = pipe;\n/* @internal */\nfunction pipeFromArray(fns) {\n    if (!fns) {\n        return noop_1.noop;\n    }\n    if (fns.length === 1) {\n        return fns[0];\n    }\n    return function piped(input) {\n        return fns.reduce(function (prev, fn) { return fn(prev); }, input);\n    };\n}\nexports.pipeFromArray = pipeFromArray;\n","\"use strict\";\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\nvar __window = typeof window !== 'undefined' && window;\nvar __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nvar __global = typeof global !== 'undefined' && global;\nvar _root = __window || __global || __self;\nexports.root = _root;\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n(function () {\n    if (!_root) {\n        throw new Error('RxJS could not find any global context (window, self, global)');\n    }\n})();\n","\"use strict\";\nvar root_1 = require('./root');\nvar isArrayLike_1 = require('./isArrayLike');\nvar isPromise_1 = require('./isPromise');\nvar isObject_1 = require('./isObject');\nvar Observable_1 = require('../Observable');\nvar iterator_1 = require('../symbol/iterator');\nvar InnerSubscriber_1 = require('../InnerSubscriber');\nvar observable_1 = require('../symbol/observable');\nfunction subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {\n    var destination = new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n    if (destination.closed) {\n        return null;\n    }\n    if (result instanceof Observable_1.Observable) {\n        if (result._isScalar) {\n            destination.next(result.value);\n            destination.complete();\n            return null;\n        }\n        else {\n            destination.syncErrorThrowable = true;\n            return result.subscribe(destination);\n        }\n    }\n    else if (isArrayLike_1.isArrayLike(result)) {\n        for (var i = 0, len = result.length; i < len && !destination.closed; i++) {\n            destination.next(result[i]);\n        }\n        if (!destination.closed) {\n            destination.complete();\n        }\n    }\n    else if (isPromise_1.isPromise(result)) {\n        result.then(function (value) {\n            if (!destination.closed) {\n                destination.next(value);\n                destination.complete();\n            }\n        }, function (err) { return destination.error(err); })\n            .then(null, function (err) {\n            // Escaping the Promise trap: globally throw unhandled errors\n            root_1.root.setTimeout(function () { throw err; });\n        });\n        return destination;\n    }\n    else if (result && typeof result[iterator_1.iterator] === 'function') {\n        var iterator = result[iterator_1.iterator]();\n        do {\n            var item = iterator.next();\n            if (item.done) {\n                destination.complete();\n                break;\n            }\n            destination.next(item.value);\n            if (destination.closed) {\n                break;\n            }\n        } while (true);\n    }\n    else if (result && typeof result[observable_1.observable] === 'function') {\n        var obs = result[observable_1.observable]();\n        if (typeof obs.subscribe !== 'function') {\n            destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n        }\n        else {\n            return obs.subscribe(new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n        }\n    }\n    else {\n        var value = isObject_1.isObject(result) ? 'an invalid object' : \"'\" + result + \"'\";\n        var msg = (\"You provided \" + value + \" where a stream was expected.\")\n            + ' You can provide an Observable, Promise, Array, or Iterable.';\n        destination.error(new TypeError(msg));\n    }\n    return null;\n}\nexports.subscribeToResult = subscribeToResult;\n","\"use strict\";\nvar Subscriber_1 = require('../Subscriber');\nvar rxSubscriber_1 = require('../symbol/rxSubscriber');\nvar Observer_1 = require('../Observer');\nfunction toSubscriber(nextOrObserver, error, complete) {\n    if (nextOrObserver) {\n        if (nextOrObserver instanceof Subscriber_1.Subscriber) {\n            return nextOrObserver;\n        }\n        if (nextOrObserver[rxSubscriber_1.rxSubscriber]) {\n            return nextOrObserver[rxSubscriber_1.rxSubscriber]();\n        }\n    }\n    if (!nextOrObserver && !error && !complete) {\n        return new Subscriber_1.Subscriber(Observer_1.empty);\n    }\n    return new Subscriber_1.Subscriber(nextOrObserver, error, complete);\n}\nexports.toSubscriber = toSubscriber;\n","\"use strict\";\nvar errorObject_1 = require('./errorObject');\nvar tryCatchTarget;\nfunction tryCatcher() {\n    try {\n        return tryCatchTarget.apply(this, arguments);\n    }\n    catch (e) {\n        errorObject_1.errorObject.e = e;\n        return errorObject_1.errorObject;\n    }\n}\nfunction tryCatch(fn) {\n    tryCatchTarget = fn;\n    return tryCatcher;\n}\nexports.tryCatch = tryCatch;\n;\n"],"names":["root_1","require","toSubscriber_1","observable_1","pipe_1","Observable","subscribe","_isScalar","_subscribe","prototype","lift","operator","observable","source","observerOrNext","error","complete","sink","toSubscriber","call","add","syncErrorThrowable","_trySubscribe","syncErrorThrown","syncErrorValue","err","forEach","next","PromiseCtor","_this","root","Rx","config","Promise","Error","resolve","reject","subscription","value","unsubscribe","subscriber","pipe","operations","_i","arguments","length","pipeFromArray","toPromise","x","create","exports","Subject_1","Subject","AnonymousSubject","Observable_1","Subscription_1","Subscription","Subscriber_1","Subscriber","AsyncSubject_1","AsyncSubject","ReplaySubject_1","ReplaySubject","BehaviorSubject_1","BehaviorSubject","ConnectableObservable_1","ConnectableObservable","Notification_1","Notification","EmptyError_1","EmptyError","ArgumentOutOfRangeError_1","ArgumentOutOfRangeError","ObjectUnsubscribedError_1","ObjectUnsubscribedError","TimeoutError_1","TimeoutError","UnsubscriptionError_1","UnsubscriptionError","timeInterval_1","TimeInterval","timestamp_1","Timestamp","TestScheduler_1","TestScheduler","VirtualTimeScheduler_1","VirtualTimeScheduler","AjaxObservable_1","AjaxResponse","AjaxError","AjaxTimeoutError","asap_1","async_1","queue_1","animationFrame_1","rxSubscriber_1","iterator_1","_operators","operators","Scheduler","asap","queue","animationFrame","async","Symbol","rxSubscriber","iterator","__extends","d","b","p","hasOwnProperty","__","constructor","Object","tryCatch_1","errorObject_1","BoundCallbackObservable","_super","callbackFunc","selector","args","context","scheduler","func","undefined","subject","handler","handlerFn","innerArgs","result_1","tryCatch","apply","errorObject","e","result","concat","schedule","dispatch","state","self","result_2","dispatchError","dispatchNext","arg","isNumeric_1","IntervalObservable","period","isNumeric","index","closed","isScheduler_1","isDate_1","TimerObservable","dueTime","Number","isScheduler","isDate","now","initialDelay","action","_a","map_1","getCORSRequest","XMLHttpRequest","XDomainRequest","getXMLHttpRequest","progId","progIds","i","ActiveXObject","ajaxGet","url","headers","AjaxObservable","method","ajaxPost","body","ajaxDelete","ajaxPut","ajaxPatch","mapResponse","map","response","ajaxGetJSON","responseType","urlOrRequest","request","createXHR","crossDomain","withCredentials","timeout","prop","AjaxSubscriber","get","post","delete","put","patch","getJSON","destination","done","FormData","serializeBody","send","xhr","_b","user","password","setupEvents","open","setHeaders","contentType","splitIndex","indexOf","substring","keys","key","encodeURIComponent","join","JSON","stringify","setRequestHeader","progressSubscriber","xhrTimeout","ontimeout","upload","xhrProgress_1","onprogress","xhrError_1","onerror","xhrReadyStateChange","readyState","status_1","status","responseText","onreadystatechange","abort","originalEvent","parseXhrResponse","message","parse","responseXML","auditTime_1","auditTime","duration","bufferTime_1","bufferTime","bufferTimeSpan","bufferCreationInterval","maxBufferSize","POSITIVE_INFINITY","debounceTime_1","debounceTime","delay_1","delay","observeOn_1","observeOn","sampleTime_1","sampleTime","throttle_1","throttleTime_1","throttleTime","defaultThrottleConfig","timeInterval","timeout_1","due","timeoutWith_1","timeoutWith","withObservable","timestamp","windowTime_1","windowTime","windowTimeSpan","windowCreationInterval","maxWindowSize","audit_1","timer_1","audit","timer","bufferTimeOperatorFunction","BufferTimeOperator","BufferTimeSubscriber","Context","buffer","contexts","openContext","timespanOnly","timeSpanOnlyState","closeAction","dispatchBufferTimeSpanOnly","closeState","creationState","dispatchBufferClose","dispatchBufferCreation","_next","len","filledBufferContext","push","onBufferFull","_error","_complete","shift","_unsubscribe","closeContext","remove","spliceIndex","splice","prevContext","DebounceTimeOperator","DebounceTimeSubscriber","debouncedSubscription","lastValue","hasValue","clearDebounce","debouncedNext","absoluteDelay","delayFor","Math","abs","DelayOperator","DelaySubscriber","active","errored","time","notification","observe","max","_schedule","scheduleNotification","DelayMessage","createNext","createComplete","observeOnOperatorFunction","ObserveOnOperator","ObserveOnSubscriber","scheduleMessage","ObserveOnMessage","createError","SampleTimeOperator","SampleTimeSubscriber","dispatchNotification","notifyNext","ThrottleTimeOperator","leading","trailing","ThrottleTimeSubscriber","_hasTrailingValue","_trailingValue","throttled","clearThrottle","TimeIntervalOperator","interval","observer","TimeIntervalSubscriber","lastTime","span","absoluteTimeout","waitFor","TimeoutOperator","errorInstance","TimeoutSubscriber","scheduleTimeout","dispatchTimeout","OuterSubscriber_1","subscribeToResult_1","TimeoutWithOperator","TimeoutWithSubscriber","_unsubscribeAndRecycle","subscribeToResult","OuterSubscriber","windowTimeOperatorFunction","WindowTimeOperator","WindowTimeSubscriber","CountedSubject","_numberOfNextedValues","defineProperty","enumerable","configurable","windows","window","openWindow","dispatchWindowClose","dispatchWindowCreation","dispatchWindowTimeSpanOnly","window_1","numberOfNextedValues","closeWindow","window_2","timeSpanState","AsyncAction_1","AnimationFrame_1","AnimationFrameAction","work","requestAsyncId","id","actions","scheduled","AnimationFrame","requestAnimationFrame","flush","bind","recycleAsyncId","cancelAnimationFrame","AsyncAction","Immediate_1","AsapAction","Immediate","setImmediate","clearImmediate","Action_1","pending","setInterval","clearInterval","execute","_execute","errorValue","Action","Scheduler_1","AsyncScheduler","QueueAction","AnimationFrameAction_1","AnimationFrameScheduler_1","AnimationFrameScheduler","AsapAction_1","AsapScheduler_1","AsapScheduler","AsyncScheduler_1","QueueAction_1","QueueScheduler_1","QueueScheduler","ImmediateDefinition","nextHandle","tasksByHandle","currentlyRunningATask","canUseProcessNextTick","createProcessNextTickSetImmediate","canUsePostMessage","createPostMessageSetImmediate","canUseMessageChannel","createMessageChannelSetImmediate","canUseReadyStateChange","createReadyStateChangeSetImmediate","createSetTimeoutSetImmediate","ci","handle","instance","identify","o","toString","process","Boolean","MessageChannel","document","createElement","postMessage","importScripts","postMessageIsAsynchronous_1","oldOnMessage","onmessage","partiallyApplied","fn","Function","addFromSetImmediateArguments","nextTick","runIfPresent","messagePrefix","random","onGlobalMessage","globalMessageHandler","event","data","slice","addEventListener","setTimeout","task","channel","port1","port2","doc","html","documentElement","script","removeChild","appendChild"],"sourceRoot":"webpack:///"}